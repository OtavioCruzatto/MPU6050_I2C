
MPU6050_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007e68  08007e68  00017e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800829c  0800829c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800829c  0800829c  0001829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a4  080082a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080082ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001dc  08008488  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08008488  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011901  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ff  00000000  00000000  00031b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00033d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234fd  00000000  00000000  00035c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013228  00000000  00000000  0005913d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c8b  00000000  00000000  0006c365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141ff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005618  00000000  00000000  00142040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e50 	.word	0x08007e50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007e50 	.word	0x08007e50

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (10ms)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d105      	bne.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		counterTimer1++;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f06:	701a      	strb	r2, [r3, #0]
		//counterTimer2++;
	}
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	2000024c 	.word	0x2000024c
 8000f18:	20000324 	.word	0x20000324

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fbc0 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f888 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 f978 	bl	800121c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f2c:	f000 f8e4 	bl	80010f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f30:	f000 f94a 	bl	80011c8 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000f34:	f000 f90e 	bl	8001154 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  mpu6050InitStatus = mpu6050Init(&hi2c1, &mpu6050Device);
 8000f38:	4934      	ldr	r1, [pc, #208]	; (800100c <main+0xf0>)
 8000f3a:	4835      	ldr	r0, [pc, #212]	; (8001010 <main+0xf4>)
 8000f3c:	f003 fce2 	bl	8004904 <mpu6050Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <main+0xf8>)
 8000f46:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim9);
 8000f48:	4833      	ldr	r0, [pc, #204]	; (8001018 <main+0xfc>)
 8000f4a:	f002 fd63 	bl	8003a14 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (counterTimer1 >= delay500ms)
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <main+0x100>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d3fa      	bcc.n	8000f4e <main+0x32>
	  {
		  if (mpu6050InitStatus == OK)
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <main+0xf8>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d142      	bne.n	8000fe6 <main+0xca>
		  {
			  mpu6050GetAccel(&mpu6050Device);
 8000f60:	482a      	ldr	r0, [pc, #168]	; (800100c <main+0xf0>)
 8000f62:	f003 ffef 	bl	8004f44 <mpu6050GetAccel>

			  sprintf((char *) message, "X axis = %f\r\n", mpu6050Device.accel[X_AXIS]);
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <main+0xf0>)
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fb0c 	bl	8000588 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	492a      	ldr	r1, [pc, #168]	; (8001020 <main+0x104>)
 8000f76:	482b      	ldr	r0, [pc, #172]	; (8001024 <main+0x108>)
 8000f78:	f004 fcf2 	bl	8005960 <siprintf>
			  HAL_UART_Transmit(&huart2, message, strlen((char *) message), timeoutUart);
 8000f7c:	4829      	ldr	r0, [pc, #164]	; (8001024 <main+0x108>)
 8000f7e:	f7ff f947 	bl	8000210 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	4926      	ldr	r1, [pc, #152]	; (8001024 <main+0x108>)
 8000f8a:	4827      	ldr	r0, [pc, #156]	; (8001028 <main+0x10c>)
 8000f8c:	f003 f945 	bl	800421a <HAL_UART_Transmit>

			  sprintf((char *) message, "Y axis = %f\r\n", mpu6050Device.accel[Y_AXIS]);
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <main+0xf0>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff faf7 	bl	8000588 <__aeabi_f2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4923      	ldr	r1, [pc, #140]	; (800102c <main+0x110>)
 8000fa0:	4820      	ldr	r0, [pc, #128]	; (8001024 <main+0x108>)
 8000fa2:	f004 fcdd 	bl	8005960 <siprintf>
			  HAL_UART_Transmit(&huart2, message, strlen((char *) message), timeoutUart);
 8000fa6:	481f      	ldr	r0, [pc, #124]	; (8001024 <main+0x108>)
 8000fa8:	f7ff f932 	bl	8000210 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	491c      	ldr	r1, [pc, #112]	; (8001024 <main+0x108>)
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <main+0x10c>)
 8000fb6:	f003 f930 	bl	800421a <HAL_UART_Transmit>

			  sprintf((char *) message, "Z axis = %f\r\n\r\n", mpu6050Device.accel[Z_AXIS]);
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <main+0xf0>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fae2 	bl	8000588 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4919      	ldr	r1, [pc, #100]	; (8001030 <main+0x114>)
 8000fca:	4816      	ldr	r0, [pc, #88]	; (8001024 <main+0x108>)
 8000fcc:	f004 fcc8 	bl	8005960 <siprintf>
			  HAL_UART_Transmit(&huart2, message, strlen((char *) message), timeoutUart);
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <main+0x108>)
 8000fd2:	f7ff f91d 	bl	8000210 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	2364      	movs	r3, #100	; 0x64
 8000fdc:	4911      	ldr	r1, [pc, #68]	; (8001024 <main+0x108>)
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <main+0x10c>)
 8000fe0:	f003 f91b 	bl	800421a <HAL_UART_Transmit>
 8000fe4:	e00d      	b.n	8001002 <main+0xe6>
		  }
		  else
		  {
			  HAL_UART_Transmit(&huart2, (uint8_t *) "NOK\n\r", 6, timeoutUart);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	2206      	movs	r2, #6
 8000fea:	4912      	ldr	r1, [pc, #72]	; (8001034 <main+0x118>)
 8000fec:	480e      	ldr	r0, [pc, #56]	; (8001028 <main+0x10c>)
 8000fee:	f003 f914 	bl	800421a <HAL_UART_Transmit>
			  mpu6050InitStatus = mpu6050Init(&hi2c1, &mpu6050Device);
 8000ff2:	4906      	ldr	r1, [pc, #24]	; (800100c <main+0xf0>)
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <main+0xf4>)
 8000ff6:	f003 fc85 	bl	8004904 <mpu6050Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <main+0xf8>)
 8001000:	701a      	strb	r2, [r3, #0]
		  }
		  counterTimer1 = 0;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <main+0x100>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	  if (counterTimer1 >= delay500ms)
 8001008:	e7a1      	b.n	8000f4e <main+0x32>
 800100a:	bf00      	nop
 800100c:	200002d8 	.word	0x200002d8
 8001010:	200001f8 	.word	0x200001f8
 8001014:	200002f8 	.word	0x200002f8
 8001018:	2000024c 	.word	0x2000024c
 800101c:	20000324 	.word	0x20000324
 8001020:	08007e68 	.word	0x08007e68
 8001024:	200002fc 	.word	0x200002fc
 8001028:	20000294 	.word	0x20000294
 800102c:	08007e78 	.word	0x08007e78
 8001030:	08007e88 	.word	0x08007e88
 8001034:	08007e98 	.word	0x08007e98

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2234      	movs	r2, #52	; 0x34
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f818 	bl	800507c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <SystemClock_Config+0xb8>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <SystemClock_Config+0xb8>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <SystemClock_Config+0xb8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <SystemClock_Config+0xbc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <SystemClock_Config+0xbc>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <SystemClock_Config+0xbc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a0:	2310      	movs	r3, #16
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 f9c3 	bl	8003438 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010b8:	f000 f8d8 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 feea 	bl	8002eb0 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010e2:	f000 f8c3 	bl	800126c <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	; 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f000 fdcd 	bl	8001cd4 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 f894 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001f8 	.word	0x200001f8
 800114c:	40005400 	.word	0x40005400
 8001150:	000186a0 	.word	0x000186a0

08001154 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_TIM9_Init+0x6c>)
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <MX_TIM9_Init+0x70>)
 800116a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16000-1;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_TIM9_Init+0x6c>)
 800116e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001172:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_TIM9_Init+0x6c>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10-1;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_TIM9_Init+0x6c>)
 800117c:	2209      	movs	r2, #9
 800117e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_TIM9_Init+0x6c>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_TIM9_Init+0x6c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_TIM9_Init+0x6c>)
 800118e:	f002 fbf1 	bl	8003974 <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001198:	f000 f868 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_TIM9_Init+0x6c>)
 80011a8:	f002 fdac 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80011b2:	f000 f85b 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000024c 	.word	0x2000024c
 80011c4:	40014000 	.word	0x40014000

080011c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 8001200:	f002 ffbe 	bl	8004180 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f82f 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000294 	.word	0x20000294
 8001218:	40004400 	.word	0x40004400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_GPIO_Init+0x4c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <MX_GPIO_Init+0x4c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_GPIO_Init+0x4c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_GPIO_Init+0x4c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <MX_GPIO_Init+0x4c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_GPIO_Init+0x4c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_I2C_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_I2C_MspInit+0x8c>)
 8001324:	f000 fb42 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_I2C_MspInit+0x88>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_I2C_MspInit+0x88>)
 8001332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_I2C_MspInit+0x88>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40005400 	.word	0x40005400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400

08001358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_TIM_Base_MspInit+0x48>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d115      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2018      	movs	r0, #24
 800138c:	f000 fad7 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001390:	2018      	movs	r0, #24
 8001392:	f000 faf0 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40014000 	.word	0x40014000
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_UART_MspInit+0x84>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12b      	bne.n	8001422 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a17      	ldr	r2, [pc, #92]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001402:	230c      	movs	r3, #12
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001412:	2307      	movs	r3, #7
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <HAL_UART_MspInit+0x8c>)
 800141e:	f000 fac5 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40004400 	.word	0x40004400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001484:	f000 f960 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001492:	f002 fb2f 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000024c 	.word	0x2000024c

080014a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	return 1;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_kill>:

int _kill(int pid, int sig)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ba:	f003 fdb5 	bl	8005028 <__errno>
 80014be:	4603      	mov	r3, r0
 80014c0:	2216      	movs	r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
	return -1;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_exit>:

void _exit (int status)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ffe7 	bl	80014b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0x12>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
	}

return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e009      	b.n	8001544 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf1      	blt.n	8001530 <_write+0x12>
	}
	return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_close>:

int _close(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	return -1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157e:	605a      	str	r2, [r3, #4]
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_isatty>:

int _isatty(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
	return 1;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f003 fd1a 	bl	8005028 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20020000 	.word	0x20020000
 8001620:	00000400 	.word	0x00000400
 8001624:	20000328 	.word	0x20000328
 8001628:	20000340 	.word	0x20000340

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <LoopFillZerobss+0x26>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167a:	f7ff ffd7 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f003 fcd9 	bl	8005034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fc4b 	bl	8000f1c <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001694:	080082ac 	.word	0x080082ac
  ldr r2, =_sbss
 8001698:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800169c:	20000340 	.word	0x20000340

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_Init+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_Init+0x40>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x40>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f92b 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fdce 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f943 	bl	8001992 <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f90b 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000008 	.word	0x20000008
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	2000032c 	.word	0x2000032c

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000032c 	.word	0x2000032c

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e165      	b.n	8001c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8154 	bne.w	8001c8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d005      	beq.n	80019fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80ae 	beq.w	8001c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a5c      	ldr	r2, [pc, #368]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a58      	ldr	r2, [pc, #352]	; (8001cb0 <HAL_GPIO_Init+0x304>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x308>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_GPIO_Init+0x30c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x216>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_GPIO_Init+0x310>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x212>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_GPIO_Init+0x314>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_GPIO_Init+0x318>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x20a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_GPIO_Init+0x31c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x206>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x202>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd8:	4935      	ldr	r1, [pc, #212]	; (8001cb0 <HAL_GPIO_Init+0x304>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a31      	ldr	r2, [pc, #196]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3a:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f ae96 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021400 	.word	0x40021400
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e12b      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fae4 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d38:	f001 f9ac 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a81      	ldr	r2, [pc, #516]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d807      	bhi.n	8001d58 <HAL_I2C_Init+0x84>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a80      	ldr	r2, [pc, #512]	; (8001f4c <HAL_I2C_Init+0x278>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e006      	b.n	8001d66 <HAL_I2C_Init+0x92>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	; (8001f50 <HAL_I2C_Init+0x27c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0e7      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <HAL_I2C_Init+0x280>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d802      	bhi.n	8001da8 <HAL_I2C_Init+0xd4>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	e009      	b.n	8001dbc <HAL_I2C_Init+0xe8>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_I2C_Init+0x284>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	3301      	adds	r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	495c      	ldr	r1, [pc, #368]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d819      	bhi.n	8001e10 <HAL_I2C_Init+0x13c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e59      	subs	r1, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001df0:	400b      	ands	r3, r1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_I2C_Init+0x138>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e59      	subs	r1, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	e051      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e04f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_I2C_Init+0x168>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e012      	b.n	8001e62 <HAL_I2C_Init+0x18e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x196>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e022      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10e      	bne.n	8001e90 <HAL_I2C_Init+0x1bc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e58      	subs	r0, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	e00f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6809      	ldr	r1, [r1, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6911      	ldr	r1, [r2, #16]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	000186a0 	.word	0x000186a0
 8001f4c:	001e847f 	.word	0x001e847f
 8001f50:	003d08ff 	.word	0x003d08ff
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	817b      	strh	r3, [r7, #10]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	813b      	strh	r3, [r7, #8]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f76:	f7ff fbfb 	bl	8001770 <HAL_GetTick>
 8001f7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	f040 80d9 	bne.w	800213c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2319      	movs	r3, #25
 8001f90:	2201      	movs	r2, #1
 8001f92:	496d      	ldr	r1, [pc, #436]	; (8002148 <HAL_I2C_Mem_Write+0x1ec>)
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fdad 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0cc      	b.n	800213e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2C_Mem_Write+0x56>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e0c5      	b.n	800213e <HAL_I2C_Mem_Write+0x1e2>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d007      	beq.n	8001fd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2221      	movs	r2, #33	; 0x21
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2240      	movs	r2, #64	; 0x40
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a4d      	ldr	r2, [pc, #308]	; (800214c <HAL_I2C_Mem_Write+0x1f0>)
 8002018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800201a:	88f8      	ldrh	r0, [r7, #6]
 800201c:	893a      	ldrh	r2, [r7, #8]
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4603      	mov	r3, r0
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fbe4 	bl	80027f8 <I2C_RequestMemoryWrite>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d052      	beq.n	80020dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e081      	b.n	800213e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fe2e 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00d      	beq.n	8002066 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b04      	cmp	r3, #4
 8002050:	d107      	bne.n	8002062 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11b      	bne.n	80020dc <HAL_I2C_Mem_Write+0x180>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d017      	beq.n	80020dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1aa      	bne.n	800203a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fe1a 	bl	8002d22 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d107      	bne.n	800210c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e016      	b.n	800213e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	00100002 	.word	0x00100002
 800214c:	ffff0000 	.word	0xffff0000

08002150 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	4608      	mov	r0, r1
 800215a:	4611      	mov	r1, r2
 800215c:	461a      	mov	r2, r3
 800215e:	4603      	mov	r3, r0
 8002160:	817b      	strh	r3, [r7, #10]
 8002162:	460b      	mov	r3, r1
 8002164:	813b      	strh	r3, [r7, #8]
 8002166:	4613      	mov	r3, r2
 8002168:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800216a:	f7ff fb01 	bl	8001770 <HAL_GetTick>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	f040 8208 	bne.w	800258e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2319      	movs	r3, #25
 8002184:	2201      	movs	r2, #1
 8002186:	497b      	ldr	r1, [pc, #492]	; (8002374 <HAL_I2C_Mem_Read+0x224>)
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fcb3 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
 8002196:	e1fb      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_I2C_Mem_Read+0x56>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e1f4      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d007      	beq.n	80021cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2222      	movs	r2, #34	; 0x22
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a5b      	ldr	r2, [pc, #364]	; (8002378 <HAL_I2C_Mem_Read+0x228>)
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800220e:	88f8      	ldrh	r0, [r7, #6]
 8002210:	893a      	ldrh	r2, [r7, #8]
 8002212:	8979      	ldrh	r1, [r7, #10]
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4603      	mov	r3, r0
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fb80 	bl	8002924 <I2C_RequestMemoryRead>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1b0      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	2b00      	cmp	r3, #0
 8002234:	d113      	bne.n	800225e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	623b      	str	r3, [r7, #32]
 800224a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e184      	b.n	8002568 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b01      	cmp	r3, #1
 8002264:	d11b      	bne.n	800229e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e164      	b.n	8002568 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d11b      	bne.n	80022de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	e144      	b.n	8002568 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022f4:	e138      	b.n	8002568 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	f200 80f1 	bhi.w	80024e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	2b01      	cmp	r3, #1
 8002306:	d123      	bne.n	8002350 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fd49 	bl	8002da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e139      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800234e:	e10b      	b.n	8002568 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b02      	cmp	r3, #2
 8002356:	d14e      	bne.n	80023f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	2200      	movs	r2, #0
 8002360:	4906      	ldr	r1, [pc, #24]	; (800237c <HAL_I2C_Mem_Read+0x22c>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fbc6 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e10e      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
 8002372:	bf00      	nop
 8002374:	00100002 	.word	0x00100002
 8002378:	ffff0000 	.word	0xffff0000
 800237c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f4:	e0b8      	b.n	8002568 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	2200      	movs	r2, #0
 80023fe:	4966      	ldr	r1, [pc, #408]	; (8002598 <HAL_I2C_Mem_Read+0x448>)
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fb77 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0bf      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	2200      	movs	r2, #0
 800245a:	494f      	ldr	r1, [pc, #316]	; (8002598 <HAL_I2C_Mem_Read+0x448>)
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fb49 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e091      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e0:	e042      	b.n	8002568 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fc5c 	bl	8002da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e04c      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d118      	bne.n	8002568 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	f47f aec2 	bne.w	80022f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800258e:	2302      	movs	r3, #2
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	00010004 	.word	0x00010004

0800259c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	460b      	mov	r3, r1
 80025aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff f8e0 	bl	8001770 <HAL_GetTick>
 80025b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	f040 8111 	bne.w	80027e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2319      	movs	r3, #25
 80025ca:	2201      	movs	r2, #1
 80025cc:	4988      	ldr	r1, [pc, #544]	; (80027f0 <HAL_I2C_IsDeviceReady+0x254>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fa90 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
 80025dc:	e104      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2C_IsDeviceReady+0x50>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e0fd      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d007      	beq.n	8002612 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2224      	movs	r2, #36	; 0x24
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a70      	ldr	r2, [pc, #448]	; (80027f4 <HAL_I2C_IsDeviceReady+0x258>)
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002644:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fa4e 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266c:	d103      	bne.n	8002676 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0b6      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002688:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800268a:	f7ff f871 	bl	8001770 <HAL_GetTick>
 800268e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b02      	cmp	r3, #2
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026be:	e025      	b.n	800270c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026c0:	f7ff f856 	bl	8001770 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <HAL_I2C_IsDeviceReady+0x13a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	22a0      	movs	r2, #160	; 0xa0
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2ba0      	cmp	r3, #160	; 0xa0
 8002716:	d005      	beq.n	8002724 <HAL_I2C_IsDeviceReady+0x188>
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_I2C_IsDeviceReady+0x188>
 800271e:	7dbb      	ldrb	r3, [r7, #22]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0cd      	beq.n	80026c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d129      	bne.n	800278e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	4921      	ldr	r1, [pc, #132]	; (80027f0 <HAL_I2C_IsDeviceReady+0x254>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f9c2 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e036      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e02c      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	490f      	ldr	r1, [pc, #60]	; (80027f0 <HAL_I2C_IsDeviceReady+0x254>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f99e 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e012      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f4ff af32 	bcc.w	8002636 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	00100002 	.word	0x00100002
 80027f4:	ffff0000 	.word	0xffff0000

080027f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4603      	mov	r3, r0
 8002808:	817b      	strh	r3, [r7, #10]
 800280a:	460b      	mov	r3, r1
 800280c:	813b      	strh	r3, [r7, #8]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	2200      	movs	r2, #0
 800282a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f960 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002848:	d103      	bne.n	8002852 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e05f      	b.n	8002916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	492d      	ldr	r1, [pc, #180]	; (8002920 <I2C_RequestMemoryWrite+0x128>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f998 	bl	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e04c      	b.n	8002916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa02 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d107      	bne.n	80028ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e02b      	b.n	8002916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	611a      	str	r2, [r3, #16]
 80028ce:	e021      	b.n	8002914 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	6a39      	ldr	r1, [r7, #32]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f9dc 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d107      	bne.n	8002906 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e005      	b.n	8002916 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800290a:	893b      	ldrh	r3, [r7, #8]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	00010002 	.word	0x00010002

08002924 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	817b      	strh	r3, [r7, #10]
 8002936:	460b      	mov	r3, r1
 8002938:	813b      	strh	r3, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800294c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2200      	movs	r2, #0
 8002966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f8c2 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d103      	bne.n	800298e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0aa      	b.n	8002ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	4952      	ldr	r1, [pc, #328]	; (8002af0 <I2C_RequestMemoryRead+0x1cc>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f8fa 	bl	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e097      	b.n	8002ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f964 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d107      	bne.n	80029f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e076      	b.n	8002ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a00:	893b      	ldrh	r3, [r7, #8]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	e021      	b.n	8002a50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f93e 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e050      	b.n	8002ae8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a46:	893b      	ldrh	r3, [r7, #8]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	6a39      	ldr	r1, [r7, #32]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f923 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d107      	bne.n	8002a78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e035      	b.n	8002ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f82b 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab2:	d103      	bne.n	8002abc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e013      	b.n	8002ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ac0:	897b      	ldrh	r3, [r7, #10]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	6a3a      	ldr	r2, [r7, #32]
 8002ad4:	4906      	ldr	r1, [pc, #24]	; (8002af0 <I2C_RequestMemoryRead+0x1cc>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f863 	bl	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	00010002 	.word	0x00010002

08002af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b04:	e025      	b.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d021      	beq.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7fe fe2f 	bl	8001770 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d116      	bne.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e023      	b.n	8002b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10d      	bne.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4013      	ands	r3, r2
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	e00c      	b.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf0c      	ite	eq
 8002b8a:	2301      	moveq	r3, #1
 8002b8c:	2300      	movne	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d0b6      	beq.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb0:	e051      	b.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	d123      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e046      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d021      	beq.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c12:	f7fe fdad 	bl	8001770 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e020      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10c      	bne.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	e00b      	b.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	43da      	mvns	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4013      	ands	r3, r2
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d18d      	bne.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cac:	e02d      	b.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8ce 	bl	8002e50 <I2C_IsAcknowledgeFailed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e02d      	b.n	8002d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d021      	beq.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fd53 	bl	8001770 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b80      	cmp	r3, #128	; 0x80
 8002d16:	d1ca      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d2e:	e02d      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f88d 	bl	8002e50 <I2C_IsAcknowledgeFailed>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e02d      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d021      	beq.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d48:	f7fe fd12 	bl	8001770 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d302      	bcc.n	8002d5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e007      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d1ca      	bne.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002db0:	e042      	b.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d119      	bne.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0210 	mvn.w	r2, #16
 8002dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e029      	b.n	8002e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df4:	f7fe fcbc 	bl	8001770 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d302      	bcc.n	8002e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e007      	b.n	8002e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d1b5      	bne.n	8002db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e66:	d11b      	bne.n	8002ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0cc      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d90c      	bls.n	8002eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b65      	ldr	r3, [pc, #404]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b8      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494d      	ldr	r1, [pc, #308]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d044      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d119      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e067      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4934      	ldr	r1, [pc, #208]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fbe6 	bl	8001770 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fbe2 	bl	8001770 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e04f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d20c      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e032      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4916      	ldr	r1, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490e      	ldr	r1, [pc, #56]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f855 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490a      	ldr	r1, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fb46 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023c00 	.word	0x40023c00
 800306c:	40023800 	.word	0x40023800
 8003070:	08007ea8 	.word	0x08007ea8
 8003074:	20000000 	.word	0x20000000
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff0 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08007eb8 	.word	0x08007eb8

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c0:	f7ff ffdc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08007eb8 	.word	0x08007eb8

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b0a6      	sub	sp, #152	; 0x98
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310a:	4bc8      	ldr	r3, [pc, #800]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b0c      	cmp	r3, #12
 8003114:	f200 817e 	bhi.w	8003414 <HAL_RCC_GetSysClockFreq+0x330>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_RCC_GetSysClockFreq+0x3c>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003155 	.word	0x08003155
 8003124:	08003415 	.word	0x08003415
 8003128:	08003415 	.word	0x08003415
 800312c:	08003415 	.word	0x08003415
 8003130:	0800315d 	.word	0x0800315d
 8003134:	08003415 	.word	0x08003415
 8003138:	08003415 	.word	0x08003415
 800313c:	08003415 	.word	0x08003415
 8003140:	08003165 	.word	0x08003165
 8003144:	08003415 	.word	0x08003415
 8003148:	08003415 	.word	0x08003415
 800314c:	08003415 	.word	0x08003415
 8003150:	080032cf 	.word	0x080032cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4bb6      	ldr	r3, [pc, #728]	; (8003430 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800315a:	e15f      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315c:	4bb5      	ldr	r3, [pc, #724]	; (8003434 <HAL_RCC_GetSysClockFreq+0x350>)
 800315e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003162:	e15b      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003164:	4bb1      	ldr	r3, [pc, #708]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003170:	4bae      	ldr	r3, [pc, #696]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d031      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317c:	4bab      	ldr	r3, [pc, #684]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	2200      	movs	r2, #0
 8003184:	66bb      	str	r3, [r7, #104]	; 0x68
 8003186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	663b      	str	r3, [r7, #96]	; 0x60
 8003190:	2300      	movs	r3, #0
 8003192:	667b      	str	r3, [r7, #100]	; 0x64
 8003194:	4ba7      	ldr	r3, [pc, #668]	; (8003434 <HAL_RCC_GetSysClockFreq+0x350>)
 8003196:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800319a:	462a      	mov	r2, r5
 800319c:	fb03 f202 	mul.w	r2, r3, r2
 80031a0:	2300      	movs	r3, #0
 80031a2:	4621      	mov	r1, r4
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	4aa2      	ldr	r2, [pc, #648]	; (8003434 <HAL_RCC_GetSysClockFreq+0x350>)
 80031ac:	4621      	mov	r1, r4
 80031ae:	fba1 1202 	umull	r1, r2, r1, r2
 80031b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031b4:	460a      	mov	r2, r1
 80031b6:	67ba      	str	r2, [r7, #120]	; 0x78
 80031b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80031ba:	4413      	add	r3, r2
 80031bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c2:	2200      	movs	r2, #0
 80031c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80031d0:	f7fd fd0a 	bl	8000be8 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031de:	e064      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e0:	4b92      	ldr	r3, [pc, #584]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	2200      	movs	r2, #0
 80031e8:	653b      	str	r3, [r7, #80]	; 0x50
 80031ea:	657a      	str	r2, [r7, #84]	; 0x54
 80031ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f4:	2300      	movs	r3, #0
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031fc:	4622      	mov	r2, r4
 80031fe:	462b      	mov	r3, r5
 8003200:	f04f 0000 	mov.w	r0, #0
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	0159      	lsls	r1, r3, #5
 800320a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320e:	0150      	lsls	r0, r2, #5
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4621      	mov	r1, r4
 8003216:	1a51      	subs	r1, r2, r1
 8003218:	6139      	str	r1, [r7, #16]
 800321a:	4629      	mov	r1, r5
 800321c:	eb63 0301 	sbc.w	r3, r3, r1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322e:	4659      	mov	r1, fp
 8003230:	018b      	lsls	r3, r1, #6
 8003232:	4651      	mov	r1, sl
 8003234:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003238:	4651      	mov	r1, sl
 800323a:	018a      	lsls	r2, r1, #6
 800323c:	4651      	mov	r1, sl
 800323e:	ebb2 0801 	subs.w	r8, r2, r1
 8003242:	4659      	mov	r1, fp
 8003244:	eb63 0901 	sbc.w	r9, r3, r1
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003254:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003258:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800325c:	4690      	mov	r8, r2
 800325e:	4699      	mov	r9, r3
 8003260:	4623      	mov	r3, r4
 8003262:	eb18 0303 	adds.w	r3, r8, r3
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	462b      	mov	r3, r5
 800326a:	eb49 0303 	adc.w	r3, r9, r3
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800327c:	4629      	mov	r1, r5
 800327e:	028b      	lsls	r3, r1, #10
 8003280:	4621      	mov	r1, r4
 8003282:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003286:	4621      	mov	r1, r4
 8003288:	028a      	lsls	r2, r1, #10
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003292:	2200      	movs	r2, #0
 8003294:	643b      	str	r3, [r7, #64]	; 0x40
 8003296:	647a      	str	r2, [r7, #68]	; 0x44
 8003298:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800329c:	f7fd fca4 	bl	8000be8 <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4613      	mov	r3, r2
 80032a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032aa:	4b60      	ldr	r3, [pc, #384]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	3301      	adds	r3, #1
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80032bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032cc:	e0a6      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ce:	4b57      	ldr	r3, [pc, #348]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032da:	4b54      	ldr	r3, [pc, #336]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02a      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	2200      	movs	r2, #0
 80032ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032f8:	2100      	movs	r1, #0
 80032fa:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <HAL_RCC_GetSysClockFreq+0x350>)
 80032fc:	fb03 f201 	mul.w	r2, r3, r1
 8003300:	2300      	movs	r3, #0
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	4413      	add	r3, r2
 8003308:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_RCC_GetSysClockFreq+0x350>)
 800330a:	fba0 1202 	umull	r1, r2, r0, r2
 800330e:	677a      	str	r2, [r7, #116]	; 0x74
 8003310:	460a      	mov	r2, r1
 8003312:	673a      	str	r2, [r7, #112]	; 0x70
 8003314:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003316:	4413      	add	r3, r2
 8003318:	677b      	str	r3, [r7, #116]	; 0x74
 800331a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800331e:	2200      	movs	r2, #0
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
 8003322:	637a      	str	r2, [r7, #52]	; 0x34
 8003324:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003328:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800332c:	f7fd fc5c 	bl	8000be8 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4613      	mov	r3, r2
 8003336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800333a:	e05b      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	2200      	movs	r2, #0
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
 8003346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334e:	623b      	str	r3, [r7, #32]
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
 8003354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	f04f 0000 	mov.w	r0, #0
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	0159      	lsls	r1, r3, #5
 8003366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336a:	0150      	lsls	r0, r2, #5
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4641      	mov	r1, r8
 8003372:	ebb2 0a01 	subs.w	sl, r2, r1
 8003376:	4649      	mov	r1, r9
 8003378:	eb63 0b01 	sbc.w	fp, r3, r1
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800338c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003390:	ebb2 040a 	subs.w	r4, r2, sl
 8003394:	eb63 050b 	sbc.w	r5, r3, fp
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	00eb      	lsls	r3, r5, #3
 80033a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a6:	00e2      	lsls	r2, r4, #3
 80033a8:	4614      	mov	r4, r2
 80033aa:	461d      	mov	r5, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	18e3      	adds	r3, r4, r3
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	464b      	mov	r3, r9
 80033b4:	eb45 0303 	adc.w	r3, r5, r3
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c6:	4629      	mov	r1, r5
 80033c8:	028b      	lsls	r3, r1, #10
 80033ca:	4621      	mov	r1, r4
 80033cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d0:	4621      	mov	r1, r4
 80033d2:	028a      	lsls	r2, r1, #10
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033dc:	2200      	movs	r2, #0
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	61fa      	str	r2, [r7, #28]
 80033e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e6:	f7fd fbff 	bl	8000be8 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4613      	mov	r3, r2
 80033f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <HAL_RCC_GetSysClockFreq+0x348>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0f1b      	lsrs	r3, r3, #28
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003402:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003412:	e003      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800341a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003420:	4618      	mov	r0, r3
 8003422:	3798      	adds	r7, #152	; 0x98
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	00f42400 	.word	0x00f42400
 8003434:	017d7840 	.word	0x017d7840

08003438 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e28d      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8083 	beq.w	800355e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003458:	4b94      	ldr	r3, [pc, #592]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b04      	cmp	r3, #4
 8003462:	d019      	beq.n	8003498 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003464:	4b91      	ldr	r3, [pc, #580]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800346c:	2b08      	cmp	r3, #8
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003470:	4b8e      	ldr	r3, [pc, #568]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347c:	d00c      	beq.n	8003498 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347e:	4b8b      	ldr	r3, [pc, #556]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d112      	bne.n	80034b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348a:	4b88      	ldr	r3, [pc, #544]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003496:	d10b      	bne.n	80034b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	4b84      	ldr	r3, [pc, #528]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05b      	beq.n	800355c <HAL_RCC_OscConfig+0x124>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d157      	bne.n	800355c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e25a      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b8:	d106      	bne.n	80034c8 <HAL_RCC_OscConfig+0x90>
 80034ba:	4b7c      	ldr	r3, [pc, #496]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7b      	ldr	r2, [pc, #492]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e01d      	b.n	8003504 <HAL_RCC_OscConfig+0xcc>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0xb4>
 80034d2:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a75      	ldr	r2, [pc, #468]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b73      	ldr	r3, [pc, #460]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a72      	ldr	r2, [pc, #456]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0xcc>
 80034ec:	4b6f      	ldr	r3, [pc, #444]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6e      	ldr	r2, [pc, #440]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b6c      	ldr	r3, [pc, #432]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6b      	ldr	r2, [pc, #428]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe f930 	bl	8001770 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe f92c 	bl	8001770 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e21f      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b61      	ldr	r3, [pc, #388]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0xdc>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe f91c 	bl	8001770 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe f918 	bl	8001770 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e20b      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	4b57      	ldr	r3, [pc, #348]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x104>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06f      	beq.n	800364a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800356a:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003576:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800357e:	2b08      	cmp	r3, #8
 8003580:	d105      	bne.n	800358e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003582:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d11c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b44      	ldr	r3, [pc, #272]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x186>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1d3      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4937      	ldr	r1, [pc, #220]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	e03a      	b.n	800364a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035dc:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <HAL_RCC_OscConfig+0x278>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fe f8c5 	bl	8001770 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ea:	f7fe f8c1 	bl	8001770 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e1b4      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003608:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4925      	ldr	r1, [pc, #148]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <HAL_RCC_OscConfig+0x278>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe f8a4 	bl	8001770 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362c:	f7fe f8a0 	bl	8001770 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e193      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d036      	beq.n	80036c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe f884 	bl	8001770 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366c:	f7fe f880 	bl	8001770 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e173      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x274>)
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x234>
 800368a:	e01b      	b.n	80036c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fe f86d 	bl	8001770 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	e00e      	b.n	80036b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369a:	f7fe f869 	bl	8001770 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d907      	bls.n	80036b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e15c      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
 80036ac:	40023800 	.word	0x40023800
 80036b0:	42470000 	.word	0x42470000
 80036b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	4b8a      	ldr	r3, [pc, #552]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ea      	bne.n	800369a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8097 	beq.w	8003800 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d6:	4b83      	ldr	r3, [pc, #524]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	4b7f      	ldr	r3, [pc, #508]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a7e      	ldr	r2, [pc, #504]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b7c      	ldr	r3, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <HAL_RCC_OscConfig+0x4b0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d118      	bne.n	8003740 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x4b0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a75      	ldr	r2, [pc, #468]	; (80038e8 <HAL_RCC_OscConfig+0x4b0>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371a:	f7fe f829 	bl	8001770 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fe f825 	bl	8001770 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e118      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b6c      	ldr	r3, [pc, #432]	; (80038e8 <HAL_RCC_OscConfig+0x4b0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x31e>
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6713      	str	r3, [r2, #112]	; 0x70
 8003754:	e01c      	b.n	8003790 <HAL_RCC_OscConfig+0x358>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x340>
 800375e:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a60      	ldr	r2, [pc, #384]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
 800376a:	4b5e      	ldr	r3, [pc, #376]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a5d      	ldr	r2, [pc, #372]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0x358>
 8003778:	4b5a      	ldr	r3, [pc, #360]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4a59      	ldr	r2, [pc, #356]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
 8003784:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d015      	beq.n	80037c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd ffea 	bl	8001770 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fd ffe6 	bl	8001770 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0d7      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b6:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ee      	beq.n	80037a0 <HAL_RCC_OscConfig+0x368>
 80037c2:	e014      	b.n	80037ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd ffd4 	bl	8001770 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fd ffd0 	bl	8001770 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0c1      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ee      	bne.n	80037cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	4a3a      	ldr	r2, [pc, #232]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80ad 	beq.w	8003964 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b08      	cmp	r3, #8
 8003814:	d060      	beq.n	80038d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d145      	bne.n	80038aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <HAL_RCC_OscConfig+0x4b4>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd ffa4 	bl	8001770 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd ffa0 	bl	8001770 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e093      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	019b      	lsls	r3, r3, #6
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	3b01      	subs	r3, #1
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	071b      	lsls	r3, r3, #28
 8003876:	491b      	ldr	r1, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x4b4>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd ff75 	bl	8001770 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fd ff71 	bl	8001770 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e064      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x452>
 80038a8:	e05c      	b.n	8003964 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_RCC_OscConfig+0x4b4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd ff5e 	bl	8001770 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd ff5a 	bl	8001770 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e04d      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x480>
 80038d6:	e045      	b.n	8003964 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e040      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40007000 	.word	0x40007000
 80038ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <HAL_RCC_OscConfig+0x538>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d030      	beq.n	8003960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d129      	bne.n	8003960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d122      	bne.n	8003960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003928:	4293      	cmp	r3, r2
 800392a:	d119      	bne.n	8003960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	3b01      	subs	r3, #1
 800393a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d10f      	bne.n	8003960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d107      	bne.n	8003960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e041      	b.n	8003a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fcdc 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fa96 	bl	8003ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d001      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e04e      	b.n	8003aca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d01d      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_TIM_Base_Start_IT+0xc8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_TIM_Base_Start_IT+0xd8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d111      	bne.n	8003ab8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d010      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	e007      	b.n	8003ac8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40010400 	.word	0x40010400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40001800 	.word	0x40001800

08003af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0202 	mvn.w	r2, #2
 8003b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9b5 	bl	8003ea6 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9a7 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f9b8 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0204 	mvn.w	r2, #4
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f98b 	bl	8003ea6 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f97d 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f98e 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0208 	mvn.w	r2, #8
 8003bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f961 	bl	8003ea6 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f953 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f964 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0210 	mvn.w	r2, #16
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2208      	movs	r2, #8
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f937 	bl	8003ea6 <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f929 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f93a 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10e      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d107      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0201 	mvn.w	r2, #1
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd f93a 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d10e      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b80      	cmp	r3, #128	; 0x80
 8003c92:	d107      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fa64 	bl	800416c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d107      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8ff 	bl	8003ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d10e      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d107      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0220 	mvn.w	r2, #32
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa2e 	bl	8004158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_ConfigClockSource+0x1c>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0b4      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x186>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d58:	d03e      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	f200 8087 	bhi.w	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	f000 8086 	beq.w	8003e76 <HAL_TIM_ConfigClockSource+0x172>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	d87f      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b70      	cmp	r3, #112	; 0x70
 8003d72:	d01a      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0xa6>
 8003d74:	2b70      	cmp	r3, #112	; 0x70
 8003d76:	d87b      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b60      	cmp	r3, #96	; 0x60
 8003d7a:	d050      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x11a>
 8003d7c:	2b60      	cmp	r3, #96	; 0x60
 8003d7e:	d877      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b50      	cmp	r3, #80	; 0x50
 8003d82:	d03c      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xfa>
 8003d84:	2b50      	cmp	r3, #80	; 0x50
 8003d86:	d873      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d058      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x13a>
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d86f      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d064      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b30      	cmp	r3, #48	; 0x30
 8003d96:	d86b      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d060      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d867      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d05c      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d05a      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	e062      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6899      	ldr	r1, [r3, #8]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f000 f9ad 	bl	8004118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	609a      	str	r2, [r3, #8]
      break;
 8003dd6:	e04f      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f000 f996 	bl	8004118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e03c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 f90a 	bl	8004024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2150      	movs	r1, #80	; 0x50
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f963 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e02c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 f929 	bl	8004082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2160      	movs	r1, #96	; 0x60
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f953 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e01c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f000 f8ea 	bl	8004024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f943 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003e5c:	e00c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f000 f93a 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003e6e:	e003      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      break;
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a40      	ldr	r2, [pc, #256]	; (8003ff8 <TIM_Base_SetConfig+0x114>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d00f      	beq.n	8003f24 <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3d      	ldr	r2, [pc, #244]	; (8003ffc <TIM_Base_SetConfig+0x118>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3c      	ldr	r2, [pc, #240]	; (8004000 <TIM_Base_SetConfig+0x11c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3b      	ldr	r2, [pc, #236]	; (8004004 <TIM_Base_SetConfig+0x120>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3a      	ldr	r2, [pc, #232]	; (8004008 <TIM_Base_SetConfig+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d108      	bne.n	8003f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2f      	ldr	r2, [pc, #188]	; (8003ff8 <TIM_Base_SetConfig+0x114>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02b      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d027      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <TIM_Base_SetConfig+0x118>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d023      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2b      	ldr	r2, [pc, #172]	; (8004000 <TIM_Base_SetConfig+0x11c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01f      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <TIM_Base_SetConfig+0x120>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01b      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a29      	ldr	r2, [pc, #164]	; (8004008 <TIM_Base_SetConfig+0x124>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d017      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a28      	ldr	r2, [pc, #160]	; (800400c <TIM_Base_SetConfig+0x128>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a27      	ldr	r2, [pc, #156]	; (8004010 <TIM_Base_SetConfig+0x12c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00f      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a26      	ldr	r2, [pc, #152]	; (8004014 <TIM_Base_SetConfig+0x130>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00b      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a25      	ldr	r2, [pc, #148]	; (8004018 <TIM_Base_SetConfig+0x134>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d007      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a24      	ldr	r2, [pc, #144]	; (800401c <TIM_Base_SetConfig+0x138>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <TIM_Base_SetConfig+0x13c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d108      	bne.n	8003fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <TIM_Base_SetConfig+0x114>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0xf8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <TIM_Base_SetConfig+0x124>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d103      	bne.n	8003fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	615a      	str	r2, [r3, #20]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800
 8004004:	40000c00 	.word	0x40000c00
 8004008:	40010400 	.word	0x40010400
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800
 8004018:	40001800 	.word	0x40001800
 800401c:	40001c00 	.word	0x40001c00
 8004020:	40002000 	.word	0x40002000

08004024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0201 	bic.w	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 030a 	bic.w	r3, r3, #10
 8004060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004082:	b480      	push	{r7}
 8004084:	b087      	sub	sp, #28
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0210 	bic.w	r2, r3, #16
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	031b      	lsls	r3, r3, #12
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f043 0307 	orr.w	r3, r3, #7
 8004104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	431a      	orrs	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4313      	orrs	r3, r2
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e03f      	b.n	8004212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd f8fe 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f929 	bl	800441c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b08a      	sub	sp, #40	; 0x28
 800421e:	af02      	add	r7, sp, #8
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b20      	cmp	r3, #32
 8004238:	d17c      	bne.n	8004334 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_UART_Transmit+0x2c>
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e075      	b.n	8004336 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_UART_Transmit+0x3e>
 8004254:	2302      	movs	r3, #2
 8004256:	e06e      	b.n	8004336 <HAL_UART_Transmit+0x11c>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2221      	movs	r2, #33	; 0x21
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800426e:	f7fd fa7f 	bl	8001770 <HAL_GetTick>
 8004272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	88fa      	ldrh	r2, [r7, #6]
 800427e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004288:	d108      	bne.n	800429c <HAL_UART_Transmit+0x82>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	e003      	b.n	80042a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042ac:	e02a      	b.n	8004304 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f840 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e036      	b.n	8004336 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	3302      	adds	r3, #2
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	e007      	b.n	80042f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	3301      	adds	r3, #1
 80042f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1cf      	bne.n	80042ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2140      	movs	r1, #64	; 0x40
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f810 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e006      	b.n	8004336 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e000      	b.n	8004336 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b090      	sub	sp, #64	; 0x40
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434e:	e050      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d04c      	beq.n	80043f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0x30>
 800435e:	f7fd fa07 	bl	8001770 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800436a:	429a      	cmp	r2, r3
 800436c:	d241      	bcs.n	80043f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438e:	637a      	str	r2, [r7, #52]	; 0x34
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	613b      	str	r3, [r7, #16]
   return(result);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c2:	623a      	str	r2, [r7, #32]
 80043c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	69f9      	ldr	r1, [r7, #28]
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e5      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00f      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	429a      	cmp	r2, r3
 800440e:	d09f      	beq.n	8004350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3740      	adds	r7, #64	; 0x40
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004420:	b0c0      	sub	sp, #256	; 0x100
 8004422:	af00      	add	r7, sp, #0
 8004424:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	68d9      	ldr	r1, [r3, #12]
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	ea40 0301 	orr.w	r3, r0, r1
 8004444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	431a      	orrs	r2, r3
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	431a      	orrs	r2, r3
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004474:	f021 010c 	bic.w	r1, r1, #12
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004482:	430b      	orrs	r3, r1
 8004484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	6999      	ldr	r1, [r3, #24]
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	ea40 0301 	orr.w	r3, r0, r1
 80044a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b8f      	ldr	r3, [pc, #572]	; (80046e8 <UART_SetConfig+0x2cc>)
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d005      	beq.n	80044bc <UART_SetConfig+0xa0>
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b8d      	ldr	r3, [pc, #564]	; (80046ec <UART_SetConfig+0x2d0>)
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d104      	bne.n	80044c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044bc:	f7fe fdfe 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 80044c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044c4:	e003      	b.n	80044ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044c6:	f7fe fde5 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 80044ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d8:	f040 810c 	bne.w	80046f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044ee:	4622      	mov	r2, r4
 80044f0:	462b      	mov	r3, r5
 80044f2:	1891      	adds	r1, r2, r2
 80044f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80044f6:	415b      	adcs	r3, r3
 80044f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044fe:	4621      	mov	r1, r4
 8004500:	eb12 0801 	adds.w	r8, r2, r1
 8004504:	4629      	mov	r1, r5
 8004506:	eb43 0901 	adc.w	r9, r3, r1
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800451a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800451e:	4690      	mov	r8, r2
 8004520:	4699      	mov	r9, r3
 8004522:	4623      	mov	r3, r4
 8004524:	eb18 0303 	adds.w	r3, r8, r3
 8004528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800452c:	462b      	mov	r3, r5
 800452e:	eb49 0303 	adc.w	r3, r9, r3
 8004532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004542:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800454a:	460b      	mov	r3, r1
 800454c:	18db      	adds	r3, r3, r3
 800454e:	653b      	str	r3, [r7, #80]	; 0x50
 8004550:	4613      	mov	r3, r2
 8004552:	eb42 0303 	adc.w	r3, r2, r3
 8004556:	657b      	str	r3, [r7, #84]	; 0x54
 8004558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800455c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004560:	f7fc fb42 	bl	8000be8 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <UART_SetConfig+0x2d4>)
 800456a:	fba3 2302 	umull	r2, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	011c      	lsls	r4, r3, #4
 8004572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800457c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004584:	4642      	mov	r2, r8
 8004586:	464b      	mov	r3, r9
 8004588:	1891      	adds	r1, r2, r2
 800458a:	64b9      	str	r1, [r7, #72]	; 0x48
 800458c:	415b      	adcs	r3, r3
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004594:	4641      	mov	r1, r8
 8004596:	eb12 0a01 	adds.w	sl, r2, r1
 800459a:	4649      	mov	r1, r9
 800459c:	eb43 0b01 	adc.w	fp, r3, r1
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045b4:	4692      	mov	sl, r2
 80045b6:	469b      	mov	fp, r3
 80045b8:	4643      	mov	r3, r8
 80045ba:	eb1a 0303 	adds.w	r3, sl, r3
 80045be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045c2:	464b      	mov	r3, r9
 80045c4:	eb4b 0303 	adc.w	r3, fp, r3
 80045c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045e0:	460b      	mov	r3, r1
 80045e2:	18db      	adds	r3, r3, r3
 80045e4:	643b      	str	r3, [r7, #64]	; 0x40
 80045e6:	4613      	mov	r3, r2
 80045e8:	eb42 0303 	adc.w	r3, r2, r3
 80045ec:	647b      	str	r3, [r7, #68]	; 0x44
 80045ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045f6:	f7fc faf7 	bl	8000be8 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <UART_SetConfig+0x2d4>)
 8004602:	fba3 2301 	umull	r2, r3, r3, r1
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2264      	movs	r2, #100	; 0x64
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	1acb      	subs	r3, r1, r3
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004616:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <UART_SetConfig+0x2d4>)
 8004618:	fba3 2302 	umull	r2, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004624:	441c      	add	r4, r3
 8004626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004630:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	1891      	adds	r1, r2, r2
 800463e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004640:	415b      	adcs	r3, r3
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004648:	4641      	mov	r1, r8
 800464a:	1851      	adds	r1, r2, r1
 800464c:	6339      	str	r1, [r7, #48]	; 0x30
 800464e:	4649      	mov	r1, r9
 8004650:	414b      	adcs	r3, r1
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004660:	4659      	mov	r1, fp
 8004662:	00cb      	lsls	r3, r1, #3
 8004664:	4651      	mov	r1, sl
 8004666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466a:	4651      	mov	r1, sl
 800466c:	00ca      	lsls	r2, r1, #3
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	4603      	mov	r3, r0
 8004674:	4642      	mov	r2, r8
 8004676:	189b      	adds	r3, r3, r2
 8004678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800467c:	464b      	mov	r3, r9
 800467e:	460a      	mov	r2, r1
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004694:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800469c:	460b      	mov	r3, r1
 800469e:	18db      	adds	r3, r3, r3
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	4613      	mov	r3, r2
 80046a4:	eb42 0303 	adc.w	r3, r2, r3
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046b2:	f7fc fa99 	bl	8000be8 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <UART_SetConfig+0x2d4>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2164      	movs	r1, #100	; 0x64
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <UART_SetConfig+0x2d4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 0207 	and.w	r2, r3, #7
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4422      	add	r2, r4
 80046e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046e4:	e105      	b.n	80048f2 <UART_SetConfig+0x4d6>
 80046e6:	bf00      	nop
 80046e8:	40011000 	.word	0x40011000
 80046ec:	40011400 	.word	0x40011400
 80046f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004706:	4642      	mov	r2, r8
 8004708:	464b      	mov	r3, r9
 800470a:	1891      	adds	r1, r2, r2
 800470c:	6239      	str	r1, [r7, #32]
 800470e:	415b      	adcs	r3, r3
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004716:	4641      	mov	r1, r8
 8004718:	1854      	adds	r4, r2, r1
 800471a:	4649      	mov	r1, r9
 800471c:	eb43 0501 	adc.w	r5, r3, r1
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	00eb      	lsls	r3, r5, #3
 800472a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800472e:	00e2      	lsls	r2, r4, #3
 8004730:	4614      	mov	r4, r2
 8004732:	461d      	mov	r5, r3
 8004734:	4643      	mov	r3, r8
 8004736:	18e3      	adds	r3, r4, r3
 8004738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800473c:	464b      	mov	r3, r9
 800473e:	eb45 0303 	adc.w	r3, r5, r3
 8004742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004752:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004762:	4629      	mov	r1, r5
 8004764:	008b      	lsls	r3, r1, #2
 8004766:	4621      	mov	r1, r4
 8004768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476c:	4621      	mov	r1, r4
 800476e:	008a      	lsls	r2, r1, #2
 8004770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004774:	f7fc fa38 	bl	8000be8 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4b60      	ldr	r3, [pc, #384]	; (8004900 <UART_SetConfig+0x4e4>)
 800477e:	fba3 2302 	umull	r2, r3, r3, r2
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	011c      	lsls	r4, r3, #4
 8004786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800478a:	2200      	movs	r2, #0
 800478c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	1891      	adds	r1, r2, r2
 800479e:	61b9      	str	r1, [r7, #24]
 80047a0:	415b      	adcs	r3, r3
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a8:	4641      	mov	r1, r8
 80047aa:	1851      	adds	r1, r2, r1
 80047ac:	6139      	str	r1, [r7, #16]
 80047ae:	4649      	mov	r1, r9
 80047b0:	414b      	adcs	r3, r1
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047c0:	4659      	mov	r1, fp
 80047c2:	00cb      	lsls	r3, r1, #3
 80047c4:	4651      	mov	r1, sl
 80047c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ca:	4651      	mov	r1, sl
 80047cc:	00ca      	lsls	r2, r1, #3
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	4642      	mov	r2, r8
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047dc:	464b      	mov	r3, r9
 80047de:	460a      	mov	r2, r1
 80047e0:	eb42 0303 	adc.w	r3, r2, r3
 80047e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004800:	4649      	mov	r1, r9
 8004802:	008b      	lsls	r3, r1, #2
 8004804:	4641      	mov	r1, r8
 8004806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800480a:	4641      	mov	r1, r8
 800480c:	008a      	lsls	r2, r1, #2
 800480e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004812:	f7fc f9e9 	bl	8000be8 <__aeabi_uldivmod>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4b39      	ldr	r3, [pc, #228]	; (8004900 <UART_SetConfig+0x4e4>)
 800481c:	fba3 1302 	umull	r1, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	2164      	movs	r1, #100	; 0x64
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	3332      	adds	r3, #50	; 0x32
 800482e:	4a34      	ldr	r2, [pc, #208]	; (8004900 <UART_SetConfig+0x4e4>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800483a:	441c      	add	r4, r3
 800483c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004840:	2200      	movs	r2, #0
 8004842:	673b      	str	r3, [r7, #112]	; 0x70
 8004844:	677a      	str	r2, [r7, #116]	; 0x74
 8004846:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800484a:	4642      	mov	r2, r8
 800484c:	464b      	mov	r3, r9
 800484e:	1891      	adds	r1, r2, r2
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	415b      	adcs	r3, r3
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800485a:	4641      	mov	r1, r8
 800485c:	1851      	adds	r1, r2, r1
 800485e:	6039      	str	r1, [r7, #0]
 8004860:	4649      	mov	r1, r9
 8004862:	414b      	adcs	r3, r1
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004872:	4659      	mov	r1, fp
 8004874:	00cb      	lsls	r3, r1, #3
 8004876:	4651      	mov	r1, sl
 8004878:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800487c:	4651      	mov	r1, sl
 800487e:	00ca      	lsls	r2, r1, #3
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	4603      	mov	r3, r0
 8004886:	4642      	mov	r2, r8
 8004888:	189b      	adds	r3, r3, r2
 800488a:	66bb      	str	r3, [r7, #104]	; 0x68
 800488c:	464b      	mov	r3, r9
 800488e:	460a      	mov	r2, r1
 8004890:	eb42 0303 	adc.w	r3, r2, r3
 8004894:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	663b      	str	r3, [r7, #96]	; 0x60
 80048a0:	667a      	str	r2, [r7, #100]	; 0x64
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048ae:	4649      	mov	r1, r9
 80048b0:	008b      	lsls	r3, r1, #2
 80048b2:	4641      	mov	r1, r8
 80048b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b8:	4641      	mov	r1, r8
 80048ba:	008a      	lsls	r2, r1, #2
 80048bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048c0:	f7fc f992 	bl	8000be8 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <UART_SetConfig+0x4e4>)
 80048ca:	fba3 1302 	umull	r1, r3, r3, r2
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2164      	movs	r1, #100	; 0x64
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	3332      	adds	r3, #50	; 0x32
 80048dc:	4a08      	ldr	r2, [pc, #32]	; (8004900 <UART_SetConfig+0x4e4>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	f003 020f 	and.w	r2, r3, #15
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4422      	add	r2, r4
 80048f0:	609a      	str	r2, [r3, #8]
}
 80048f2:	bf00      	nop
 80048f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048f8:	46bd      	mov	sp, r7
 80048fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fe:	bf00      	nop
 8004900:	51eb851f 	.word	0x51eb851f

08004904 <mpu6050Init>:
	.fifoRW			 = 0x74,
	.whoAmI			 = 0x75
};

Status mpu6050Init(I2C_HandleTypeDef *hi2c, Mpu6050DeviceData *mpu6050Device)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	mpu6050Device->i2cHandler		= hi2c;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
	mpu6050Device->address			= 0x68 << 1;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	22d0      	movs	r2, #208	; 0xd0
 8004918:	711a      	strb	r2, [r3, #4]
	mpu6050Device->whoAmI			= 0x68;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2268      	movs	r2, #104	; 0x68
 800491e:	715a      	strb	r2, [r3, #5]
	mpu6050Device->sampleRate		= 0x0000;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2200      	movs	r2, #0
 8004924:	819a      	strh	r2, [r3, #12]
	mpu6050Device->accelSensitivity	= 0x00;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2200      	movs	r2, #0
 800492a:	839a      	strh	r2, [r3, #28]

	for (uint8_t cont = 0; cont < 3; cont++)
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e014      	b.n	800495c <mpu6050Init+0x58>
	{
		mpu6050Device->accelTest[cont] = 0x00;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4413      	add	r3, r2
 8004938:	2200      	movs	r2, #0
 800493a:	719a      	strb	r2, [r3, #6]
		mpu6050Device->gyroTest[cont] = 0x00;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4413      	add	r3, r2
 8004942:	2200      	movs	r2, #0
 8004944:	725a      	strb	r2, [r3, #9]
		mpu6050Device->accel[cont] = 0x00;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	3304      	adds	r3, #4
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	for (uint8_t cont = 0; cont < 3; cont++)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	3301      	adds	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d9e7      	bls.n	8004932 <mpu6050Init+0x2e>
	}

	if (mpu6050CheckCommunication(mpu6050Device) == NOK)
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	f000 f847 	bl	80049f6 <mpu6050CheckCommunication>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <mpu6050Init+0x6e>
	{
		return NOK;
 800496e:	2300      	movs	r3, #0
 8004970:	e03d      	b.n	80049ee <mpu6050Init+0xea>
	}

	if (mpu6050WhoAmI(mpu6050Device) != mpu6050Device->whoAmI)
 8004972:	6838      	ldr	r0, [r7, #0]
 8004974:	f000 f85a 	bl	8004a2c <mpu6050WhoAmI>
 8004978:	4603      	mov	r3, r0
 800497a:	461a      	mov	r2, r3
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	795b      	ldrb	r3, [r3, #5]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <mpu6050Init+0x84>
	{
		return NOK;
 8004984:	2300      	movs	r3, #0
 8004986:	e032      	b.n	80049ee <mpu6050Init+0xea>
	}

	if (mpu6050SetPwrMode(mpu6050Device, NORMAL) == NOK)
 8004988:	2100      	movs	r1, #0
 800498a:	6838      	ldr	r0, [r7, #0]
 800498c:	f000 f935 	bl	8004bfa <mpu6050SetPwrMode>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <mpu6050Init+0x96>
	{
		return NOK;
 8004996:	2300      	movs	r3, #0
 8004998:	e029      	b.n	80049ee <mpu6050Init+0xea>
	}

	if (mpu6050SetConfig(mpu6050Device, DISABLED, DLPF_ACCEL_1KHZ_184HZ_GYRO_1KHZ_188HZ) == NOK)
 800499a:	2201      	movs	r2, #1
 800499c:	2100      	movs	r1, #0
 800499e:	6838      	ldr	r0, [r7, #0]
 80049a0:	f000 f8de 	bl	8004b60 <mpu6050SetConfig>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <mpu6050Init+0xaa>
	{
		return NOK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e01f      	b.n	80049ee <mpu6050Init+0xea>
	}

	if (mpu6050SetSampleRate(mpu6050Device, 1000) == NOK)
 80049ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80049b2:	6838      	ldr	r0, [r7, #0]
 80049b4:	f000 f99f 	bl	8004cf6 <mpu6050SetSampleRate>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <mpu6050Init+0xbe>
	{
		return NOK;
 80049be:	2300      	movs	r3, #0
 80049c0:	e015      	b.n	80049ee <mpu6050Init+0xea>
	}

	if (mpu6050SetGyroFullScaleConfig(mpu6050Device, PLUS_MINUS_500_DEGREE_PER_SECOND) == NOK)
 80049c2:	2101      	movs	r1, #1
 80049c4:	6838      	ldr	r0, [r7, #0]
 80049c6:	f000 fa10 	bl	8004dea <mpu6050SetGyroFullScaleConfig>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <mpu6050Init+0xd0>
	{
		return NOK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e00c      	b.n	80049ee <mpu6050Init+0xea>
	}

	if (mpu6050SetAccelFullScaleConfig(mpu6050Device, PLUS_MINUS_2_G) == NOK)
 80049d4:	2100      	movs	r1, #0
 80049d6:	6838      	ldr	r0, [r7, #0]
 80049d8:	f000 fa55 	bl	8004e86 <mpu6050SetAccelFullScaleConfig>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <mpu6050Init+0xe2>
	{
		return NOK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e003      	b.n	80049ee <mpu6050Init+0xea>
	}

	mpu6050GetAccelAndGyroSelfTestParams(mpu6050Device);
 80049e6:	6838      	ldr	r0, [r7, #0]
 80049e8:	f000 f83c 	bl	8004a64 <mpu6050GetAccelAndGyroSelfTestParams>

	return OK;
 80049ec:	2301      	movs	r3, #1
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <mpu6050CheckCommunication>:

Status mpu6050CheckCommunication(Mpu6050DeviceData *mpu6050Device)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
	Status communicationStatus = NOK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
	uint32_t communicationTrials = 5;
 8004a02:	2305      	movs	r3, #5
 8004a04:	60bb      	str	r3, [r7, #8]
	if (HAL_I2C_IsDeviceReady(mpu6050Device->i2cHandler, mpu6050Device->address, communicationTrials, timeoutI2C) == HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	791b      	ldrb	r3, [r3, #4]
 8004a0e:	b299      	uxth	r1, r3
 8004a10:	2364      	movs	r3, #100	; 0x64
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	f7fd fdc2 	bl	800259c <HAL_I2C_IsDeviceReady>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <mpu6050CheckCommunication+0x2c>
	{
		communicationStatus = OK;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
	}
	return communicationStatus;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <mpu6050WhoAmI>:

uint8_t mpu6050WhoAmI(Mpu6050DeviceData *mpu6050Device)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af04      	add	r7, sp, #16
 8004a32:	6078      	str	r0, [r7, #4]
	uint8_t id = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.whoAmI, sizeof(mpu6050Reg.whoAmI), &id, sizeof(id), timeoutI2C);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	791b      	ldrb	r3, [r3, #4]
 8004a40:	b299      	uxth	r1, r3
 8004a42:	2375      	movs	r3, #117	; 0x75
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	2364      	movs	r3, #100	; 0x64
 8004a48:	9302      	str	r3, [sp, #8]
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	f107 030f 	add.w	r3, r7, #15
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2301      	movs	r3, #1
 8004a56:	f7fd fb7b 	bl	8002150 <HAL_I2C_Mem_Read>
	return id;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <mpu6050GetAccelAndGyroSelfTestParams>:

void mpu6050GetAccelAndGyroSelfTestParams(Mpu6050DeviceData *mpu6050Device)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af04      	add	r7, sp, #16
 8004a6a:	6078      	str	r0, [r7, #4]
	uint8_t qtyBytes = 4;
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	73fb      	strb	r3, [r7, #15]
	uint8_t selfTestBytes[4] = {0, 0, 0, 0};
 8004a70:	2300      	movs	r3, #0
 8004a72:	60bb      	str	r3, [r7, #8]

	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.selfTestXYZ, sizeof(mpu6050Reg.selfTestXYZ), selfTestBytes, qtyBytes, timeoutI2C);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	791b      	ldrb	r3, [r3, #4]
 8004a7c:	b299      	uxth	r1, r3
 8004a7e:	230d      	movs	r3, #13
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2464      	movs	r4, #100	; 0x64
 8004a88:	9402      	str	r4, [sp, #8]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2301      	movs	r3, #1
 8004a94:	f7fd fb5c 	bl	8002150 <HAL_I2C_Mem_Read>

	mpu6050Device->gyroTest[X_AXIS] = selfTestBytes[X_AXIS] & 0x1F;
 8004a98:	7a3b      	ldrb	r3, [r7, #8]
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	725a      	strb	r2, [r3, #9]
	mpu6050Device->gyroTest[Y_AXIS] = selfTestBytes[Y_AXIS] & 0x1F;
 8004aa4:	7a7b      	ldrb	r3, [r7, #9]
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	729a      	strb	r2, [r3, #10]
	mpu6050Device->gyroTest[Z_AXIS] = selfTestBytes[Z_AXIS] & 0x1F;
 8004ab0:	7abb      	ldrb	r3, [r7, #10]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	72da      	strb	r2, [r3, #11]

	mpu6050Device->accelTest[X_AXIS] = ((selfTestBytes[X_AXIS] & 0xE0) >> 3) | ((selfTestBytes[XYZ_AXIS] & 0x30) >> 4);
 8004abc:	7a3b      	ldrb	r3, [r7, #8]
 8004abe:	10db      	asrs	r3, r3, #3
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	f003 031c 	and.w	r3, r3, #28
 8004ac6:	b25a      	sxtb	r2, r3
 8004ac8:	7afb      	ldrb	r3, [r7, #11]
 8004aca:	111b      	asrs	r3, r3, #4
 8004acc:	b25b      	sxtb	r3, r3
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	719a      	strb	r2, [r3, #6]
	mpu6050Device->accelTest[Y_AXIS] = ((selfTestBytes[Y_AXIS] & 0xE0) >> 3) | ((selfTestBytes[XYZ_AXIS] & 0x0C) >> 2);
 8004ade:	7a7b      	ldrb	r3, [r7, #9]
 8004ae0:	10db      	asrs	r3, r3, #3
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	f003 031c 	and.w	r3, r3, #28
 8004ae8:	b25a      	sxtb	r2, r3
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	109b      	asrs	r3, r3, #2
 8004aee:	b25b      	sxtb	r3, r3
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b25b      	sxtb	r3, r3
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	71da      	strb	r2, [r3, #7]
	mpu6050Device->accelTest[Z_AXIS] = ((selfTestBytes[Z_AXIS] & 0xE0) >> 3) | (selfTestBytes[XYZ_AXIS] & 0x03);
 8004b00:	7abb      	ldrb	r3, [r7, #10]
 8004b02:	10db      	asrs	r3, r3, #3
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	f003 031c 	and.w	r3, r3, #28
 8004b0a:	b25a      	sxtb	r2, r3
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
 8004b0e:	b25b      	sxtb	r3, r3
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	721a      	strb	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd90      	pop	{r4, r7, pc}

08004b28 <mpu6050GetConfig>:

uint8_t mpu6050GetConfig(Mpu6050DeviceData *mpu6050Device)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af04      	add	r7, sp, #16
 8004b2e:	6078      	str	r0, [r7, #4]
	uint8_t config = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.config, sizeof(mpu6050Reg.config), &config, sizeof(config), timeoutI2C);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	791b      	ldrb	r3, [r3, #4]
 8004b3c:	b299      	uxth	r1, r3
 8004b3e:	231a      	movs	r3, #26
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	2364      	movs	r3, #100	; 0x64
 8004b44:	9302      	str	r3, [sp, #8]
 8004b46:	2301      	movs	r3, #1
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	f107 030f 	add.w	r3, r7, #15
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2301      	movs	r3, #1
 8004b52:	f7fd fafd 	bl	8002150 <HAL_I2C_Mem_Read>
	return config;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <mpu6050SetConfig>:

Status mpu6050SetConfig(Mpu6050DeviceData *mpu6050Device, ExternalSyncSet externalSyncSet, DigitalLowPassFilter digitalLowPassFilter)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af04      	add	r7, sp, #16
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	70bb      	strb	r3, [r7, #2]
	uint8_t config = (externalSyncSet << 3) | digitalLowPassFilter;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	b25a      	sxtb	r2, r3
 8004b76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.config, sizeof(mpu6050Reg.config), &config, sizeof(config), timeoutI2C);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	791b      	ldrb	r3, [r3, #4]
 8004b8a:	b299      	uxth	r1, r3
 8004b8c:	231a      	movs	r3, #26
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	2364      	movs	r3, #100	; 0x64
 8004b92:	9302      	str	r3, [sp, #8]
 8004b94:	2301      	movs	r3, #1
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	f107 030f 	add.w	r3, r7, #15
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f7fd f9dc 	bl	8001f5c <HAL_I2C_Mem_Write>

	if (mpu6050GetConfig(mpu6050Device) != config)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ffbf 	bl	8004b28 <mpu6050GetConfig>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <mpu6050SetConfig+0x58>
	{
		return NOK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e000      	b.n	8004bba <mpu6050SetConfig+0x5a>
	}

	return OK;
 8004bb8:	2301      	movs	r3, #1
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <mpu6050GetPwrMode>:

uint8_t mpu6050GetPwrMode(Mpu6050DeviceData *mpu6050Device)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b088      	sub	sp, #32
 8004bc6:	af04      	add	r7, sp, #16
 8004bc8:	6078      	str	r0, [r7, #4]
	uint8_t pwrMode = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.pwrMgmt1, sizeof(mpu6050Reg.pwrMgmt1), &pwrMode, sizeof(pwrMode), timeoutI2C);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	791b      	ldrb	r3, [r3, #4]
 8004bd6:	b299      	uxth	r1, r3
 8004bd8:	236b      	movs	r3, #107	; 0x6b
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	2364      	movs	r3, #100	; 0x64
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	2301      	movs	r3, #1
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	f107 030f 	add.w	r3, r7, #15
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2301      	movs	r3, #1
 8004bec:	f7fd fab0 	bl	8002150 <HAL_I2C_Mem_Read>
	return pwrMode;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <mpu6050SetPwrMode>:

Status mpu6050SetPwrMode(Mpu6050DeviceData *mpu6050Device, PowerMode powerMode)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b088      	sub	sp, #32
 8004bfe:	af04      	add	r7, sp, #16
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
	uint8_t pwrMode = 0xFF;
 8004c06:	23ff      	movs	r3, #255	; 0xff
 8004c08:	73fb      	strb	r3, [r7, #15]

	if (powerMode == NORMAL)
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d108      	bne.n	8004c22 <mpu6050SetPwrMode+0x28>
	{
		pwrMode = mpu6050GetPwrMode(mpu6050Device) & 0xBF;
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ffd6 	bl	8004bc2 <mpu6050GetPwrMode>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e00a      	b.n	8004c38 <mpu6050SetPwrMode+0x3e>
	}
	else if (powerMode == SLEEP)
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d107      	bne.n	8004c38 <mpu6050SetPwrMode+0x3e>
	{
		pwrMode = mpu6050GetPwrMode(mpu6050Device) | 0x40;
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffca 	bl	8004bc2 <mpu6050GetPwrMode>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	73fb      	strb	r3, [r7, #15]
	}

	HAL_I2C_Mem_Write(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.pwrMgmt1, sizeof(mpu6050Reg.pwrMgmt1), &pwrMode, sizeof(pwrMode), timeoutI2C);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	791b      	ldrb	r3, [r3, #4]
 8004c40:	b299      	uxth	r1, r3
 8004c42:	236b      	movs	r3, #107	; 0x6b
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	2364      	movs	r3, #100	; 0x64
 8004c48:	9302      	str	r3, [sp, #8]
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	f107 030f 	add.w	r3, r7, #15
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2301      	movs	r3, #1
 8004c56:	f7fd f981 	bl	8001f5c <HAL_I2C_Mem_Write>

	if (mpu6050GetPwrMode(mpu6050Device) != pwrMode)
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ffb1 	bl	8004bc2 <mpu6050GetPwrMode>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <mpu6050SetPwrMode+0x74>
	{
		return NOK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e000      	b.n	8004c70 <mpu6050SetPwrMode+0x76>
	}

	return OK;
 8004c6e:	2301      	movs	r3, #1
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <mpu6050GetSampleRate>:

uint16_t mpu6050GetSampleRate(Mpu6050DeviceData *mpu6050Device)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	6078      	str	r0, [r7, #4]
	uint16_t sampleRate = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	81fb      	strh	r3, [r7, #14]
	uint8_t smplrtDiv = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	72fb      	strb	r3, [r7, #11]
	uint8_t config = mpu6050GetConfig(mpu6050Device);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff4d 	bl	8004b28 <mpu6050GetConfig>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	737b      	strb	r3, [r7, #13]
	uint8_t dlpfCfg = config & 0x07;
 8004c92:	7b7b      	ldrb	r3, [r7, #13]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.smplrtDiv, sizeof(mpu6050Reg.smplrtDiv), &smplrtDiv, sizeof(smplrtDiv), timeoutI2C);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	791b      	ldrb	r3, [r3, #4]
 8004ca2:	b299      	uxth	r1, r3
 8004ca4:	2319      	movs	r3, #25
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	2364      	movs	r3, #100	; 0x64
 8004caa:	9302      	str	r3, [sp, #8]
 8004cac:	2301      	movs	r3, #1
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	f107 030b 	add.w	r3, r7, #11
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f7fd fa4a 	bl	8002150 <HAL_I2C_Mem_Read>

	if ((dlpfCfg == DLPF_ACCEL_1KHZ_260HZ_GYRO_8KHZ_256HZ) || (dlpfCfg == DLPF_ACCEL_1KHZ_RES_GYRO_8KHZ_RES))
 8004cbc:	7b3b      	ldrb	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <mpu6050GetSampleRate+0x50>
 8004cc2:	7b3b      	ldrb	r3, [r7, #12]
 8004cc4:	2b07      	cmp	r3, #7
 8004cc6:	d107      	bne.n	8004cd8 <mpu6050GetSampleRate+0x60>
	{
		sampleRate = 8000 / (1 + smplrtDiv);
 8004cc8:	7afb      	ldrb	r3, [r7, #11]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004cd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004cd4:	81fb      	strh	r3, [r7, #14]
 8004cd6:	e006      	b.n	8004ce6 <mpu6050GetSampleRate+0x6e>
	}
	else
	{
		sampleRate = 1000 / (1 + smplrtDiv);
 8004cd8:	7afb      	ldrb	r3, [r7, #11]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ce4:	81fb      	strh	r3, [r7, #14]
	}

	mpu6050Device->sampleRate = sampleRate;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	89fa      	ldrh	r2, [r7, #14]
 8004cea:	819a      	strh	r2, [r3, #12]

	return sampleRate;
 8004cec:	89fb      	ldrh	r3, [r7, #14]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <mpu6050SetSampleRate>:

Status mpu6050SetSampleRate(Mpu6050DeviceData *mpu6050Device, uint16_t sampleRate)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b088      	sub	sp, #32
 8004cfa:	af04      	add	r7, sp, #16
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	807b      	strh	r3, [r7, #2]
	uint8_t config = mpu6050GetConfig(mpu6050Device);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff10 	bl	8004b28 <mpu6050GetConfig>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
	uint8_t dlpfCfg = config & 0x07;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	73bb      	strb	r3, [r7, #14]
	uint8_t smplrtDiv = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	737b      	strb	r3, [r7, #13]

	if (sampleRate > 8000)
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004d1e:	d901      	bls.n	8004d24 <mpu6050SetSampleRate+0x2e>
	{
		return NOK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e03a      	b.n	8004d9a <mpu6050SetSampleRate+0xa4>
	}

	if ((dlpfCfg != DLPF_ACCEL_1KHZ_260HZ_GYRO_8KHZ_256HZ) || (dlpfCfg != DLPF_ACCEL_1KHZ_RES_GYRO_8KHZ_RES))
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <mpu6050SetSampleRate+0x3a>
 8004d2a:	7bbb      	ldrb	r3, [r7, #14]
 8004d2c:	2b07      	cmp	r3, #7
 8004d2e:	d00f      	beq.n	8004d50 <mpu6050SetSampleRate+0x5a>
	{
		if (sampleRate > 1000)
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d36:	d901      	bls.n	8004d3c <mpu6050SetSampleRate+0x46>
		{
			return NOK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e02e      	b.n	8004d9a <mpu6050SetSampleRate+0xa4>
		}

		smplrtDiv = (1000 / sampleRate) - 1;
 8004d3c:	887b      	ldrh	r3, [r7, #2]
 8004d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	737b      	strb	r3, [r7, #13]
 8004d4e:	e008      	b.n	8004d62 <mpu6050SetSampleRate+0x6c>
	}
	else
	{
		smplrtDiv = (8000 / sampleRate) - 1;
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004d56:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	737b      	strb	r3, [r7, #13]
	}

	HAL_I2C_Mem_Write(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.smplrtDiv, sizeof(mpu6050Reg.smplrtDiv), &smplrtDiv, sizeof(smplrtDiv), timeoutI2C);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	791b      	ldrb	r3, [r3, #4]
 8004d6a:	b299      	uxth	r1, r3
 8004d6c:	2319      	movs	r3, #25
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	2364      	movs	r3, #100	; 0x64
 8004d72:	9302      	str	r3, [sp, #8]
 8004d74:	2301      	movs	r3, #1
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	f107 030d 	add.w	r3, r7, #13
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f7fd f8ec 	bl	8001f5c <HAL_I2C_Mem_Write>

	if (mpu6050GetSampleRate(mpu6050Device) != sampleRate)
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff77 	bl	8004c78 <mpu6050GetSampleRate>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d001      	beq.n	8004d98 <mpu6050SetSampleRate+0xa2>
	{
		return NOK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <mpu6050SetSampleRate+0xa4>
	}

	return OK;
 8004d98:	2301      	movs	r3, #1
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <mpu6050GetGyroFullScaleConfig>:

uint8_t mpu6050GetGyroFullScaleConfig(Mpu6050DeviceData *mpu6050Device)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b088      	sub	sp, #32
 8004da6:	af04      	add	r7, sp, #16
 8004da8:	6078      	str	r0, [r7, #4]
	uint8_t fullScaleConfig = 0xAA;
 8004daa:	23aa      	movs	r3, #170	; 0xaa
 8004dac:	73fb      	strb	r3, [r7, #15]
	uint8_t fs_sel = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.gyroConfig, sizeof(mpu6050Reg.gyroConfig), &fs_sel, sizeof(fs_sel), timeoutI2C);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	791b      	ldrb	r3, [r3, #4]
 8004dba:	b299      	uxth	r1, r3
 8004dbc:	231b      	movs	r3, #27
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	2364      	movs	r3, #100	; 0x64
 8004dc2:	9302      	str	r3, [sp, #8]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	f107 030e 	add.w	r3, r7, #14
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f7fd f9be 	bl	8002150 <HAL_I2C_Mem_Read>

	fullScaleConfig = (fs_sel & 0x18) >> 3;
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	10db      	asrs	r3, r3, #3
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	73fb      	strb	r3, [r7, #15]

	return fullScaleConfig;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <mpu6050SetGyroFullScaleConfig>:

Status mpu6050SetGyroFullScaleConfig(Mpu6050DeviceData *mpu6050Device, GyroFullScaleRange gyroFullScaleRange)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af04      	add	r7, sp, #16
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
	uint8_t fs_sel = gyroFullScaleRange << 3;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.gyroConfig, sizeof(mpu6050Reg.gyroConfig), &fs_sel, sizeof(fs_sel), timeoutI2C);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	791b      	ldrb	r3, [r3, #4]
 8004e06:	b299      	uxth	r1, r3
 8004e08:	231b      	movs	r3, #27
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	2364      	movs	r3, #100	; 0x64
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	2301      	movs	r3, #1
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	f107 030f 	add.w	r3, r7, #15
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f7fd f89e 	bl	8001f5c <HAL_I2C_Mem_Write>

	if (mpu6050GetGyroFullScaleConfig(mpu6050Device) != gyroFullScaleRange)
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ffbe 	bl	8004da2 <mpu6050GetGyroFullScaleConfig>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d001      	beq.n	8004e34 <mpu6050SetGyroFullScaleConfig+0x4a>
	{
		return NOK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <mpu6050SetGyroFullScaleConfig+0x4c>
	}

	return OK;
 8004e34:	2301      	movs	r3, #1
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <mpu6050GetAccelFullScaleConfig>:

uint8_t mpu6050GetAccelFullScaleConfig(Mpu6050DeviceData *mpu6050Device)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b088      	sub	sp, #32
 8004e42:	af04      	add	r7, sp, #16
 8004e44:	6078      	str	r0, [r7, #4]
	uint8_t fullScaleConfig = 0xAA;
 8004e46:	23aa      	movs	r3, #170	; 0xaa
 8004e48:	73fb      	strb	r3, [r7, #15]
	uint8_t afs_sel = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.accelConfig, sizeof(mpu6050Reg.accelConfig), &afs_sel, sizeof(afs_sel), timeoutI2C);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	b299      	uxth	r1, r3
 8004e58:	231c      	movs	r3, #28
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	2364      	movs	r3, #100	; 0x64
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	2301      	movs	r3, #1
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f107 030e 	add.w	r3, r7, #14
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f7fd f970 	bl	8002150 <HAL_I2C_Mem_Read>

	fullScaleConfig = (afs_sel & 0x18) >> 3;
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	10db      	asrs	r3, r3, #3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	73fb      	strb	r3, [r7, #15]

	return fullScaleConfig;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <mpu6050SetAccelFullScaleConfig>:

Status mpu6050SetAccelFullScaleConfig(Mpu6050DeviceData *mpu6050Device, AccelFullScaleRange accelFullScaleRange)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af04      	add	r7, sp, #16
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	70fb      	strb	r3, [r7, #3]
	uint8_t afs_sel = accelFullScaleRange << 3;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.accelConfig, sizeof(mpu6050Reg.accelConfig), &afs_sel, sizeof(afs_sel), timeoutI2C);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	791b      	ldrb	r3, [r3, #4]
 8004ea2:	b299      	uxth	r1, r3
 8004ea4:	231c      	movs	r3, #28
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	2364      	movs	r3, #100	; 0x64
 8004eaa:	9302      	str	r3, [sp, #8]
 8004eac:	2301      	movs	r3, #1
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	f107 030f 	add.w	r3, r7, #15
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f7fd f850 	bl	8001f5c <HAL_I2C_Mem_Write>

	if (mpu6050GetAccelFullScaleConfig(mpu6050Device) != accelFullScaleRange)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ffbe 	bl	8004e3e <mpu6050GetAccelFullScaleConfig>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d001      	beq.n	8004ed0 <mpu6050SetAccelFullScaleConfig+0x4a>
	{
		return NOK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e005      	b.n	8004edc <mpu6050SetAccelFullScaleConfig+0x56>
	}

	mpu6050SetAccelSensivity(mpu6050Device, accelFullScaleRange);
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f805 	bl	8004ee4 <mpu6050SetAccelSensivity>
	return OK;
 8004eda:	2301      	movs	r3, #1
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <mpu6050SetAccelSensivity>:

void mpu6050SetAccelSensivity(Mpu6050DeviceData *mpu6050Device, AccelFullScaleRange accelFullScaleRange)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
	switch (accelFullScaleRange)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d81e      	bhi.n	8004f34 <mpu6050SetAccelSensivity+0x50>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <mpu6050SetAccelSensivity+0x18>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f17 	.word	0x08004f17
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f2b 	.word	0x08004f2b
	{
		case PLUS_MINUS_2_G:
			mpu6050Device->accelSensitivity = 16384;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f12:	839a      	strh	r2, [r3, #28]
			break;
 8004f14:	e00f      	b.n	8004f36 <mpu6050SetAccelSensivity+0x52>

		case PLUS_MINUS_4_G:
			mpu6050Device->accelSensitivity = 8192;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f1c:	839a      	strh	r2, [r3, #28]
			break;
 8004f1e:	e00a      	b.n	8004f36 <mpu6050SetAccelSensivity+0x52>

		case PLUS_MINUS_8_G:
			mpu6050Device->accelSensitivity = 4096;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f26:	839a      	strh	r2, [r3, #28]
			break;
 8004f28:	e005      	b.n	8004f36 <mpu6050SetAccelSensivity+0x52>

		case PLUS_MINUS_16_G:
			mpu6050Device->accelSensitivity = 2048;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f30:	839a      	strh	r2, [r3, #28]
			break;
 8004f32:	e000      	b.n	8004f36 <mpu6050SetAccelSensivity+0x52>

		default:
			break;
 8004f34:	bf00      	nop
	}
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <mpu6050GetAccel>:

void mpu6050GetAccel(Mpu6050DeviceData *mpu6050Device)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b08b      	sub	sp, #44	; 0x2c
 8004f48:	af04      	add	r7, sp, #16
 8004f4a:	6078      	str	r0, [r7, #4]
	uint8_t qtyBytes = 6;
 8004f4c:	2306      	movs	r3, #6
 8004f4e:	75fb      	strb	r3, [r7, #23]
	uint8_t accelBytesXYZ[6] = {0, 0, 0, 0, 0, 0};
 8004f50:	4a34      	ldr	r2, [pc, #208]	; (8005024 <mpu6050GetAccel+0xe0>)
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f5a:	6018      	str	r0, [r3, #0]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	8019      	strh	r1, [r3, #0]

	HAL_I2C_Mem_Read(mpu6050Device->i2cHandler, mpu6050Device->address, mpu6050Reg.accelOutXYZ, sizeof(mpu6050Reg.accelOutXYZ), accelBytesXYZ, qtyBytes, timeoutI2C);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	791b      	ldrb	r3, [r3, #4]
 8004f68:	b299      	uxth	r1, r3
 8004f6a:	233b      	movs	r3, #59	; 0x3b
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2464      	movs	r4, #100	; 0x64
 8004f74:	9402      	str	r4, [sp, #8]
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f7fd f8e6 	bl	8002150 <HAL_I2C_Mem_Read>

	int16_t accel_x_axis = ((accelBytesXYZ[0] << 8) | accelBytesXYZ[1]);
 8004f84:	7a3b      	ldrb	r3, [r7, #8]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	b21a      	sxth	r2, r3
 8004f8a:	7a7b      	ldrb	r3, [r7, #9]
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	82bb      	strh	r3, [r7, #20]
	int16_t accel_y_axis = ((accelBytesXYZ[2] << 8) | accelBytesXYZ[3]);
 8004f92:	7abb      	ldrb	r3, [r7, #10]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	b21a      	sxth	r2, r3
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	b21b      	sxth	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	827b      	strh	r3, [r7, #18]
	int16_t accel_z_axis = ((accelBytesXYZ[4] << 8) | accelBytesXYZ[5]);
 8004fa0:	7b3b      	ldrb	r3, [r7, #12]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	b21a      	sxth	r2, r3
 8004fa6:	7b7b      	ldrb	r3, [r7, #13]
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	823b      	strh	r3, [r7, #16]

	mpu6050Device->accel[X_AXIS] = accel_x_axis / ((float) mpu6050Device->accelSensitivity);
 8004fae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu6050Device->accel[Y_AXIS] = accel_y_axis / ((float) mpu6050Device->accelSensitivity);
 8004fd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu6050Device->accel[Z_AXIS] = accel_z_axis / ((float) mpu6050Device->accelSensitivity);
 8004ff6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005008:	ee07 3a90 	vmov	s15, r3
 800500c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd90      	pop	{r4, r7, pc}
 8005022:	bf00      	nop
 8005024:	08007ea0 	.word	0x08007ea0

08005028 <__errno>:
 8005028:	4b01      	ldr	r3, [pc, #4]	; (8005030 <__errno+0x8>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	2000000c 	.word	0x2000000c

08005034 <__libc_init_array>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4d0d      	ldr	r5, [pc, #52]	; (800506c <__libc_init_array+0x38>)
 8005038:	4c0d      	ldr	r4, [pc, #52]	; (8005070 <__libc_init_array+0x3c>)
 800503a:	1b64      	subs	r4, r4, r5
 800503c:	10a4      	asrs	r4, r4, #2
 800503e:	2600      	movs	r6, #0
 8005040:	42a6      	cmp	r6, r4
 8005042:	d109      	bne.n	8005058 <__libc_init_array+0x24>
 8005044:	4d0b      	ldr	r5, [pc, #44]	; (8005074 <__libc_init_array+0x40>)
 8005046:	4c0c      	ldr	r4, [pc, #48]	; (8005078 <__libc_init_array+0x44>)
 8005048:	f002 ff02 	bl	8007e50 <_init>
 800504c:	1b64      	subs	r4, r4, r5
 800504e:	10a4      	asrs	r4, r4, #2
 8005050:	2600      	movs	r6, #0
 8005052:	42a6      	cmp	r6, r4
 8005054:	d105      	bne.n	8005062 <__libc_init_array+0x2e>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	f855 3b04 	ldr.w	r3, [r5], #4
 800505c:	4798      	blx	r3
 800505e:	3601      	adds	r6, #1
 8005060:	e7ee      	b.n	8005040 <__libc_init_array+0xc>
 8005062:	f855 3b04 	ldr.w	r3, [r5], #4
 8005066:	4798      	blx	r3
 8005068:	3601      	adds	r6, #1
 800506a:	e7f2      	b.n	8005052 <__libc_init_array+0x1e>
 800506c:	080082a4 	.word	0x080082a4
 8005070:	080082a4 	.word	0x080082a4
 8005074:	080082a4 	.word	0x080082a4
 8005078:	080082a8 	.word	0x080082a8

0800507c <memset>:
 800507c:	4402      	add	r2, r0
 800507e:	4603      	mov	r3, r0
 8005080:	4293      	cmp	r3, r2
 8005082:	d100      	bne.n	8005086 <memset+0xa>
 8005084:	4770      	bx	lr
 8005086:	f803 1b01 	strb.w	r1, [r3], #1
 800508a:	e7f9      	b.n	8005080 <memset+0x4>

0800508c <__cvt>:
 800508c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005090:	ec55 4b10 	vmov	r4, r5, d0
 8005094:	2d00      	cmp	r5, #0
 8005096:	460e      	mov	r6, r1
 8005098:	4619      	mov	r1, r3
 800509a:	462b      	mov	r3, r5
 800509c:	bfbb      	ittet	lt
 800509e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050a2:	461d      	movlt	r5, r3
 80050a4:	2300      	movge	r3, #0
 80050a6:	232d      	movlt	r3, #45	; 0x2d
 80050a8:	700b      	strb	r3, [r1, #0]
 80050aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050b0:	4691      	mov	r9, r2
 80050b2:	f023 0820 	bic.w	r8, r3, #32
 80050b6:	bfbc      	itt	lt
 80050b8:	4622      	movlt	r2, r4
 80050ba:	4614      	movlt	r4, r2
 80050bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050c0:	d005      	beq.n	80050ce <__cvt+0x42>
 80050c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050c6:	d100      	bne.n	80050ca <__cvt+0x3e>
 80050c8:	3601      	adds	r6, #1
 80050ca:	2102      	movs	r1, #2
 80050cc:	e000      	b.n	80050d0 <__cvt+0x44>
 80050ce:	2103      	movs	r1, #3
 80050d0:	ab03      	add	r3, sp, #12
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	ab02      	add	r3, sp, #8
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	ec45 4b10 	vmov	d0, r4, r5
 80050dc:	4653      	mov	r3, sl
 80050de:	4632      	mov	r2, r6
 80050e0:	f000 fcea 	bl	8005ab8 <_dtoa_r>
 80050e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050e8:	4607      	mov	r7, r0
 80050ea:	d102      	bne.n	80050f2 <__cvt+0x66>
 80050ec:	f019 0f01 	tst.w	r9, #1
 80050f0:	d022      	beq.n	8005138 <__cvt+0xac>
 80050f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050f6:	eb07 0906 	add.w	r9, r7, r6
 80050fa:	d110      	bne.n	800511e <__cvt+0x92>
 80050fc:	783b      	ldrb	r3, [r7, #0]
 80050fe:	2b30      	cmp	r3, #48	; 0x30
 8005100:	d10a      	bne.n	8005118 <__cvt+0x8c>
 8005102:	2200      	movs	r2, #0
 8005104:	2300      	movs	r3, #0
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	f7fb fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 800510e:	b918      	cbnz	r0, 8005118 <__cvt+0x8c>
 8005110:	f1c6 0601 	rsb	r6, r6, #1
 8005114:	f8ca 6000 	str.w	r6, [sl]
 8005118:	f8da 3000 	ldr.w	r3, [sl]
 800511c:	4499      	add	r9, r3
 800511e:	2200      	movs	r2, #0
 8005120:	2300      	movs	r3, #0
 8005122:	4620      	mov	r0, r4
 8005124:	4629      	mov	r1, r5
 8005126:	f7fb fcef 	bl	8000b08 <__aeabi_dcmpeq>
 800512a:	b108      	cbz	r0, 8005130 <__cvt+0xa4>
 800512c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005130:	2230      	movs	r2, #48	; 0x30
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	454b      	cmp	r3, r9
 8005136:	d307      	bcc.n	8005148 <__cvt+0xbc>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800513c:	1bdb      	subs	r3, r3, r7
 800513e:	4638      	mov	r0, r7
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	b004      	add	sp, #16
 8005144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	9103      	str	r1, [sp, #12]
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e7f0      	b.n	8005132 <__cvt+0xa6>

08005150 <__exponent>:
 8005150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005152:	4603      	mov	r3, r0
 8005154:	2900      	cmp	r1, #0
 8005156:	bfb8      	it	lt
 8005158:	4249      	neglt	r1, r1
 800515a:	f803 2b02 	strb.w	r2, [r3], #2
 800515e:	bfb4      	ite	lt
 8005160:	222d      	movlt	r2, #45	; 0x2d
 8005162:	222b      	movge	r2, #43	; 0x2b
 8005164:	2909      	cmp	r1, #9
 8005166:	7042      	strb	r2, [r0, #1]
 8005168:	dd2a      	ble.n	80051c0 <__exponent+0x70>
 800516a:	f10d 0407 	add.w	r4, sp, #7
 800516e:	46a4      	mov	ip, r4
 8005170:	270a      	movs	r7, #10
 8005172:	46a6      	mov	lr, r4
 8005174:	460a      	mov	r2, r1
 8005176:	fb91 f6f7 	sdiv	r6, r1, r7
 800517a:	fb07 1516 	mls	r5, r7, r6, r1
 800517e:	3530      	adds	r5, #48	; 0x30
 8005180:	2a63      	cmp	r2, #99	; 0x63
 8005182:	f104 34ff 	add.w	r4, r4, #4294967295
 8005186:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800518a:	4631      	mov	r1, r6
 800518c:	dcf1      	bgt.n	8005172 <__exponent+0x22>
 800518e:	3130      	adds	r1, #48	; 0x30
 8005190:	f1ae 0502 	sub.w	r5, lr, #2
 8005194:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005198:	1c44      	adds	r4, r0, #1
 800519a:	4629      	mov	r1, r5
 800519c:	4561      	cmp	r1, ip
 800519e:	d30a      	bcc.n	80051b6 <__exponent+0x66>
 80051a0:	f10d 0209 	add.w	r2, sp, #9
 80051a4:	eba2 020e 	sub.w	r2, r2, lr
 80051a8:	4565      	cmp	r5, ip
 80051aa:	bf88      	it	hi
 80051ac:	2200      	movhi	r2, #0
 80051ae:	4413      	add	r3, r2
 80051b0:	1a18      	subs	r0, r3, r0
 80051b2:	b003      	add	sp, #12
 80051b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051be:	e7ed      	b.n	800519c <__exponent+0x4c>
 80051c0:	2330      	movs	r3, #48	; 0x30
 80051c2:	3130      	adds	r1, #48	; 0x30
 80051c4:	7083      	strb	r3, [r0, #2]
 80051c6:	70c1      	strb	r1, [r0, #3]
 80051c8:	1d03      	adds	r3, r0, #4
 80051ca:	e7f1      	b.n	80051b0 <__exponent+0x60>

080051cc <_printf_float>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	ed2d 8b02 	vpush	{d8}
 80051d4:	b08d      	sub	sp, #52	; 0x34
 80051d6:	460c      	mov	r4, r1
 80051d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80051dc:	4616      	mov	r6, r2
 80051de:	461f      	mov	r7, r3
 80051e0:	4605      	mov	r5, r0
 80051e2:	f001 fa57 	bl	8006694 <_localeconv_r>
 80051e6:	f8d0 a000 	ldr.w	sl, [r0]
 80051ea:	4650      	mov	r0, sl
 80051ec:	f7fb f810 	bl	8000210 <strlen>
 80051f0:	2300      	movs	r3, #0
 80051f2:	930a      	str	r3, [sp, #40]	; 0x28
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	f8d8 3000 	ldr.w	r3, [r8]
 80051fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005200:	3307      	adds	r3, #7
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	f103 0208 	add.w	r2, r3, #8
 800520a:	f8c8 2000 	str.w	r2, [r8]
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005216:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800521a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800521e:	9307      	str	r3, [sp, #28]
 8005220:	f8cd 8018 	str.w	r8, [sp, #24]
 8005224:	ee08 0a10 	vmov	s16, r0
 8005228:	4b9f      	ldr	r3, [pc, #636]	; (80054a8 <_printf_float+0x2dc>)
 800522a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800522e:	f04f 32ff 	mov.w	r2, #4294967295
 8005232:	f7fb fc9b 	bl	8000b6c <__aeabi_dcmpun>
 8005236:	bb88      	cbnz	r0, 800529c <_printf_float+0xd0>
 8005238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800523c:	4b9a      	ldr	r3, [pc, #616]	; (80054a8 <_printf_float+0x2dc>)
 800523e:	f04f 32ff 	mov.w	r2, #4294967295
 8005242:	f7fb fc75 	bl	8000b30 <__aeabi_dcmple>
 8005246:	bb48      	cbnz	r0, 800529c <_printf_float+0xd0>
 8005248:	2200      	movs	r2, #0
 800524a:	2300      	movs	r3, #0
 800524c:	4640      	mov	r0, r8
 800524e:	4649      	mov	r1, r9
 8005250:	f7fb fc64 	bl	8000b1c <__aeabi_dcmplt>
 8005254:	b110      	cbz	r0, 800525c <_printf_float+0x90>
 8005256:	232d      	movs	r3, #45	; 0x2d
 8005258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800525c:	4b93      	ldr	r3, [pc, #588]	; (80054ac <_printf_float+0x2e0>)
 800525e:	4894      	ldr	r0, [pc, #592]	; (80054b0 <_printf_float+0x2e4>)
 8005260:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005264:	bf94      	ite	ls
 8005266:	4698      	movls	r8, r3
 8005268:	4680      	movhi	r8, r0
 800526a:	2303      	movs	r3, #3
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	9b05      	ldr	r3, [sp, #20]
 8005270:	f023 0204 	bic.w	r2, r3, #4
 8005274:	6022      	str	r2, [r4, #0]
 8005276:	f04f 0900 	mov.w	r9, #0
 800527a:	9700      	str	r7, [sp, #0]
 800527c:	4633      	mov	r3, r6
 800527e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005280:	4621      	mov	r1, r4
 8005282:	4628      	mov	r0, r5
 8005284:	f000 f9d8 	bl	8005638 <_printf_common>
 8005288:	3001      	adds	r0, #1
 800528a:	f040 8090 	bne.w	80053ae <_printf_float+0x1e2>
 800528e:	f04f 30ff 	mov.w	r0, #4294967295
 8005292:	b00d      	add	sp, #52	; 0x34
 8005294:	ecbd 8b02 	vpop	{d8}
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	4642      	mov	r2, r8
 800529e:	464b      	mov	r3, r9
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb fc62 	bl	8000b6c <__aeabi_dcmpun>
 80052a8:	b140      	cbz	r0, 80052bc <_printf_float+0xf0>
 80052aa:	464b      	mov	r3, r9
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bfbc      	itt	lt
 80052b0:	232d      	movlt	r3, #45	; 0x2d
 80052b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052b6:	487f      	ldr	r0, [pc, #508]	; (80054b4 <_printf_float+0x2e8>)
 80052b8:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <_printf_float+0x2ec>)
 80052ba:	e7d1      	b.n	8005260 <_printf_float+0x94>
 80052bc:	6863      	ldr	r3, [r4, #4]
 80052be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052c2:	9206      	str	r2, [sp, #24]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	d13f      	bne.n	8005348 <_printf_float+0x17c>
 80052c8:	2306      	movs	r3, #6
 80052ca:	6063      	str	r3, [r4, #4]
 80052cc:	9b05      	ldr	r3, [sp, #20]
 80052ce:	6861      	ldr	r1, [r4, #4]
 80052d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052d4:	2300      	movs	r3, #0
 80052d6:	9303      	str	r3, [sp, #12]
 80052d8:	ab0a      	add	r3, sp, #40	; 0x28
 80052da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80052de:	ab09      	add	r3, sp, #36	; 0x24
 80052e0:	ec49 8b10 	vmov	d0, r8, r9
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	6022      	str	r2, [r4, #0]
 80052e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052ec:	4628      	mov	r0, r5
 80052ee:	f7ff fecd 	bl	800508c <__cvt>
 80052f2:	9b06      	ldr	r3, [sp, #24]
 80052f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052f6:	2b47      	cmp	r3, #71	; 0x47
 80052f8:	4680      	mov	r8, r0
 80052fa:	d108      	bne.n	800530e <_printf_float+0x142>
 80052fc:	1cc8      	adds	r0, r1, #3
 80052fe:	db02      	blt.n	8005306 <_printf_float+0x13a>
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	4299      	cmp	r1, r3
 8005304:	dd41      	ble.n	800538a <_printf_float+0x1be>
 8005306:	f1ab 0b02 	sub.w	fp, fp, #2
 800530a:	fa5f fb8b 	uxtb.w	fp, fp
 800530e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005312:	d820      	bhi.n	8005356 <_printf_float+0x18a>
 8005314:	3901      	subs	r1, #1
 8005316:	465a      	mov	r2, fp
 8005318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800531c:	9109      	str	r1, [sp, #36]	; 0x24
 800531e:	f7ff ff17 	bl	8005150 <__exponent>
 8005322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005324:	1813      	adds	r3, r2, r0
 8005326:	2a01      	cmp	r2, #1
 8005328:	4681      	mov	r9, r0
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	dc02      	bgt.n	8005334 <_printf_float+0x168>
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	07d2      	lsls	r2, r2, #31
 8005332:	d501      	bpl.n	8005338 <_printf_float+0x16c>
 8005334:	3301      	adds	r3, #1
 8005336:	6123      	str	r3, [r4, #16]
 8005338:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800533c:	2b00      	cmp	r3, #0
 800533e:	d09c      	beq.n	800527a <_printf_float+0xae>
 8005340:	232d      	movs	r3, #45	; 0x2d
 8005342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005346:	e798      	b.n	800527a <_printf_float+0xae>
 8005348:	9a06      	ldr	r2, [sp, #24]
 800534a:	2a47      	cmp	r2, #71	; 0x47
 800534c:	d1be      	bne.n	80052cc <_printf_float+0x100>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1bc      	bne.n	80052cc <_printf_float+0x100>
 8005352:	2301      	movs	r3, #1
 8005354:	e7b9      	b.n	80052ca <_printf_float+0xfe>
 8005356:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800535a:	d118      	bne.n	800538e <_printf_float+0x1c2>
 800535c:	2900      	cmp	r1, #0
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	dd0b      	ble.n	800537a <_printf_float+0x1ae>
 8005362:	6121      	str	r1, [r4, #16]
 8005364:	b913      	cbnz	r3, 800536c <_printf_float+0x1a0>
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	07d0      	lsls	r0, r2, #31
 800536a:	d502      	bpl.n	8005372 <_printf_float+0x1a6>
 800536c:	3301      	adds	r3, #1
 800536e:	440b      	add	r3, r1
 8005370:	6123      	str	r3, [r4, #16]
 8005372:	65a1      	str	r1, [r4, #88]	; 0x58
 8005374:	f04f 0900 	mov.w	r9, #0
 8005378:	e7de      	b.n	8005338 <_printf_float+0x16c>
 800537a:	b913      	cbnz	r3, 8005382 <_printf_float+0x1b6>
 800537c:	6822      	ldr	r2, [r4, #0]
 800537e:	07d2      	lsls	r2, r2, #31
 8005380:	d501      	bpl.n	8005386 <_printf_float+0x1ba>
 8005382:	3302      	adds	r3, #2
 8005384:	e7f4      	b.n	8005370 <_printf_float+0x1a4>
 8005386:	2301      	movs	r3, #1
 8005388:	e7f2      	b.n	8005370 <_printf_float+0x1a4>
 800538a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005390:	4299      	cmp	r1, r3
 8005392:	db05      	blt.n	80053a0 <_printf_float+0x1d4>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	6121      	str	r1, [r4, #16]
 8005398:	07d8      	lsls	r0, r3, #31
 800539a:	d5ea      	bpl.n	8005372 <_printf_float+0x1a6>
 800539c:	1c4b      	adds	r3, r1, #1
 800539e:	e7e7      	b.n	8005370 <_printf_float+0x1a4>
 80053a0:	2900      	cmp	r1, #0
 80053a2:	bfd4      	ite	le
 80053a4:	f1c1 0202 	rsble	r2, r1, #2
 80053a8:	2201      	movgt	r2, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	e7e0      	b.n	8005370 <_printf_float+0x1a4>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	055a      	lsls	r2, r3, #21
 80053b2:	d407      	bmi.n	80053c4 <_printf_float+0x1f8>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	4642      	mov	r2, r8
 80053b8:	4631      	mov	r1, r6
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b8      	blx	r7
 80053be:	3001      	adds	r0, #1
 80053c0:	d12c      	bne.n	800541c <_printf_float+0x250>
 80053c2:	e764      	b.n	800528e <_printf_float+0xc2>
 80053c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053c8:	f240 80e0 	bls.w	800558c <_printf_float+0x3c0>
 80053cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053d0:	2200      	movs	r2, #0
 80053d2:	2300      	movs	r3, #0
 80053d4:	f7fb fb98 	bl	8000b08 <__aeabi_dcmpeq>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d034      	beq.n	8005446 <_printf_float+0x27a>
 80053dc:	4a37      	ldr	r2, [pc, #220]	; (80054bc <_printf_float+0x2f0>)
 80053de:	2301      	movs	r3, #1
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	f43f af51 	beq.w	800528e <_printf_float+0xc2>
 80053ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f0:	429a      	cmp	r2, r3
 80053f2:	db02      	blt.n	80053fa <_printf_float+0x22e>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	07d8      	lsls	r0, r3, #31
 80053f8:	d510      	bpl.n	800541c <_printf_float+0x250>
 80053fa:	ee18 3a10 	vmov	r3, s16
 80053fe:	4652      	mov	r2, sl
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f af41 	beq.w	800528e <_printf_float+0xc2>
 800540c:	f04f 0800 	mov.w	r8, #0
 8005410:	f104 091a 	add.w	r9, r4, #26
 8005414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	4543      	cmp	r3, r8
 800541a:	dc09      	bgt.n	8005430 <_printf_float+0x264>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079b      	lsls	r3, r3, #30
 8005420:	f100 8105 	bmi.w	800562e <_printf_float+0x462>
 8005424:	68e0      	ldr	r0, [r4, #12]
 8005426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005428:	4298      	cmp	r0, r3
 800542a:	bfb8      	it	lt
 800542c:	4618      	movlt	r0, r3
 800542e:	e730      	b.n	8005292 <_printf_float+0xc6>
 8005430:	2301      	movs	r3, #1
 8005432:	464a      	mov	r2, r9
 8005434:	4631      	mov	r1, r6
 8005436:	4628      	mov	r0, r5
 8005438:	47b8      	blx	r7
 800543a:	3001      	adds	r0, #1
 800543c:	f43f af27 	beq.w	800528e <_printf_float+0xc2>
 8005440:	f108 0801 	add.w	r8, r8, #1
 8005444:	e7e6      	b.n	8005414 <_printf_float+0x248>
 8005446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	dc39      	bgt.n	80054c0 <_printf_float+0x2f4>
 800544c:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <_printf_float+0x2f0>)
 800544e:	2301      	movs	r3, #1
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	f43f af19 	beq.w	800528e <_printf_float+0xc2>
 800545c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005460:	4313      	orrs	r3, r2
 8005462:	d102      	bne.n	800546a <_printf_float+0x29e>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	07d9      	lsls	r1, r3, #31
 8005468:	d5d8      	bpl.n	800541c <_printf_float+0x250>
 800546a:	ee18 3a10 	vmov	r3, s16
 800546e:	4652      	mov	r2, sl
 8005470:	4631      	mov	r1, r6
 8005472:	4628      	mov	r0, r5
 8005474:	47b8      	blx	r7
 8005476:	3001      	adds	r0, #1
 8005478:	f43f af09 	beq.w	800528e <_printf_float+0xc2>
 800547c:	f04f 0900 	mov.w	r9, #0
 8005480:	f104 0a1a 	add.w	sl, r4, #26
 8005484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005486:	425b      	negs	r3, r3
 8005488:	454b      	cmp	r3, r9
 800548a:	dc01      	bgt.n	8005490 <_printf_float+0x2c4>
 800548c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800548e:	e792      	b.n	80053b6 <_printf_float+0x1ea>
 8005490:	2301      	movs	r3, #1
 8005492:	4652      	mov	r2, sl
 8005494:	4631      	mov	r1, r6
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	f43f aef7 	beq.w	800528e <_printf_float+0xc2>
 80054a0:	f109 0901 	add.w	r9, r9, #1
 80054a4:	e7ee      	b.n	8005484 <_printf_float+0x2b8>
 80054a6:	bf00      	nop
 80054a8:	7fefffff 	.word	0x7fefffff
 80054ac:	08007ec4 	.word	0x08007ec4
 80054b0:	08007ec8 	.word	0x08007ec8
 80054b4:	08007ed0 	.word	0x08007ed0
 80054b8:	08007ecc 	.word	0x08007ecc
 80054bc:	08007ed4 	.word	0x08007ed4
 80054c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bfa8      	it	ge
 80054c8:	461a      	movge	r2, r3
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	4691      	mov	r9, r2
 80054ce:	dc37      	bgt.n	8005540 <_printf_float+0x374>
 80054d0:	f04f 0b00 	mov.w	fp, #0
 80054d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d8:	f104 021a 	add.w	r2, r4, #26
 80054dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	eba3 0309 	sub.w	r3, r3, r9
 80054e4:	455b      	cmp	r3, fp
 80054e6:	dc33      	bgt.n	8005550 <_printf_float+0x384>
 80054e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054ec:	429a      	cmp	r2, r3
 80054ee:	db3b      	blt.n	8005568 <_printf_float+0x39c>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	07da      	lsls	r2, r3, #31
 80054f4:	d438      	bmi.n	8005568 <_printf_float+0x39c>
 80054f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f8:	9a05      	ldr	r2, [sp, #20]
 80054fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054fc:	1a9a      	subs	r2, r3, r2
 80054fe:	eba3 0901 	sub.w	r9, r3, r1
 8005502:	4591      	cmp	r9, r2
 8005504:	bfa8      	it	ge
 8005506:	4691      	movge	r9, r2
 8005508:	f1b9 0f00 	cmp.w	r9, #0
 800550c:	dc35      	bgt.n	800557a <_printf_float+0x3ae>
 800550e:	f04f 0800 	mov.w	r8, #0
 8005512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005516:	f104 0a1a 	add.w	sl, r4, #26
 800551a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	eba3 0309 	sub.w	r3, r3, r9
 8005524:	4543      	cmp	r3, r8
 8005526:	f77f af79 	ble.w	800541c <_printf_float+0x250>
 800552a:	2301      	movs	r3, #1
 800552c:	4652      	mov	r2, sl
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f aeaa 	beq.w	800528e <_printf_float+0xc2>
 800553a:	f108 0801 	add.w	r8, r8, #1
 800553e:	e7ec      	b.n	800551a <_printf_float+0x34e>
 8005540:	4613      	mov	r3, r2
 8005542:	4631      	mov	r1, r6
 8005544:	4642      	mov	r2, r8
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	d1c0      	bne.n	80054d0 <_printf_float+0x304>
 800554e:	e69e      	b.n	800528e <_printf_float+0xc2>
 8005550:	2301      	movs	r3, #1
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	9205      	str	r2, [sp, #20]
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f ae97 	beq.w	800528e <_printf_float+0xc2>
 8005560:	9a05      	ldr	r2, [sp, #20]
 8005562:	f10b 0b01 	add.w	fp, fp, #1
 8005566:	e7b9      	b.n	80054dc <_printf_float+0x310>
 8005568:	ee18 3a10 	vmov	r3, s16
 800556c:	4652      	mov	r2, sl
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	d1be      	bne.n	80054f6 <_printf_float+0x32a>
 8005578:	e689      	b.n	800528e <_printf_float+0xc2>
 800557a:	9a05      	ldr	r2, [sp, #20]
 800557c:	464b      	mov	r3, r9
 800557e:	4442      	add	r2, r8
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	d1c1      	bne.n	800550e <_printf_float+0x342>
 800558a:	e680      	b.n	800528e <_printf_float+0xc2>
 800558c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800558e:	2a01      	cmp	r2, #1
 8005590:	dc01      	bgt.n	8005596 <_printf_float+0x3ca>
 8005592:	07db      	lsls	r3, r3, #31
 8005594:	d538      	bpl.n	8005608 <_printf_float+0x43c>
 8005596:	2301      	movs	r3, #1
 8005598:	4642      	mov	r2, r8
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	f43f ae74 	beq.w	800528e <_printf_float+0xc2>
 80055a6:	ee18 3a10 	vmov	r3, s16
 80055aa:	4652      	mov	r2, sl
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f ae6b 	beq.w	800528e <_printf_float+0xc2>
 80055b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055bc:	2200      	movs	r2, #0
 80055be:	2300      	movs	r3, #0
 80055c0:	f7fb faa2 	bl	8000b08 <__aeabi_dcmpeq>
 80055c4:	b9d8      	cbnz	r0, 80055fe <_printf_float+0x432>
 80055c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c8:	f108 0201 	add.w	r2, r8, #1
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4631      	mov	r1, r6
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b8      	blx	r7
 80055d4:	3001      	adds	r0, #1
 80055d6:	d10e      	bne.n	80055f6 <_printf_float+0x42a>
 80055d8:	e659      	b.n	800528e <_printf_float+0xc2>
 80055da:	2301      	movs	r3, #1
 80055dc:	4652      	mov	r2, sl
 80055de:	4631      	mov	r1, r6
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	f43f ae52 	beq.w	800528e <_printf_float+0xc2>
 80055ea:	f108 0801 	add.w	r8, r8, #1
 80055ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f0:	3b01      	subs	r3, #1
 80055f2:	4543      	cmp	r3, r8
 80055f4:	dcf1      	bgt.n	80055da <_printf_float+0x40e>
 80055f6:	464b      	mov	r3, r9
 80055f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055fc:	e6dc      	b.n	80053b8 <_printf_float+0x1ec>
 80055fe:	f04f 0800 	mov.w	r8, #0
 8005602:	f104 0a1a 	add.w	sl, r4, #26
 8005606:	e7f2      	b.n	80055ee <_printf_float+0x422>
 8005608:	2301      	movs	r3, #1
 800560a:	4642      	mov	r2, r8
 800560c:	e7df      	b.n	80055ce <_printf_float+0x402>
 800560e:	2301      	movs	r3, #1
 8005610:	464a      	mov	r2, r9
 8005612:	4631      	mov	r1, r6
 8005614:	4628      	mov	r0, r5
 8005616:	47b8      	blx	r7
 8005618:	3001      	adds	r0, #1
 800561a:	f43f ae38 	beq.w	800528e <_printf_float+0xc2>
 800561e:	f108 0801 	add.w	r8, r8, #1
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005626:	1a5b      	subs	r3, r3, r1
 8005628:	4543      	cmp	r3, r8
 800562a:	dcf0      	bgt.n	800560e <_printf_float+0x442>
 800562c:	e6fa      	b.n	8005424 <_printf_float+0x258>
 800562e:	f04f 0800 	mov.w	r8, #0
 8005632:	f104 0919 	add.w	r9, r4, #25
 8005636:	e7f4      	b.n	8005622 <_printf_float+0x456>

08005638 <_printf_common>:
 8005638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563c:	4616      	mov	r6, r2
 800563e:	4699      	mov	r9, r3
 8005640:	688a      	ldr	r2, [r1, #8]
 8005642:	690b      	ldr	r3, [r1, #16]
 8005644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005648:	4293      	cmp	r3, r2
 800564a:	bfb8      	it	lt
 800564c:	4613      	movlt	r3, r2
 800564e:	6033      	str	r3, [r6, #0]
 8005650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005654:	4607      	mov	r7, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b10a      	cbz	r2, 800565e <_printf_common+0x26>
 800565a:	3301      	adds	r3, #1
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	0699      	lsls	r1, r3, #26
 8005662:	bf42      	ittt	mi
 8005664:	6833      	ldrmi	r3, [r6, #0]
 8005666:	3302      	addmi	r3, #2
 8005668:	6033      	strmi	r3, [r6, #0]
 800566a:	6825      	ldr	r5, [r4, #0]
 800566c:	f015 0506 	ands.w	r5, r5, #6
 8005670:	d106      	bne.n	8005680 <_printf_common+0x48>
 8005672:	f104 0a19 	add.w	sl, r4, #25
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	6832      	ldr	r2, [r6, #0]
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	42ab      	cmp	r3, r5
 800567e:	dc26      	bgt.n	80056ce <_printf_common+0x96>
 8005680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005684:	1e13      	subs	r3, r2, #0
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	bf18      	it	ne
 800568a:	2301      	movne	r3, #1
 800568c:	0692      	lsls	r2, r2, #26
 800568e:	d42b      	bmi.n	80056e8 <_printf_common+0xb0>
 8005690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005694:	4649      	mov	r1, r9
 8005696:	4638      	mov	r0, r7
 8005698:	47c0      	blx	r8
 800569a:	3001      	adds	r0, #1
 800569c:	d01e      	beq.n	80056dc <_printf_common+0xa4>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	68e5      	ldr	r5, [r4, #12]
 80056a2:	6832      	ldr	r2, [r6, #0]
 80056a4:	f003 0306 	and.w	r3, r3, #6
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	bf08      	it	eq
 80056ac:	1aad      	subeq	r5, r5, r2
 80056ae:	68a3      	ldr	r3, [r4, #8]
 80056b0:	6922      	ldr	r2, [r4, #16]
 80056b2:	bf0c      	ite	eq
 80056b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b8:	2500      	movne	r5, #0
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bfc4      	itt	gt
 80056be:	1a9b      	subgt	r3, r3, r2
 80056c0:	18ed      	addgt	r5, r5, r3
 80056c2:	2600      	movs	r6, #0
 80056c4:	341a      	adds	r4, #26
 80056c6:	42b5      	cmp	r5, r6
 80056c8:	d11a      	bne.n	8005700 <_printf_common+0xc8>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e008      	b.n	80056e0 <_printf_common+0xa8>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4652      	mov	r2, sl
 80056d2:	4649      	mov	r1, r9
 80056d4:	4638      	mov	r0, r7
 80056d6:	47c0      	blx	r8
 80056d8:	3001      	adds	r0, #1
 80056da:	d103      	bne.n	80056e4 <_printf_common+0xac>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e4:	3501      	adds	r5, #1
 80056e6:	e7c6      	b.n	8005676 <_printf_common+0x3e>
 80056e8:	18e1      	adds	r1, r4, r3
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	2030      	movs	r0, #48	; 0x30
 80056ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056f2:	4422      	add	r2, r4
 80056f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056fc:	3302      	adds	r3, #2
 80056fe:	e7c7      	b.n	8005690 <_printf_common+0x58>
 8005700:	2301      	movs	r3, #1
 8005702:	4622      	mov	r2, r4
 8005704:	4649      	mov	r1, r9
 8005706:	4638      	mov	r0, r7
 8005708:	47c0      	blx	r8
 800570a:	3001      	adds	r0, #1
 800570c:	d0e6      	beq.n	80056dc <_printf_common+0xa4>
 800570e:	3601      	adds	r6, #1
 8005710:	e7d9      	b.n	80056c6 <_printf_common+0x8e>
	...

08005714 <_printf_i>:
 8005714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	7e0f      	ldrb	r7, [r1, #24]
 800571a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800571c:	2f78      	cmp	r7, #120	; 0x78
 800571e:	4691      	mov	r9, r2
 8005720:	4680      	mov	r8, r0
 8005722:	460c      	mov	r4, r1
 8005724:	469a      	mov	sl, r3
 8005726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800572a:	d807      	bhi.n	800573c <_printf_i+0x28>
 800572c:	2f62      	cmp	r7, #98	; 0x62
 800572e:	d80a      	bhi.n	8005746 <_printf_i+0x32>
 8005730:	2f00      	cmp	r7, #0
 8005732:	f000 80d8 	beq.w	80058e6 <_printf_i+0x1d2>
 8005736:	2f58      	cmp	r7, #88	; 0x58
 8005738:	f000 80a3 	beq.w	8005882 <_printf_i+0x16e>
 800573c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005744:	e03a      	b.n	80057bc <_printf_i+0xa8>
 8005746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800574a:	2b15      	cmp	r3, #21
 800574c:	d8f6      	bhi.n	800573c <_printf_i+0x28>
 800574e:	a101      	add	r1, pc, #4	; (adr r1, 8005754 <_printf_i+0x40>)
 8005750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005754:	080057ad 	.word	0x080057ad
 8005758:	080057c1 	.word	0x080057c1
 800575c:	0800573d 	.word	0x0800573d
 8005760:	0800573d 	.word	0x0800573d
 8005764:	0800573d 	.word	0x0800573d
 8005768:	0800573d 	.word	0x0800573d
 800576c:	080057c1 	.word	0x080057c1
 8005770:	0800573d 	.word	0x0800573d
 8005774:	0800573d 	.word	0x0800573d
 8005778:	0800573d 	.word	0x0800573d
 800577c:	0800573d 	.word	0x0800573d
 8005780:	080058cd 	.word	0x080058cd
 8005784:	080057f1 	.word	0x080057f1
 8005788:	080058af 	.word	0x080058af
 800578c:	0800573d 	.word	0x0800573d
 8005790:	0800573d 	.word	0x0800573d
 8005794:	080058ef 	.word	0x080058ef
 8005798:	0800573d 	.word	0x0800573d
 800579c:	080057f1 	.word	0x080057f1
 80057a0:	0800573d 	.word	0x0800573d
 80057a4:	0800573d 	.word	0x0800573d
 80057a8:	080058b7 	.word	0x080058b7
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	1d1a      	adds	r2, r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	602a      	str	r2, [r5, #0]
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057bc:	2301      	movs	r3, #1
 80057be:	e0a3      	b.n	8005908 <_printf_i+0x1f4>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	6829      	ldr	r1, [r5, #0]
 80057c4:	0606      	lsls	r6, r0, #24
 80057c6:	f101 0304 	add.w	r3, r1, #4
 80057ca:	d50a      	bpl.n	80057e2 <_printf_i+0xce>
 80057cc:	680e      	ldr	r6, [r1, #0]
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	da03      	bge.n	80057dc <_printf_i+0xc8>
 80057d4:	232d      	movs	r3, #45	; 0x2d
 80057d6:	4276      	negs	r6, r6
 80057d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057dc:	485e      	ldr	r0, [pc, #376]	; (8005958 <_printf_i+0x244>)
 80057de:	230a      	movs	r3, #10
 80057e0:	e019      	b.n	8005816 <_printf_i+0x102>
 80057e2:	680e      	ldr	r6, [r1, #0]
 80057e4:	602b      	str	r3, [r5, #0]
 80057e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057ea:	bf18      	it	ne
 80057ec:	b236      	sxthne	r6, r6
 80057ee:	e7ef      	b.n	80057d0 <_printf_i+0xbc>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	1d19      	adds	r1, r3, #4
 80057f6:	6029      	str	r1, [r5, #0]
 80057f8:	0601      	lsls	r1, r0, #24
 80057fa:	d501      	bpl.n	8005800 <_printf_i+0xec>
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	e002      	b.n	8005806 <_printf_i+0xf2>
 8005800:	0646      	lsls	r6, r0, #25
 8005802:	d5fb      	bpl.n	80057fc <_printf_i+0xe8>
 8005804:	881e      	ldrh	r6, [r3, #0]
 8005806:	4854      	ldr	r0, [pc, #336]	; (8005958 <_printf_i+0x244>)
 8005808:	2f6f      	cmp	r7, #111	; 0x6f
 800580a:	bf0c      	ite	eq
 800580c:	2308      	moveq	r3, #8
 800580e:	230a      	movne	r3, #10
 8005810:	2100      	movs	r1, #0
 8005812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005816:	6865      	ldr	r5, [r4, #4]
 8005818:	60a5      	str	r5, [r4, #8]
 800581a:	2d00      	cmp	r5, #0
 800581c:	bfa2      	ittt	ge
 800581e:	6821      	ldrge	r1, [r4, #0]
 8005820:	f021 0104 	bicge.w	r1, r1, #4
 8005824:	6021      	strge	r1, [r4, #0]
 8005826:	b90e      	cbnz	r6, 800582c <_printf_i+0x118>
 8005828:	2d00      	cmp	r5, #0
 800582a:	d04d      	beq.n	80058c8 <_printf_i+0x1b4>
 800582c:	4615      	mov	r5, r2
 800582e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005832:	fb03 6711 	mls	r7, r3, r1, r6
 8005836:	5dc7      	ldrb	r7, [r0, r7]
 8005838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800583c:	4637      	mov	r7, r6
 800583e:	42bb      	cmp	r3, r7
 8005840:	460e      	mov	r6, r1
 8005842:	d9f4      	bls.n	800582e <_printf_i+0x11a>
 8005844:	2b08      	cmp	r3, #8
 8005846:	d10b      	bne.n	8005860 <_printf_i+0x14c>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	07de      	lsls	r6, r3, #31
 800584c:	d508      	bpl.n	8005860 <_printf_i+0x14c>
 800584e:	6923      	ldr	r3, [r4, #16]
 8005850:	6861      	ldr	r1, [r4, #4]
 8005852:	4299      	cmp	r1, r3
 8005854:	bfde      	ittt	le
 8005856:	2330      	movle	r3, #48	; 0x30
 8005858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800585c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005860:	1b52      	subs	r2, r2, r5
 8005862:	6122      	str	r2, [r4, #16]
 8005864:	f8cd a000 	str.w	sl, [sp]
 8005868:	464b      	mov	r3, r9
 800586a:	aa03      	add	r2, sp, #12
 800586c:	4621      	mov	r1, r4
 800586e:	4640      	mov	r0, r8
 8005870:	f7ff fee2 	bl	8005638 <_printf_common>
 8005874:	3001      	adds	r0, #1
 8005876:	d14c      	bne.n	8005912 <_printf_i+0x1fe>
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	b004      	add	sp, #16
 800587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005882:	4835      	ldr	r0, [pc, #212]	; (8005958 <_printf_i+0x244>)
 8005884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005888:	6829      	ldr	r1, [r5, #0]
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005890:	6029      	str	r1, [r5, #0]
 8005892:	061d      	lsls	r5, r3, #24
 8005894:	d514      	bpl.n	80058c0 <_printf_i+0x1ac>
 8005896:	07df      	lsls	r7, r3, #31
 8005898:	bf44      	itt	mi
 800589a:	f043 0320 	orrmi.w	r3, r3, #32
 800589e:	6023      	strmi	r3, [r4, #0]
 80058a0:	b91e      	cbnz	r6, 80058aa <_printf_i+0x196>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	f023 0320 	bic.w	r3, r3, #32
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	2310      	movs	r3, #16
 80058ac:	e7b0      	b.n	8005810 <_printf_i+0xfc>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	f043 0320 	orr.w	r3, r3, #32
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	2378      	movs	r3, #120	; 0x78
 80058b8:	4828      	ldr	r0, [pc, #160]	; (800595c <_printf_i+0x248>)
 80058ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058be:	e7e3      	b.n	8005888 <_printf_i+0x174>
 80058c0:	0659      	lsls	r1, r3, #25
 80058c2:	bf48      	it	mi
 80058c4:	b2b6      	uxthmi	r6, r6
 80058c6:	e7e6      	b.n	8005896 <_printf_i+0x182>
 80058c8:	4615      	mov	r5, r2
 80058ca:	e7bb      	b.n	8005844 <_printf_i+0x130>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	6826      	ldr	r6, [r4, #0]
 80058d0:	6961      	ldr	r1, [r4, #20]
 80058d2:	1d18      	adds	r0, r3, #4
 80058d4:	6028      	str	r0, [r5, #0]
 80058d6:	0635      	lsls	r5, r6, #24
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	d501      	bpl.n	80058e0 <_printf_i+0x1cc>
 80058dc:	6019      	str	r1, [r3, #0]
 80058de:	e002      	b.n	80058e6 <_printf_i+0x1d2>
 80058e0:	0670      	lsls	r0, r6, #25
 80058e2:	d5fb      	bpl.n	80058dc <_printf_i+0x1c8>
 80058e4:	8019      	strh	r1, [r3, #0]
 80058e6:	2300      	movs	r3, #0
 80058e8:	6123      	str	r3, [r4, #16]
 80058ea:	4615      	mov	r5, r2
 80058ec:	e7ba      	b.n	8005864 <_printf_i+0x150>
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	1d1a      	adds	r2, r3, #4
 80058f2:	602a      	str	r2, [r5, #0]
 80058f4:	681d      	ldr	r5, [r3, #0]
 80058f6:	6862      	ldr	r2, [r4, #4]
 80058f8:	2100      	movs	r1, #0
 80058fa:	4628      	mov	r0, r5
 80058fc:	f7fa fc90 	bl	8000220 <memchr>
 8005900:	b108      	cbz	r0, 8005906 <_printf_i+0x1f2>
 8005902:	1b40      	subs	r0, r0, r5
 8005904:	6060      	str	r0, [r4, #4]
 8005906:	6863      	ldr	r3, [r4, #4]
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	2300      	movs	r3, #0
 800590c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005910:	e7a8      	b.n	8005864 <_printf_i+0x150>
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	462a      	mov	r2, r5
 8005916:	4649      	mov	r1, r9
 8005918:	4640      	mov	r0, r8
 800591a:	47d0      	blx	sl
 800591c:	3001      	adds	r0, #1
 800591e:	d0ab      	beq.n	8005878 <_printf_i+0x164>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	079b      	lsls	r3, r3, #30
 8005924:	d413      	bmi.n	800594e <_printf_i+0x23a>
 8005926:	68e0      	ldr	r0, [r4, #12]
 8005928:	9b03      	ldr	r3, [sp, #12]
 800592a:	4298      	cmp	r0, r3
 800592c:	bfb8      	it	lt
 800592e:	4618      	movlt	r0, r3
 8005930:	e7a4      	b.n	800587c <_printf_i+0x168>
 8005932:	2301      	movs	r3, #1
 8005934:	4632      	mov	r2, r6
 8005936:	4649      	mov	r1, r9
 8005938:	4640      	mov	r0, r8
 800593a:	47d0      	blx	sl
 800593c:	3001      	adds	r0, #1
 800593e:	d09b      	beq.n	8005878 <_printf_i+0x164>
 8005940:	3501      	adds	r5, #1
 8005942:	68e3      	ldr	r3, [r4, #12]
 8005944:	9903      	ldr	r1, [sp, #12]
 8005946:	1a5b      	subs	r3, r3, r1
 8005948:	42ab      	cmp	r3, r5
 800594a:	dcf2      	bgt.n	8005932 <_printf_i+0x21e>
 800594c:	e7eb      	b.n	8005926 <_printf_i+0x212>
 800594e:	2500      	movs	r5, #0
 8005950:	f104 0619 	add.w	r6, r4, #25
 8005954:	e7f5      	b.n	8005942 <_printf_i+0x22e>
 8005956:	bf00      	nop
 8005958:	08007ed6 	.word	0x08007ed6
 800595c:	08007ee7 	.word	0x08007ee7

08005960 <siprintf>:
 8005960:	b40e      	push	{r1, r2, r3}
 8005962:	b500      	push	{lr}
 8005964:	b09c      	sub	sp, #112	; 0x70
 8005966:	ab1d      	add	r3, sp, #116	; 0x74
 8005968:	9002      	str	r0, [sp, #8]
 800596a:	9006      	str	r0, [sp, #24]
 800596c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005970:	4809      	ldr	r0, [pc, #36]	; (8005998 <siprintf+0x38>)
 8005972:	9107      	str	r1, [sp, #28]
 8005974:	9104      	str	r1, [sp, #16]
 8005976:	4909      	ldr	r1, [pc, #36]	; (800599c <siprintf+0x3c>)
 8005978:	f853 2b04 	ldr.w	r2, [r3], #4
 800597c:	9105      	str	r1, [sp, #20]
 800597e:	6800      	ldr	r0, [r0, #0]
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	a902      	add	r1, sp, #8
 8005984:	f001 fb76 	bl	8007074 <_svfiprintf_r>
 8005988:	9b02      	ldr	r3, [sp, #8]
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	b01c      	add	sp, #112	; 0x70
 8005990:	f85d eb04 	ldr.w	lr, [sp], #4
 8005994:	b003      	add	sp, #12
 8005996:	4770      	bx	lr
 8005998:	2000000c 	.word	0x2000000c
 800599c:	ffff0208 	.word	0xffff0208

080059a0 <quorem>:
 80059a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	6903      	ldr	r3, [r0, #16]
 80059a6:	690c      	ldr	r4, [r1, #16]
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	4607      	mov	r7, r0
 80059ac:	f2c0 8081 	blt.w	8005ab2 <quorem+0x112>
 80059b0:	3c01      	subs	r4, #1
 80059b2:	f101 0814 	add.w	r8, r1, #20
 80059b6:	f100 0514 	add.w	r5, r0, #20
 80059ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059c8:	3301      	adds	r3, #1
 80059ca:	429a      	cmp	r2, r3
 80059cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80059d8:	d331      	bcc.n	8005a3e <quorem+0x9e>
 80059da:	f04f 0e00 	mov.w	lr, #0
 80059de:	4640      	mov	r0, r8
 80059e0:	46ac      	mov	ip, r5
 80059e2:	46f2      	mov	sl, lr
 80059e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80059e8:	b293      	uxth	r3, r2
 80059ea:	fb06 e303 	mla	r3, r6, r3, lr
 80059ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	ebaa 0303 	sub.w	r3, sl, r3
 80059f8:	f8dc a000 	ldr.w	sl, [ip]
 80059fc:	0c12      	lsrs	r2, r2, #16
 80059fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005a02:	fb06 e202 	mla	r2, r6, r2, lr
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	9b00      	ldr	r3, [sp, #0]
 8005a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a0e:	b292      	uxth	r2, r2
 8005a10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a18:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a1c:	4581      	cmp	r9, r0
 8005a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a22:	f84c 3b04 	str.w	r3, [ip], #4
 8005a26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a2a:	d2db      	bcs.n	80059e4 <quorem+0x44>
 8005a2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a30:	b92b      	cbnz	r3, 8005a3e <quorem+0x9e>
 8005a32:	9b01      	ldr	r3, [sp, #4]
 8005a34:	3b04      	subs	r3, #4
 8005a36:	429d      	cmp	r5, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	d32e      	bcc.n	8005a9a <quorem+0xfa>
 8005a3c:	613c      	str	r4, [r7, #16]
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f001 f8c4 	bl	8006bcc <__mcmp>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	db24      	blt.n	8005a92 <quorem+0xf2>
 8005a48:	3601      	adds	r6, #1
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f04f 0c00 	mov.w	ip, #0
 8005a50:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a54:	f8d0 e000 	ldr.w	lr, [r0]
 8005a58:	b293      	uxth	r3, r2
 8005a5a:	ebac 0303 	sub.w	r3, ip, r3
 8005a5e:	0c12      	lsrs	r2, r2, #16
 8005a60:	fa13 f38e 	uxtah	r3, r3, lr
 8005a64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a72:	45c1      	cmp	r9, r8
 8005a74:	f840 3b04 	str.w	r3, [r0], #4
 8005a78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a7c:	d2e8      	bcs.n	8005a50 <quorem+0xb0>
 8005a7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a86:	b922      	cbnz	r2, 8005a92 <quorem+0xf2>
 8005a88:	3b04      	subs	r3, #4
 8005a8a:	429d      	cmp	r5, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	d30a      	bcc.n	8005aa6 <quorem+0x106>
 8005a90:	613c      	str	r4, [r7, #16]
 8005a92:	4630      	mov	r0, r6
 8005a94:	b003      	add	sp, #12
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	3b04      	subs	r3, #4
 8005a9e:	2a00      	cmp	r2, #0
 8005aa0:	d1cc      	bne.n	8005a3c <quorem+0x9c>
 8005aa2:	3c01      	subs	r4, #1
 8005aa4:	e7c7      	b.n	8005a36 <quorem+0x96>
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	3b04      	subs	r3, #4
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	d1f0      	bne.n	8005a90 <quorem+0xf0>
 8005aae:	3c01      	subs	r4, #1
 8005ab0:	e7eb      	b.n	8005a8a <quorem+0xea>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e7ee      	b.n	8005a94 <quorem+0xf4>
	...

08005ab8 <_dtoa_r>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	ed2d 8b04 	vpush	{d8-d9}
 8005ac0:	ec57 6b10 	vmov	r6, r7, d0
 8005ac4:	b093      	sub	sp, #76	; 0x4c
 8005ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005acc:	9106      	str	r1, [sp, #24]
 8005ace:	ee10 aa10 	vmov	sl, s0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ad8:	46bb      	mov	fp, r7
 8005ada:	b975      	cbnz	r5, 8005afa <_dtoa_r+0x42>
 8005adc:	2010      	movs	r0, #16
 8005ade:	f000 fddd 	bl	800669c <malloc>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ae6:	b920      	cbnz	r0, 8005af2 <_dtoa_r+0x3a>
 8005ae8:	4ba7      	ldr	r3, [pc, #668]	; (8005d88 <_dtoa_r+0x2d0>)
 8005aea:	21ea      	movs	r1, #234	; 0xea
 8005aec:	48a7      	ldr	r0, [pc, #668]	; (8005d8c <_dtoa_r+0x2d4>)
 8005aee:	f001 fbd1 	bl	8007294 <__assert_func>
 8005af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005af6:	6005      	str	r5, [r0, #0]
 8005af8:	60c5      	str	r5, [r0, #12]
 8005afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	b151      	cbz	r1, 8005b16 <_dtoa_r+0x5e>
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	604a      	str	r2, [r1, #4]
 8005b04:	2301      	movs	r3, #1
 8005b06:	4093      	lsls	r3, r2
 8005b08:	608b      	str	r3, [r1, #8]
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 fe1c 	bl	8006748 <_Bfree>
 8005b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	1e3b      	subs	r3, r7, #0
 8005b18:	bfaa      	itet	ge
 8005b1a:	2300      	movge	r3, #0
 8005b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005b20:	f8c8 3000 	strge.w	r3, [r8]
 8005b24:	4b9a      	ldr	r3, [pc, #616]	; (8005d90 <_dtoa_r+0x2d8>)
 8005b26:	bfbc      	itt	lt
 8005b28:	2201      	movlt	r2, #1
 8005b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8005b2e:	ea33 030b 	bics.w	r3, r3, fp
 8005b32:	d11b      	bne.n	8005b6c <_dtoa_r+0xb4>
 8005b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b40:	4333      	orrs	r3, r6
 8005b42:	f000 8592 	beq.w	800666a <_dtoa_r+0xbb2>
 8005b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b48:	b963      	cbnz	r3, 8005b64 <_dtoa_r+0xac>
 8005b4a:	4b92      	ldr	r3, [pc, #584]	; (8005d94 <_dtoa_r+0x2dc>)
 8005b4c:	e022      	b.n	8005b94 <_dtoa_r+0xdc>
 8005b4e:	4b92      	ldr	r3, [pc, #584]	; (8005d98 <_dtoa_r+0x2e0>)
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	3308      	adds	r3, #8
 8005b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	9801      	ldr	r0, [sp, #4]
 8005b5a:	b013      	add	sp, #76	; 0x4c
 8005b5c:	ecbd 8b04 	vpop	{d8-d9}
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <_dtoa_r+0x2dc>)
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	3303      	adds	r3, #3
 8005b6a:	e7f3      	b.n	8005b54 <_dtoa_r+0x9c>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4650      	mov	r0, sl
 8005b72:	4659      	mov	r1, fp
 8005b74:	f7fa ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 8005b78:	ec4b ab19 	vmov	d9, sl, fp
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	b158      	cbz	r0, 8005b98 <_dtoa_r+0xe0>
 8005b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b82:	2301      	movs	r3, #1
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 856b 	beq.w	8006664 <_dtoa_r+0xbac>
 8005b8e:	4883      	ldr	r0, [pc, #524]	; (8005d9c <_dtoa_r+0x2e4>)
 8005b90:	6018      	str	r0, [r3, #0]
 8005b92:	1e43      	subs	r3, r0, #1
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	e7df      	b.n	8005b58 <_dtoa_r+0xa0>
 8005b98:	ec4b ab10 	vmov	d0, sl, fp
 8005b9c:	aa10      	add	r2, sp, #64	; 0x40
 8005b9e:	a911      	add	r1, sp, #68	; 0x44
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f001 f8b9 	bl	8006d18 <__d2b>
 8005ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005baa:	ee08 0a10 	vmov	s16, r0
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	f000 8084 	beq.w	8005cbc <_dtoa_r+0x204>
 8005bb4:	ee19 3a90 	vmov	r3, s19
 8005bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bc0:	4656      	mov	r6, sl
 8005bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005bce:	4b74      	ldr	r3, [pc, #464]	; (8005da0 <_dtoa_r+0x2e8>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa fb77 	bl	80002c8 <__aeabi_dsub>
 8005bda:	a365      	add	r3, pc, #404	; (adr r3, 8005d70 <_dtoa_r+0x2b8>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f7fa fd2a 	bl	8000638 <__aeabi_dmul>
 8005be4:	a364      	add	r3, pc, #400	; (adr r3, 8005d78 <_dtoa_r+0x2c0>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fb6f 	bl	80002cc <__adddf3>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	460f      	mov	r7, r1
 8005bf4:	f7fa fcb6 	bl	8000564 <__aeabi_i2d>
 8005bf8:	a361      	add	r3, pc, #388	; (adr r3, 8005d80 <_dtoa_r+0x2c8>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f7fa fd1b 	bl	8000638 <__aeabi_dmul>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4630      	mov	r0, r6
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f7fa fb5f 	bl	80002cc <__adddf3>
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460f      	mov	r7, r1
 8005c12:	f7fa ffc1 	bl	8000b98 <__aeabi_d2iz>
 8005c16:	2200      	movs	r2, #0
 8005c18:	9000      	str	r0, [sp, #0]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4639      	mov	r1, r7
 8005c20:	f7fa ff7c 	bl	8000b1c <__aeabi_dcmplt>
 8005c24:	b150      	cbz	r0, 8005c3c <_dtoa_r+0x184>
 8005c26:	9800      	ldr	r0, [sp, #0]
 8005c28:	f7fa fc9c 	bl	8000564 <__aeabi_i2d>
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	463b      	mov	r3, r7
 8005c30:	f7fa ff6a 	bl	8000b08 <__aeabi_dcmpeq>
 8005c34:	b910      	cbnz	r0, 8005c3c <_dtoa_r+0x184>
 8005c36:	9b00      	ldr	r3, [sp, #0]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	9b00      	ldr	r3, [sp, #0]
 8005c3e:	2b16      	cmp	r3, #22
 8005c40:	d85a      	bhi.n	8005cf8 <_dtoa_r+0x240>
 8005c42:	9a00      	ldr	r2, [sp, #0]
 8005c44:	4b57      	ldr	r3, [pc, #348]	; (8005da4 <_dtoa_r+0x2ec>)
 8005c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	ec51 0b19 	vmov	r0, r1, d9
 8005c52:	f7fa ff63 	bl	8000b1c <__aeabi_dcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d050      	beq.n	8005cfc <_dtoa_r+0x244>
 8005c5a:	9b00      	ldr	r3, [sp, #0]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	2300      	movs	r3, #0
 8005c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c66:	1b5d      	subs	r5, r3, r5
 8005c68:	1e6b      	subs	r3, r5, #1
 8005c6a:	9305      	str	r3, [sp, #20]
 8005c6c:	bf45      	ittet	mi
 8005c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c72:	9304      	strmi	r3, [sp, #16]
 8005c74:	2300      	movpl	r3, #0
 8005c76:	2300      	movmi	r3, #0
 8005c78:	bf4c      	ite	mi
 8005c7a:	9305      	strmi	r3, [sp, #20]
 8005c7c:	9304      	strpl	r3, [sp, #16]
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db3d      	blt.n	8005d00 <_dtoa_r+0x248>
 8005c84:	9b05      	ldr	r3, [sp, #20]
 8005c86:	9a00      	ldr	r2, [sp, #0]
 8005c88:	920a      	str	r2, [sp, #40]	; 0x28
 8005c8a:	4413      	add	r3, r2
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	9b06      	ldr	r3, [sp, #24]
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	f200 8089 	bhi.w	8005dac <_dtoa_r+0x2f4>
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	bfc4      	itt	gt
 8005c9e:	3b04      	subgt	r3, #4
 8005ca0:	9306      	strgt	r3, [sp, #24]
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ca8:	bfcc      	ite	gt
 8005caa:	2500      	movgt	r5, #0
 8005cac:	2501      	movle	r5, #1
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	f200 8087 	bhi.w	8005dc2 <_dtoa_r+0x30a>
 8005cb4:	e8df f003 	tbb	[pc, r3]
 8005cb8:	59383a2d 	.word	0x59383a2d
 8005cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005cc0:	441d      	add	r5, r3
 8005cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	bfc1      	itttt	gt
 8005cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cda:	bfda      	itte	le
 8005cdc:	f1c3 0320 	rsble	r3, r3, #32
 8005ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ce4:	4318      	orrgt	r0, r3
 8005ce6:	f7fa fc2d 	bl	8000544 <__aeabi_ui2d>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4606      	mov	r6, r0
 8005cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005cf2:	3d01      	subs	r5, #1
 8005cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8005cf6:	e76a      	b.n	8005bce <_dtoa_r+0x116>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e7b2      	b.n	8005c62 <_dtoa_r+0x1aa>
 8005cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cfe:	e7b1      	b.n	8005c64 <_dtoa_r+0x1ac>
 8005d00:	9b04      	ldr	r3, [sp, #16]
 8005d02:	9a00      	ldr	r2, [sp, #0]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	4253      	negs	r3, r2
 8005d0a:	9307      	str	r3, [sp, #28]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d10:	e7bf      	b.n	8005c92 <_dtoa_r+0x1da>
 8005d12:	2300      	movs	r3, #0
 8005d14:	9308      	str	r3, [sp, #32]
 8005d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dc55      	bgt.n	8005dc8 <_dtoa_r+0x310>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d22:	461a      	mov	r2, r3
 8005d24:	9209      	str	r2, [sp, #36]	; 0x24
 8005d26:	e00c      	b.n	8005d42 <_dtoa_r+0x28a>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e7f3      	b.n	8005d14 <_dtoa_r+0x25c>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d30:	9308      	str	r3, [sp, #32]
 8005d32:	9b00      	ldr	r3, [sp, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	9303      	str	r3, [sp, #12]
 8005d3e:	bfb8      	it	lt
 8005d40:	2301      	movlt	r3, #1
 8005d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d44:	2200      	movs	r2, #0
 8005d46:	6042      	str	r2, [r0, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	f102 0614 	add.w	r6, r2, #20
 8005d4e:	429e      	cmp	r6, r3
 8005d50:	6841      	ldr	r1, [r0, #4]
 8005d52:	d93d      	bls.n	8005dd0 <_dtoa_r+0x318>
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 fcb7 	bl	80066c8 <_Balloc>
 8005d5a:	9001      	str	r0, [sp, #4]
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d13b      	bne.n	8005dd8 <_dtoa_r+0x320>
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <_dtoa_r+0x2f0>)
 8005d62:	4602      	mov	r2, r0
 8005d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d68:	e6c0      	b.n	8005aec <_dtoa_r+0x34>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7df      	b.n	8005d2e <_dtoa_r+0x276>
 8005d6e:	bf00      	nop
 8005d70:	636f4361 	.word	0x636f4361
 8005d74:	3fd287a7 	.word	0x3fd287a7
 8005d78:	8b60c8b3 	.word	0x8b60c8b3
 8005d7c:	3fc68a28 	.word	0x3fc68a28
 8005d80:	509f79fb 	.word	0x509f79fb
 8005d84:	3fd34413 	.word	0x3fd34413
 8005d88:	08007f05 	.word	0x08007f05
 8005d8c:	08007f1c 	.word	0x08007f1c
 8005d90:	7ff00000 	.word	0x7ff00000
 8005d94:	08007f01 	.word	0x08007f01
 8005d98:	08007ef8 	.word	0x08007ef8
 8005d9c:	08007ed5 	.word	0x08007ed5
 8005da0:	3ff80000 	.word	0x3ff80000
 8005da4:	08008010 	.word	0x08008010
 8005da8:	08007f77 	.word	0x08007f77
 8005dac:	2501      	movs	r5, #1
 8005dae:	2300      	movs	r3, #0
 8005db0:	9306      	str	r3, [sp, #24]
 8005db2:	9508      	str	r5, [sp, #32]
 8005db4:	f04f 33ff 	mov.w	r3, #4294967295
 8005db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2312      	movs	r3, #18
 8005dc0:	e7b0      	b.n	8005d24 <_dtoa_r+0x26c>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	9308      	str	r3, [sp, #32]
 8005dc6:	e7f5      	b.n	8005db4 <_dtoa_r+0x2fc>
 8005dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dce:	e7b8      	b.n	8005d42 <_dtoa_r+0x28a>
 8005dd0:	3101      	adds	r1, #1
 8005dd2:	6041      	str	r1, [r0, #4]
 8005dd4:	0052      	lsls	r2, r2, #1
 8005dd6:	e7b8      	b.n	8005d4a <_dtoa_r+0x292>
 8005dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dda:	9a01      	ldr	r2, [sp, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	2b0e      	cmp	r3, #14
 8005de2:	f200 809d 	bhi.w	8005f20 <_dtoa_r+0x468>
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	f000 809a 	beq.w	8005f20 <_dtoa_r+0x468>
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd32      	ble.n	8005e58 <_dtoa_r+0x3a0>
 8005df2:	4ab7      	ldr	r2, [pc, #732]	; (80060d0 <_dtoa_r+0x618>)
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e00:	9b00      	ldr	r3, [sp, #0]
 8005e02:	05d8      	lsls	r0, r3, #23
 8005e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e08:	d516      	bpl.n	8005e38 <_dtoa_r+0x380>
 8005e0a:	4bb2      	ldr	r3, [pc, #712]	; (80060d4 <_dtoa_r+0x61c>)
 8005e0c:	ec51 0b19 	vmov	r0, r1, d9
 8005e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e14:	f7fa fd3a 	bl	800088c <__aeabi_ddiv>
 8005e18:	f007 070f 	and.w	r7, r7, #15
 8005e1c:	4682      	mov	sl, r0
 8005e1e:	468b      	mov	fp, r1
 8005e20:	2503      	movs	r5, #3
 8005e22:	4eac      	ldr	r6, [pc, #688]	; (80060d4 <_dtoa_r+0x61c>)
 8005e24:	b957      	cbnz	r7, 8005e3c <_dtoa_r+0x384>
 8005e26:	4642      	mov	r2, r8
 8005e28:	464b      	mov	r3, r9
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	f7fa fd2d 	bl	800088c <__aeabi_ddiv>
 8005e32:	4682      	mov	sl, r0
 8005e34:	468b      	mov	fp, r1
 8005e36:	e028      	b.n	8005e8a <_dtoa_r+0x3d2>
 8005e38:	2502      	movs	r5, #2
 8005e3a:	e7f2      	b.n	8005e22 <_dtoa_r+0x36a>
 8005e3c:	07f9      	lsls	r1, r7, #31
 8005e3e:	d508      	bpl.n	8005e52 <_dtoa_r+0x39a>
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e48:	f7fa fbf6 	bl	8000638 <__aeabi_dmul>
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	4680      	mov	r8, r0
 8005e50:	4689      	mov	r9, r1
 8005e52:	107f      	asrs	r7, r7, #1
 8005e54:	3608      	adds	r6, #8
 8005e56:	e7e5      	b.n	8005e24 <_dtoa_r+0x36c>
 8005e58:	f000 809b 	beq.w	8005f92 <_dtoa_r+0x4da>
 8005e5c:	9b00      	ldr	r3, [sp, #0]
 8005e5e:	4f9d      	ldr	r7, [pc, #628]	; (80060d4 <_dtoa_r+0x61c>)
 8005e60:	425e      	negs	r6, r3
 8005e62:	4b9b      	ldr	r3, [pc, #620]	; (80060d0 <_dtoa_r+0x618>)
 8005e64:	f006 020f 	and.w	r2, r6, #15
 8005e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	ec51 0b19 	vmov	r0, r1, d9
 8005e74:	f7fa fbe0 	bl	8000638 <__aeabi_dmul>
 8005e78:	1136      	asrs	r6, r6, #4
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	468b      	mov	fp, r1
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2502      	movs	r5, #2
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	d17a      	bne.n	8005f7c <_dtoa_r+0x4c4>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1d3      	bne.n	8005e32 <_dtoa_r+0x37a>
 8005e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8082 	beq.w	8005f96 <_dtoa_r+0x4de>
 8005e92:	4b91      	ldr	r3, [pc, #580]	; (80060d8 <_dtoa_r+0x620>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	4650      	mov	r0, sl
 8005e98:	4659      	mov	r1, fp
 8005e9a:	f7fa fe3f 	bl	8000b1c <__aeabi_dcmplt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d079      	beq.n	8005f96 <_dtoa_r+0x4de>
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d076      	beq.n	8005f96 <_dtoa_r+0x4de>
 8005ea8:	9b02      	ldr	r3, [sp, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dd36      	ble.n	8005f1c <_dtoa_r+0x464>
 8005eae:	9b00      	ldr	r3, [sp, #0]
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	1e5f      	subs	r7, r3, #1
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	4b88      	ldr	r3, [pc, #544]	; (80060dc <_dtoa_r+0x624>)
 8005eba:	f7fa fbbd 	bl	8000638 <__aeabi_dmul>
 8005ebe:	9e02      	ldr	r6, [sp, #8]
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	468b      	mov	fp, r1
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7fa fb4c 	bl	8000564 <__aeabi_i2d>
 8005ecc:	4652      	mov	r2, sl
 8005ece:	465b      	mov	r3, fp
 8005ed0:	f7fa fbb2 	bl	8000638 <__aeabi_dmul>
 8005ed4:	4b82      	ldr	r3, [pc, #520]	; (80060e0 <_dtoa_r+0x628>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f7fa f9f8 	bl	80002cc <__adddf3>
 8005edc:	46d0      	mov	r8, sl
 8005ede:	46d9      	mov	r9, fp
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	d158      	bne.n	8005f9c <_dtoa_r+0x4e4>
 8005eea:	4b7e      	ldr	r3, [pc, #504]	; (80060e4 <_dtoa_r+0x62c>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	4640      	mov	r0, r8
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	f7fa f9e9 	bl	80002c8 <__aeabi_dsub>
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	465b      	mov	r3, fp
 8005efa:	4680      	mov	r8, r0
 8005efc:	4689      	mov	r9, r1
 8005efe:	f7fa fe2b 	bl	8000b58 <__aeabi_dcmpgt>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f040 8295 	bne.w	8006432 <_dtoa_r+0x97a>
 8005f08:	4652      	mov	r2, sl
 8005f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4649      	mov	r1, r9
 8005f12:	f7fa fe03 	bl	8000b1c <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f040 8289 	bne.w	800642e <_dtoa_r+0x976>
 8005f1c:	ec5b ab19 	vmov	sl, fp, d9
 8005f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f2c0 8148 	blt.w	80061b8 <_dtoa_r+0x700>
 8005f28:	9a00      	ldr	r2, [sp, #0]
 8005f2a:	2a0e      	cmp	r2, #14
 8005f2c:	f300 8144 	bgt.w	80061b8 <_dtoa_r+0x700>
 8005f30:	4b67      	ldr	r3, [pc, #412]	; (80060d0 <_dtoa_r+0x618>)
 8005f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f280 80d5 	bge.w	80060ec <_dtoa_r+0x634>
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f300 80d1 	bgt.w	80060ec <_dtoa_r+0x634>
 8005f4a:	f040 826f 	bne.w	800642c <_dtoa_r+0x974>
 8005f4e:	4b65      	ldr	r3, [pc, #404]	; (80060e4 <_dtoa_r+0x62c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	4640      	mov	r0, r8
 8005f54:	4649      	mov	r1, r9
 8005f56:	f7fa fb6f 	bl	8000638 <__aeabi_dmul>
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	f7fa fdf1 	bl	8000b44 <__aeabi_dcmpge>
 8005f62:	9e03      	ldr	r6, [sp, #12]
 8005f64:	4637      	mov	r7, r6
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f040 8245 	bne.w	80063f6 <_dtoa_r+0x93e>
 8005f6c:	9d01      	ldr	r5, [sp, #4]
 8005f6e:	2331      	movs	r3, #49	; 0x31
 8005f70:	f805 3b01 	strb.w	r3, [r5], #1
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	e240      	b.n	80063fe <_dtoa_r+0x946>
 8005f7c:	07f2      	lsls	r2, r6, #31
 8005f7e:	d505      	bpl.n	8005f8c <_dtoa_r+0x4d4>
 8005f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f84:	f7fa fb58 	bl	8000638 <__aeabi_dmul>
 8005f88:	3501      	adds	r5, #1
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	1076      	asrs	r6, r6, #1
 8005f8e:	3708      	adds	r7, #8
 8005f90:	e777      	b.n	8005e82 <_dtoa_r+0x3ca>
 8005f92:	2502      	movs	r5, #2
 8005f94:	e779      	b.n	8005e8a <_dtoa_r+0x3d2>
 8005f96:	9f00      	ldr	r7, [sp, #0]
 8005f98:	9e03      	ldr	r6, [sp, #12]
 8005f9a:	e794      	b.n	8005ec6 <_dtoa_r+0x40e>
 8005f9c:	9901      	ldr	r1, [sp, #4]
 8005f9e:	4b4c      	ldr	r3, [pc, #304]	; (80060d0 <_dtoa_r+0x618>)
 8005fa0:	4431      	add	r1, r6
 8005fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8005fa4:	9908      	ldr	r1, [sp, #32]
 8005fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	d043      	beq.n	800603a <_dtoa_r+0x582>
 8005fb2:	494d      	ldr	r1, [pc, #308]	; (80060e8 <_dtoa_r+0x630>)
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7fa fc69 	bl	800088c <__aeabi_ddiv>
 8005fba:	4652      	mov	r2, sl
 8005fbc:	465b      	mov	r3, fp
 8005fbe:	f7fa f983 	bl	80002c8 <__aeabi_dsub>
 8005fc2:	9d01      	ldr	r5, [sp, #4]
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f7fa fde4 	bl	8000b98 <__aeabi_d2iz>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	f7fa fac7 	bl	8000564 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4649      	mov	r1, r9
 8005fde:	f7fa f973 	bl	80002c8 <__aeabi_dsub>
 8005fe2:	3630      	adds	r6, #48	; 0x30
 8005fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	465b      	mov	r3, fp
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	f7fa fd94 	bl	8000b1c <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d163      	bne.n	80060c0 <_dtoa_r+0x608>
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4936      	ldr	r1, [pc, #216]	; (80060d8 <_dtoa_r+0x620>)
 8005ffe:	2000      	movs	r0, #0
 8006000:	f7fa f962 	bl	80002c8 <__aeabi_dsub>
 8006004:	4652      	mov	r2, sl
 8006006:	465b      	mov	r3, fp
 8006008:	f7fa fd88 	bl	8000b1c <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 80b5 	bne.w	800617c <_dtoa_r+0x6c4>
 8006012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006014:	429d      	cmp	r5, r3
 8006016:	d081      	beq.n	8005f1c <_dtoa_r+0x464>
 8006018:	4b30      	ldr	r3, [pc, #192]	; (80060dc <_dtoa_r+0x624>)
 800601a:	2200      	movs	r2, #0
 800601c:	4650      	mov	r0, sl
 800601e:	4659      	mov	r1, fp
 8006020:	f7fa fb0a 	bl	8000638 <__aeabi_dmul>
 8006024:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <_dtoa_r+0x624>)
 8006026:	4682      	mov	sl, r0
 8006028:	468b      	mov	fp, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	2200      	movs	r2, #0
 8006030:	f7fa fb02 	bl	8000638 <__aeabi_dmul>
 8006034:	4680      	mov	r8, r0
 8006036:	4689      	mov	r9, r1
 8006038:	e7c6      	b.n	8005fc8 <_dtoa_r+0x510>
 800603a:	4650      	mov	r0, sl
 800603c:	4659      	mov	r1, fp
 800603e:	f7fa fafb 	bl	8000638 <__aeabi_dmul>
 8006042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006044:	9d01      	ldr	r5, [sp, #4]
 8006046:	930f      	str	r3, [sp, #60]	; 0x3c
 8006048:	4682      	mov	sl, r0
 800604a:	468b      	mov	fp, r1
 800604c:	4649      	mov	r1, r9
 800604e:	4640      	mov	r0, r8
 8006050:	f7fa fda2 	bl	8000b98 <__aeabi_d2iz>
 8006054:	4606      	mov	r6, r0
 8006056:	f7fa fa85 	bl	8000564 <__aeabi_i2d>
 800605a:	3630      	adds	r6, #48	; 0x30
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa f930 	bl	80002c8 <__aeabi_dsub>
 8006068:	f805 6b01 	strb.w	r6, [r5], #1
 800606c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606e:	429d      	cmp	r5, r3
 8006070:	4680      	mov	r8, r0
 8006072:	4689      	mov	r9, r1
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	d124      	bne.n	80060c4 <_dtoa_r+0x60c>
 800607a:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <_dtoa_r+0x630>)
 800607c:	4650      	mov	r0, sl
 800607e:	4659      	mov	r1, fp
 8006080:	f7fa f924 	bl	80002cc <__adddf3>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	f7fa fd64 	bl	8000b58 <__aeabi_dcmpgt>
 8006090:	2800      	cmp	r0, #0
 8006092:	d173      	bne.n	800617c <_dtoa_r+0x6c4>
 8006094:	4652      	mov	r2, sl
 8006096:	465b      	mov	r3, fp
 8006098:	4913      	ldr	r1, [pc, #76]	; (80060e8 <_dtoa_r+0x630>)
 800609a:	2000      	movs	r0, #0
 800609c:	f7fa f914 	bl	80002c8 <__aeabi_dsub>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4640      	mov	r0, r8
 80060a6:	4649      	mov	r1, r9
 80060a8:	f7fa fd38 	bl	8000b1c <__aeabi_dcmplt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	f43f af35 	beq.w	8005f1c <_dtoa_r+0x464>
 80060b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060b4:	1e6b      	subs	r3, r5, #1
 80060b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d0f8      	beq.n	80060b2 <_dtoa_r+0x5fa>
 80060c0:	9700      	str	r7, [sp, #0]
 80060c2:	e049      	b.n	8006158 <_dtoa_r+0x6a0>
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <_dtoa_r+0x624>)
 80060c6:	f7fa fab7 	bl	8000638 <__aeabi_dmul>
 80060ca:	4680      	mov	r8, r0
 80060cc:	4689      	mov	r9, r1
 80060ce:	e7bd      	b.n	800604c <_dtoa_r+0x594>
 80060d0:	08008010 	.word	0x08008010
 80060d4:	08007fe8 	.word	0x08007fe8
 80060d8:	3ff00000 	.word	0x3ff00000
 80060dc:	40240000 	.word	0x40240000
 80060e0:	401c0000 	.word	0x401c0000
 80060e4:	40140000 	.word	0x40140000
 80060e8:	3fe00000 	.word	0x3fe00000
 80060ec:	9d01      	ldr	r5, [sp, #4]
 80060ee:	4656      	mov	r6, sl
 80060f0:	465f      	mov	r7, fp
 80060f2:	4642      	mov	r2, r8
 80060f4:	464b      	mov	r3, r9
 80060f6:	4630      	mov	r0, r6
 80060f8:	4639      	mov	r1, r7
 80060fa:	f7fa fbc7 	bl	800088c <__aeabi_ddiv>
 80060fe:	f7fa fd4b 	bl	8000b98 <__aeabi_d2iz>
 8006102:	4682      	mov	sl, r0
 8006104:	f7fa fa2e 	bl	8000564 <__aeabi_i2d>
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	f7fa fa94 	bl	8000638 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800611c:	f7fa f8d4 	bl	80002c8 <__aeabi_dsub>
 8006120:	f805 6b01 	strb.w	r6, [r5], #1
 8006124:	9e01      	ldr	r6, [sp, #4]
 8006126:	9f03      	ldr	r7, [sp, #12]
 8006128:	1bae      	subs	r6, r5, r6
 800612a:	42b7      	cmp	r7, r6
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	d135      	bne.n	800619e <_dtoa_r+0x6e6>
 8006132:	f7fa f8cb 	bl	80002cc <__adddf3>
 8006136:	4642      	mov	r2, r8
 8006138:	464b      	mov	r3, r9
 800613a:	4606      	mov	r6, r0
 800613c:	460f      	mov	r7, r1
 800613e:	f7fa fd0b 	bl	8000b58 <__aeabi_dcmpgt>
 8006142:	b9d0      	cbnz	r0, 800617a <_dtoa_r+0x6c2>
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8006150:	b110      	cbz	r0, 8006158 <_dtoa_r+0x6a0>
 8006152:	f01a 0f01 	tst.w	sl, #1
 8006156:	d110      	bne.n	800617a <_dtoa_r+0x6c2>
 8006158:	4620      	mov	r0, r4
 800615a:	ee18 1a10 	vmov	r1, s16
 800615e:	f000 faf3 	bl	8006748 <_Bfree>
 8006162:	2300      	movs	r3, #0
 8006164:	9800      	ldr	r0, [sp, #0]
 8006166:	702b      	strb	r3, [r5, #0]
 8006168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800616a:	3001      	adds	r0, #1
 800616c:	6018      	str	r0, [r3, #0]
 800616e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006170:	2b00      	cmp	r3, #0
 8006172:	f43f acf1 	beq.w	8005b58 <_dtoa_r+0xa0>
 8006176:	601d      	str	r5, [r3, #0]
 8006178:	e4ee      	b.n	8005b58 <_dtoa_r+0xa0>
 800617a:	9f00      	ldr	r7, [sp, #0]
 800617c:	462b      	mov	r3, r5
 800617e:	461d      	mov	r5, r3
 8006180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006184:	2a39      	cmp	r2, #57	; 0x39
 8006186:	d106      	bne.n	8006196 <_dtoa_r+0x6de>
 8006188:	9a01      	ldr	r2, [sp, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d1f7      	bne.n	800617e <_dtoa_r+0x6c6>
 800618e:	9901      	ldr	r1, [sp, #4]
 8006190:	2230      	movs	r2, #48	; 0x30
 8006192:	3701      	adds	r7, #1
 8006194:	700a      	strb	r2, [r1, #0]
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	3201      	adds	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	e790      	b.n	80060c0 <_dtoa_r+0x608>
 800619e:	4ba6      	ldr	r3, [pc, #664]	; (8006438 <_dtoa_r+0x980>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fa fa49 	bl	8000638 <__aeabi_dmul>
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	f7fa fcab 	bl	8000b08 <__aeabi_dcmpeq>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d09d      	beq.n	80060f2 <_dtoa_r+0x63a>
 80061b6:	e7cf      	b.n	8006158 <_dtoa_r+0x6a0>
 80061b8:	9a08      	ldr	r2, [sp, #32]
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	f000 80d7 	beq.w	800636e <_dtoa_r+0x8b6>
 80061c0:	9a06      	ldr	r2, [sp, #24]
 80061c2:	2a01      	cmp	r2, #1
 80061c4:	f300 80ba 	bgt.w	800633c <_dtoa_r+0x884>
 80061c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	f000 80b2 	beq.w	8006334 <_dtoa_r+0x87c>
 80061d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061d4:	9e07      	ldr	r6, [sp, #28]
 80061d6:	9d04      	ldr	r5, [sp, #16]
 80061d8:	9a04      	ldr	r2, [sp, #16]
 80061da:	441a      	add	r2, r3
 80061dc:	9204      	str	r2, [sp, #16]
 80061de:	9a05      	ldr	r2, [sp, #20]
 80061e0:	2101      	movs	r1, #1
 80061e2:	441a      	add	r2, r3
 80061e4:	4620      	mov	r0, r4
 80061e6:	9205      	str	r2, [sp, #20]
 80061e8:	f000 fb66 	bl	80068b8 <__i2b>
 80061ec:	4607      	mov	r7, r0
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	dd0c      	ble.n	800620c <_dtoa_r+0x754>
 80061f2:	9b05      	ldr	r3, [sp, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dd09      	ble.n	800620c <_dtoa_r+0x754>
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	9a04      	ldr	r2, [sp, #16]
 80061fc:	bfa8      	it	ge
 80061fe:	462b      	movge	r3, r5
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	9204      	str	r2, [sp, #16]
 8006204:	9a05      	ldr	r2, [sp, #20]
 8006206:	1aed      	subs	r5, r5, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	b31b      	cbz	r3, 8006258 <_dtoa_r+0x7a0>
 8006210:	9b08      	ldr	r3, [sp, #32]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80af 	beq.w	8006376 <_dtoa_r+0x8be>
 8006218:	2e00      	cmp	r6, #0
 800621a:	dd13      	ble.n	8006244 <_dtoa_r+0x78c>
 800621c:	4639      	mov	r1, r7
 800621e:	4632      	mov	r2, r6
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fc09 	bl	8006a38 <__pow5mult>
 8006226:	ee18 2a10 	vmov	r2, s16
 800622a:	4601      	mov	r1, r0
 800622c:	4607      	mov	r7, r0
 800622e:	4620      	mov	r0, r4
 8006230:	f000 fb58 	bl	80068e4 <__multiply>
 8006234:	ee18 1a10 	vmov	r1, s16
 8006238:	4680      	mov	r8, r0
 800623a:	4620      	mov	r0, r4
 800623c:	f000 fa84 	bl	8006748 <_Bfree>
 8006240:	ee08 8a10 	vmov	s16, r8
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	1b9a      	subs	r2, r3, r6
 8006248:	d006      	beq.n	8006258 <_dtoa_r+0x7a0>
 800624a:	ee18 1a10 	vmov	r1, s16
 800624e:	4620      	mov	r0, r4
 8006250:	f000 fbf2 	bl	8006a38 <__pow5mult>
 8006254:	ee08 0a10 	vmov	s16, r0
 8006258:	2101      	movs	r1, #1
 800625a:	4620      	mov	r0, r4
 800625c:	f000 fb2c 	bl	80068b8 <__i2b>
 8006260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	4606      	mov	r6, r0
 8006266:	f340 8088 	ble.w	800637a <_dtoa_r+0x8c2>
 800626a:	461a      	mov	r2, r3
 800626c:	4601      	mov	r1, r0
 800626e:	4620      	mov	r0, r4
 8006270:	f000 fbe2 	bl	8006a38 <__pow5mult>
 8006274:	9b06      	ldr	r3, [sp, #24]
 8006276:	2b01      	cmp	r3, #1
 8006278:	4606      	mov	r6, r0
 800627a:	f340 8081 	ble.w	8006380 <_dtoa_r+0x8c8>
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	6933      	ldr	r3, [r6, #16]
 8006284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006288:	6918      	ldr	r0, [r3, #16]
 800628a:	f000 fac5 	bl	8006818 <__hi0bits>
 800628e:	f1c0 0020 	rsb	r0, r0, #32
 8006292:	9b05      	ldr	r3, [sp, #20]
 8006294:	4418      	add	r0, r3
 8006296:	f010 001f 	ands.w	r0, r0, #31
 800629a:	f000 8092 	beq.w	80063c2 <_dtoa_r+0x90a>
 800629e:	f1c0 0320 	rsb	r3, r0, #32
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	f340 808a 	ble.w	80063bc <_dtoa_r+0x904>
 80062a8:	f1c0 001c 	rsb	r0, r0, #28
 80062ac:	9b04      	ldr	r3, [sp, #16]
 80062ae:	4403      	add	r3, r0
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	4403      	add	r3, r0
 80062b6:	4405      	add	r5, r0
 80062b8:	9305      	str	r3, [sp, #20]
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dd07      	ble.n	80062d0 <_dtoa_r+0x818>
 80062c0:	ee18 1a10 	vmov	r1, s16
 80062c4:	461a      	mov	r2, r3
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 fc10 	bl	8006aec <__lshift>
 80062cc:	ee08 0a10 	vmov	s16, r0
 80062d0:	9b05      	ldr	r3, [sp, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dd05      	ble.n	80062e2 <_dtoa_r+0x82a>
 80062d6:	4631      	mov	r1, r6
 80062d8:	461a      	mov	r2, r3
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fc06 	bl	8006aec <__lshift>
 80062e0:	4606      	mov	r6, r0
 80062e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d06e      	beq.n	80063c6 <_dtoa_r+0x90e>
 80062e8:	ee18 0a10 	vmov	r0, s16
 80062ec:	4631      	mov	r1, r6
 80062ee:	f000 fc6d 	bl	8006bcc <__mcmp>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	da67      	bge.n	80063c6 <_dtoa_r+0x90e>
 80062f6:	9b00      	ldr	r3, [sp, #0]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	ee18 1a10 	vmov	r1, s16
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	220a      	movs	r2, #10
 8006302:	2300      	movs	r3, #0
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fa41 	bl	800678c <__multadd>
 800630a:	9b08      	ldr	r3, [sp, #32]
 800630c:	ee08 0a10 	vmov	s16, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 81b1 	beq.w	8006678 <_dtoa_r+0xbc0>
 8006316:	2300      	movs	r3, #0
 8006318:	4639      	mov	r1, r7
 800631a:	220a      	movs	r2, #10
 800631c:	4620      	mov	r0, r4
 800631e:	f000 fa35 	bl	800678c <__multadd>
 8006322:	9b02      	ldr	r3, [sp, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	4607      	mov	r7, r0
 8006328:	f300 808e 	bgt.w	8006448 <_dtoa_r+0x990>
 800632c:	9b06      	ldr	r3, [sp, #24]
 800632e:	2b02      	cmp	r3, #2
 8006330:	dc51      	bgt.n	80063d6 <_dtoa_r+0x91e>
 8006332:	e089      	b.n	8006448 <_dtoa_r+0x990>
 8006334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800633a:	e74b      	b.n	80061d4 <_dtoa_r+0x71c>
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	1e5e      	subs	r6, r3, #1
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	42b3      	cmp	r3, r6
 8006344:	bfbf      	itttt	lt
 8006346:	9b07      	ldrlt	r3, [sp, #28]
 8006348:	9607      	strlt	r6, [sp, #28]
 800634a:	1af2      	sublt	r2, r6, r3
 800634c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800634e:	bfb6      	itet	lt
 8006350:	189b      	addlt	r3, r3, r2
 8006352:	1b9e      	subge	r6, r3, r6
 8006354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	bfb8      	it	lt
 800635a:	2600      	movlt	r6, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb7      	itett	lt
 8006360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006368:	1a9d      	sublt	r5, r3, r2
 800636a:	2300      	movlt	r3, #0
 800636c:	e734      	b.n	80061d8 <_dtoa_r+0x720>
 800636e:	9e07      	ldr	r6, [sp, #28]
 8006370:	9d04      	ldr	r5, [sp, #16]
 8006372:	9f08      	ldr	r7, [sp, #32]
 8006374:	e73b      	b.n	80061ee <_dtoa_r+0x736>
 8006376:	9a07      	ldr	r2, [sp, #28]
 8006378:	e767      	b.n	800624a <_dtoa_r+0x792>
 800637a:	9b06      	ldr	r3, [sp, #24]
 800637c:	2b01      	cmp	r3, #1
 800637e:	dc18      	bgt.n	80063b2 <_dtoa_r+0x8fa>
 8006380:	f1ba 0f00 	cmp.w	sl, #0
 8006384:	d115      	bne.n	80063b2 <_dtoa_r+0x8fa>
 8006386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800638a:	b993      	cbnz	r3, 80063b2 <_dtoa_r+0x8fa>
 800638c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006390:	0d1b      	lsrs	r3, r3, #20
 8006392:	051b      	lsls	r3, r3, #20
 8006394:	b183      	cbz	r3, 80063b8 <_dtoa_r+0x900>
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	3301      	adds	r3, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	9b05      	ldr	r3, [sp, #20]
 800639e:	3301      	adds	r3, #1
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	f04f 0801 	mov.w	r8, #1
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f af6a 	bne.w	8006282 <_dtoa_r+0x7ca>
 80063ae:	2001      	movs	r0, #1
 80063b0:	e76f      	b.n	8006292 <_dtoa_r+0x7da>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	e7f6      	b.n	80063a6 <_dtoa_r+0x8ee>
 80063b8:	4698      	mov	r8, r3
 80063ba:	e7f4      	b.n	80063a6 <_dtoa_r+0x8ee>
 80063bc:	f43f af7d 	beq.w	80062ba <_dtoa_r+0x802>
 80063c0:	4618      	mov	r0, r3
 80063c2:	301c      	adds	r0, #28
 80063c4:	e772      	b.n	80062ac <_dtoa_r+0x7f4>
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc37      	bgt.n	800643c <_dtoa_r+0x984>
 80063cc:	9b06      	ldr	r3, [sp, #24]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	dd34      	ble.n	800643c <_dtoa_r+0x984>
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	9302      	str	r3, [sp, #8]
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	b96b      	cbnz	r3, 80063f6 <_dtoa_r+0x93e>
 80063da:	4631      	mov	r1, r6
 80063dc:	2205      	movs	r2, #5
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 f9d4 	bl	800678c <__multadd>
 80063e4:	4601      	mov	r1, r0
 80063e6:	4606      	mov	r6, r0
 80063e8:	ee18 0a10 	vmov	r0, s16
 80063ec:	f000 fbee 	bl	8006bcc <__mcmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f73f adbb 	bgt.w	8005f6c <_dtoa_r+0x4b4>
 80063f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f8:	9d01      	ldr	r5, [sp, #4]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	f04f 0800 	mov.w	r8, #0
 8006402:	4631      	mov	r1, r6
 8006404:	4620      	mov	r0, r4
 8006406:	f000 f99f 	bl	8006748 <_Bfree>
 800640a:	2f00      	cmp	r7, #0
 800640c:	f43f aea4 	beq.w	8006158 <_dtoa_r+0x6a0>
 8006410:	f1b8 0f00 	cmp.w	r8, #0
 8006414:	d005      	beq.n	8006422 <_dtoa_r+0x96a>
 8006416:	45b8      	cmp	r8, r7
 8006418:	d003      	beq.n	8006422 <_dtoa_r+0x96a>
 800641a:	4641      	mov	r1, r8
 800641c:	4620      	mov	r0, r4
 800641e:	f000 f993 	bl	8006748 <_Bfree>
 8006422:	4639      	mov	r1, r7
 8006424:	4620      	mov	r0, r4
 8006426:	f000 f98f 	bl	8006748 <_Bfree>
 800642a:	e695      	b.n	8006158 <_dtoa_r+0x6a0>
 800642c:	2600      	movs	r6, #0
 800642e:	4637      	mov	r7, r6
 8006430:	e7e1      	b.n	80063f6 <_dtoa_r+0x93e>
 8006432:	9700      	str	r7, [sp, #0]
 8006434:	4637      	mov	r7, r6
 8006436:	e599      	b.n	8005f6c <_dtoa_r+0x4b4>
 8006438:	40240000 	.word	0x40240000
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80ca 	beq.w	80065d8 <_dtoa_r+0xb20>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	9302      	str	r3, [sp, #8]
 8006448:	2d00      	cmp	r5, #0
 800644a:	dd05      	ble.n	8006458 <_dtoa_r+0x9a0>
 800644c:	4639      	mov	r1, r7
 800644e:	462a      	mov	r2, r5
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fb4b 	bl	8006aec <__lshift>
 8006456:	4607      	mov	r7, r0
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d05b      	beq.n	8006516 <_dtoa_r+0xa5e>
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4620      	mov	r0, r4
 8006462:	f000 f931 	bl	80066c8 <_Balloc>
 8006466:	4605      	mov	r5, r0
 8006468:	b928      	cbnz	r0, 8006476 <_dtoa_r+0x9be>
 800646a:	4b87      	ldr	r3, [pc, #540]	; (8006688 <_dtoa_r+0xbd0>)
 800646c:	4602      	mov	r2, r0
 800646e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006472:	f7ff bb3b 	b.w	8005aec <_dtoa_r+0x34>
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	3202      	adds	r2, #2
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	f107 010c 	add.w	r1, r7, #12
 8006480:	300c      	adds	r0, #12
 8006482:	f000 f913 	bl	80066ac <memcpy>
 8006486:	2201      	movs	r2, #1
 8006488:	4629      	mov	r1, r5
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fb2e 	bl	8006aec <__lshift>
 8006490:	9b01      	ldr	r3, [sp, #4]
 8006492:	f103 0901 	add.w	r9, r3, #1
 8006496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800649a:	4413      	add	r3, r2
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	f00a 0301 	and.w	r3, sl, #1
 80064a2:	46b8      	mov	r8, r7
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	4607      	mov	r7, r0
 80064a8:	4631      	mov	r1, r6
 80064aa:	ee18 0a10 	vmov	r0, s16
 80064ae:	f7ff fa77 	bl	80059a0 <quorem>
 80064b2:	4641      	mov	r1, r8
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80064ba:	ee18 0a10 	vmov	r0, s16
 80064be:	f000 fb85 	bl	8006bcc <__mcmp>
 80064c2:	463a      	mov	r2, r7
 80064c4:	9003      	str	r0, [sp, #12]
 80064c6:	4631      	mov	r1, r6
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fb9b 	bl	8006c04 <__mdiff>
 80064ce:	68c2      	ldr	r2, [r0, #12]
 80064d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80064d4:	4605      	mov	r5, r0
 80064d6:	bb02      	cbnz	r2, 800651a <_dtoa_r+0xa62>
 80064d8:	4601      	mov	r1, r0
 80064da:	ee18 0a10 	vmov	r0, s16
 80064de:	f000 fb75 	bl	8006bcc <__mcmp>
 80064e2:	4602      	mov	r2, r0
 80064e4:	4629      	mov	r1, r5
 80064e6:	4620      	mov	r0, r4
 80064e8:	9207      	str	r2, [sp, #28]
 80064ea:	f000 f92d 	bl	8006748 <_Bfree>
 80064ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80064f2:	ea43 0102 	orr.w	r1, r3, r2
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	430b      	orrs	r3, r1
 80064fa:	464d      	mov	r5, r9
 80064fc:	d10f      	bne.n	800651e <_dtoa_r+0xa66>
 80064fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006502:	d02a      	beq.n	800655a <_dtoa_r+0xaa2>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd02      	ble.n	8006510 <_dtoa_r+0xa58>
 800650a:	9b02      	ldr	r3, [sp, #8]
 800650c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006510:	f88b a000 	strb.w	sl, [fp]
 8006514:	e775      	b.n	8006402 <_dtoa_r+0x94a>
 8006516:	4638      	mov	r0, r7
 8006518:	e7ba      	b.n	8006490 <_dtoa_r+0x9d8>
 800651a:	2201      	movs	r2, #1
 800651c:	e7e2      	b.n	80064e4 <_dtoa_r+0xa2c>
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	db04      	blt.n	800652e <_dtoa_r+0xa76>
 8006524:	9906      	ldr	r1, [sp, #24]
 8006526:	430b      	orrs	r3, r1
 8006528:	9904      	ldr	r1, [sp, #16]
 800652a:	430b      	orrs	r3, r1
 800652c:	d122      	bne.n	8006574 <_dtoa_r+0xabc>
 800652e:	2a00      	cmp	r2, #0
 8006530:	ddee      	ble.n	8006510 <_dtoa_r+0xa58>
 8006532:	ee18 1a10 	vmov	r1, s16
 8006536:	2201      	movs	r2, #1
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fad7 	bl	8006aec <__lshift>
 800653e:	4631      	mov	r1, r6
 8006540:	ee08 0a10 	vmov	s16, r0
 8006544:	f000 fb42 	bl	8006bcc <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	dc03      	bgt.n	8006554 <_dtoa_r+0xa9c>
 800654c:	d1e0      	bne.n	8006510 <_dtoa_r+0xa58>
 800654e:	f01a 0f01 	tst.w	sl, #1
 8006552:	d0dd      	beq.n	8006510 <_dtoa_r+0xa58>
 8006554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006558:	d1d7      	bne.n	800650a <_dtoa_r+0xa52>
 800655a:	2339      	movs	r3, #57	; 0x39
 800655c:	f88b 3000 	strb.w	r3, [fp]
 8006560:	462b      	mov	r3, r5
 8006562:	461d      	mov	r5, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800656a:	2a39      	cmp	r2, #57	; 0x39
 800656c:	d071      	beq.n	8006652 <_dtoa_r+0xb9a>
 800656e:	3201      	adds	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e746      	b.n	8006402 <_dtoa_r+0x94a>
 8006574:	2a00      	cmp	r2, #0
 8006576:	dd07      	ble.n	8006588 <_dtoa_r+0xad0>
 8006578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800657c:	d0ed      	beq.n	800655a <_dtoa_r+0xaa2>
 800657e:	f10a 0301 	add.w	r3, sl, #1
 8006582:	f88b 3000 	strb.w	r3, [fp]
 8006586:	e73c      	b.n	8006402 <_dtoa_r+0x94a>
 8006588:	9b05      	ldr	r3, [sp, #20]
 800658a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800658e:	4599      	cmp	r9, r3
 8006590:	d047      	beq.n	8006622 <_dtoa_r+0xb6a>
 8006592:	ee18 1a10 	vmov	r1, s16
 8006596:	2300      	movs	r3, #0
 8006598:	220a      	movs	r2, #10
 800659a:	4620      	mov	r0, r4
 800659c:	f000 f8f6 	bl	800678c <__multadd>
 80065a0:	45b8      	cmp	r8, r7
 80065a2:	ee08 0a10 	vmov	s16, r0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	f04f 020a 	mov.w	r2, #10
 80065ae:	4641      	mov	r1, r8
 80065b0:	4620      	mov	r0, r4
 80065b2:	d106      	bne.n	80065c2 <_dtoa_r+0xb0a>
 80065b4:	f000 f8ea 	bl	800678c <__multadd>
 80065b8:	4680      	mov	r8, r0
 80065ba:	4607      	mov	r7, r0
 80065bc:	f109 0901 	add.w	r9, r9, #1
 80065c0:	e772      	b.n	80064a8 <_dtoa_r+0x9f0>
 80065c2:	f000 f8e3 	bl	800678c <__multadd>
 80065c6:	4639      	mov	r1, r7
 80065c8:	4680      	mov	r8, r0
 80065ca:	2300      	movs	r3, #0
 80065cc:	220a      	movs	r2, #10
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 f8dc 	bl	800678c <__multadd>
 80065d4:	4607      	mov	r7, r0
 80065d6:	e7f1      	b.n	80065bc <_dtoa_r+0xb04>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	9d01      	ldr	r5, [sp, #4]
 80065de:	ee18 0a10 	vmov	r0, s16
 80065e2:	4631      	mov	r1, r6
 80065e4:	f7ff f9dc 	bl	80059a0 <quorem>
 80065e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	f805 ab01 	strb.w	sl, [r5], #1
 80065f2:	1aea      	subs	r2, r5, r3
 80065f4:	9b02      	ldr	r3, [sp, #8]
 80065f6:	4293      	cmp	r3, r2
 80065f8:	dd09      	ble.n	800660e <_dtoa_r+0xb56>
 80065fa:	ee18 1a10 	vmov	r1, s16
 80065fe:	2300      	movs	r3, #0
 8006600:	220a      	movs	r2, #10
 8006602:	4620      	mov	r0, r4
 8006604:	f000 f8c2 	bl	800678c <__multadd>
 8006608:	ee08 0a10 	vmov	s16, r0
 800660c:	e7e7      	b.n	80065de <_dtoa_r+0xb26>
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	bfc8      	it	gt
 8006614:	461d      	movgt	r5, r3
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	bfd8      	it	le
 800661a:	2501      	movle	r5, #1
 800661c:	441d      	add	r5, r3
 800661e:	f04f 0800 	mov.w	r8, #0
 8006622:	ee18 1a10 	vmov	r1, s16
 8006626:	2201      	movs	r2, #1
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fa5f 	bl	8006aec <__lshift>
 800662e:	4631      	mov	r1, r6
 8006630:	ee08 0a10 	vmov	s16, r0
 8006634:	f000 faca 	bl	8006bcc <__mcmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	dc91      	bgt.n	8006560 <_dtoa_r+0xaa8>
 800663c:	d102      	bne.n	8006644 <_dtoa_r+0xb8c>
 800663e:	f01a 0f01 	tst.w	sl, #1
 8006642:	d18d      	bne.n	8006560 <_dtoa_r+0xaa8>
 8006644:	462b      	mov	r3, r5
 8006646:	461d      	mov	r5, r3
 8006648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800664c:	2a30      	cmp	r2, #48	; 0x30
 800664e:	d0fa      	beq.n	8006646 <_dtoa_r+0xb8e>
 8006650:	e6d7      	b.n	8006402 <_dtoa_r+0x94a>
 8006652:	9a01      	ldr	r2, [sp, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d184      	bne.n	8006562 <_dtoa_r+0xaaa>
 8006658:	9b00      	ldr	r3, [sp, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	2331      	movs	r3, #49	; 0x31
 8006660:	7013      	strb	r3, [r2, #0]
 8006662:	e6ce      	b.n	8006402 <_dtoa_r+0x94a>
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <_dtoa_r+0xbd4>)
 8006666:	f7ff ba95 	b.w	8005b94 <_dtoa_r+0xdc>
 800666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800666c:	2b00      	cmp	r3, #0
 800666e:	f47f aa6e 	bne.w	8005b4e <_dtoa_r+0x96>
 8006672:	4b07      	ldr	r3, [pc, #28]	; (8006690 <_dtoa_r+0xbd8>)
 8006674:	f7ff ba8e 	b.w	8005b94 <_dtoa_r+0xdc>
 8006678:	9b02      	ldr	r3, [sp, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	dcae      	bgt.n	80065dc <_dtoa_r+0xb24>
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	2b02      	cmp	r3, #2
 8006682:	f73f aea8 	bgt.w	80063d6 <_dtoa_r+0x91e>
 8006686:	e7a9      	b.n	80065dc <_dtoa_r+0xb24>
 8006688:	08007f77 	.word	0x08007f77
 800668c:	08007ed4 	.word	0x08007ed4
 8006690:	08007ef8 	.word	0x08007ef8

08006694 <_localeconv_r>:
 8006694:	4800      	ldr	r0, [pc, #0]	; (8006698 <_localeconv_r+0x4>)
 8006696:	4770      	bx	lr
 8006698:	20000160 	.word	0x20000160

0800669c <malloc>:
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <malloc+0xc>)
 800669e:	4601      	mov	r1, r0
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f000 bc17 	b.w	8006ed4 <_malloc_r>
 80066a6:	bf00      	nop
 80066a8:	2000000c 	.word	0x2000000c

080066ac <memcpy>:
 80066ac:	440a      	add	r2, r1
 80066ae:	4291      	cmp	r1, r2
 80066b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b4:	d100      	bne.n	80066b8 <memcpy+0xc>
 80066b6:	4770      	bx	lr
 80066b8:	b510      	push	{r4, lr}
 80066ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c2:	4291      	cmp	r1, r2
 80066c4:	d1f9      	bne.n	80066ba <memcpy+0xe>
 80066c6:	bd10      	pop	{r4, pc}

080066c8 <_Balloc>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066cc:	4604      	mov	r4, r0
 80066ce:	460d      	mov	r5, r1
 80066d0:	b976      	cbnz	r6, 80066f0 <_Balloc+0x28>
 80066d2:	2010      	movs	r0, #16
 80066d4:	f7ff ffe2 	bl	800669c <malloc>
 80066d8:	4602      	mov	r2, r0
 80066da:	6260      	str	r0, [r4, #36]	; 0x24
 80066dc:	b920      	cbnz	r0, 80066e8 <_Balloc+0x20>
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <_Balloc+0x78>)
 80066e0:	4818      	ldr	r0, [pc, #96]	; (8006744 <_Balloc+0x7c>)
 80066e2:	2166      	movs	r1, #102	; 0x66
 80066e4:	f000 fdd6 	bl	8007294 <__assert_func>
 80066e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066ec:	6006      	str	r6, [r0, #0]
 80066ee:	60c6      	str	r6, [r0, #12]
 80066f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066f2:	68f3      	ldr	r3, [r6, #12]
 80066f4:	b183      	cbz	r3, 8006718 <_Balloc+0x50>
 80066f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066fe:	b9b8      	cbnz	r0, 8006730 <_Balloc+0x68>
 8006700:	2101      	movs	r1, #1
 8006702:	fa01 f605 	lsl.w	r6, r1, r5
 8006706:	1d72      	adds	r2, r6, #5
 8006708:	0092      	lsls	r2, r2, #2
 800670a:	4620      	mov	r0, r4
 800670c:	f000 fb60 	bl	8006dd0 <_calloc_r>
 8006710:	b160      	cbz	r0, 800672c <_Balloc+0x64>
 8006712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006716:	e00e      	b.n	8006736 <_Balloc+0x6e>
 8006718:	2221      	movs	r2, #33	; 0x21
 800671a:	2104      	movs	r1, #4
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fb57 	bl	8006dd0 <_calloc_r>
 8006722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006724:	60f0      	str	r0, [r6, #12]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e4      	bne.n	80066f6 <_Balloc+0x2e>
 800672c:	2000      	movs	r0, #0
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	6802      	ldr	r2, [r0, #0]
 8006732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006736:	2300      	movs	r3, #0
 8006738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800673c:	e7f7      	b.n	800672e <_Balloc+0x66>
 800673e:	bf00      	nop
 8006740:	08007f05 	.word	0x08007f05
 8006744:	08007f88 	.word	0x08007f88

08006748 <_Bfree>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800674c:	4605      	mov	r5, r0
 800674e:	460c      	mov	r4, r1
 8006750:	b976      	cbnz	r6, 8006770 <_Bfree+0x28>
 8006752:	2010      	movs	r0, #16
 8006754:	f7ff ffa2 	bl	800669c <malloc>
 8006758:	4602      	mov	r2, r0
 800675a:	6268      	str	r0, [r5, #36]	; 0x24
 800675c:	b920      	cbnz	r0, 8006768 <_Bfree+0x20>
 800675e:	4b09      	ldr	r3, [pc, #36]	; (8006784 <_Bfree+0x3c>)
 8006760:	4809      	ldr	r0, [pc, #36]	; (8006788 <_Bfree+0x40>)
 8006762:	218a      	movs	r1, #138	; 0x8a
 8006764:	f000 fd96 	bl	8007294 <__assert_func>
 8006768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800676c:	6006      	str	r6, [r0, #0]
 800676e:	60c6      	str	r6, [r0, #12]
 8006770:	b13c      	cbz	r4, 8006782 <_Bfree+0x3a>
 8006772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006774:	6862      	ldr	r2, [r4, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800677c:	6021      	str	r1, [r4, #0]
 800677e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	08007f05 	.word	0x08007f05
 8006788:	08007f88 	.word	0x08007f88

0800678c <__multadd>:
 800678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006790:	690d      	ldr	r5, [r1, #16]
 8006792:	4607      	mov	r7, r0
 8006794:	460c      	mov	r4, r1
 8006796:	461e      	mov	r6, r3
 8006798:	f101 0c14 	add.w	ip, r1, #20
 800679c:	2000      	movs	r0, #0
 800679e:	f8dc 3000 	ldr.w	r3, [ip]
 80067a2:	b299      	uxth	r1, r3
 80067a4:	fb02 6101 	mla	r1, r2, r1, r6
 80067a8:	0c1e      	lsrs	r6, r3, #16
 80067aa:	0c0b      	lsrs	r3, r1, #16
 80067ac:	fb02 3306 	mla	r3, r2, r6, r3
 80067b0:	b289      	uxth	r1, r1
 80067b2:	3001      	adds	r0, #1
 80067b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067b8:	4285      	cmp	r5, r0
 80067ba:	f84c 1b04 	str.w	r1, [ip], #4
 80067be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067c2:	dcec      	bgt.n	800679e <__multadd+0x12>
 80067c4:	b30e      	cbz	r6, 800680a <__multadd+0x7e>
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	42ab      	cmp	r3, r5
 80067ca:	dc19      	bgt.n	8006800 <__multadd+0x74>
 80067cc:	6861      	ldr	r1, [r4, #4]
 80067ce:	4638      	mov	r0, r7
 80067d0:	3101      	adds	r1, #1
 80067d2:	f7ff ff79 	bl	80066c8 <_Balloc>
 80067d6:	4680      	mov	r8, r0
 80067d8:	b928      	cbnz	r0, 80067e6 <__multadd+0x5a>
 80067da:	4602      	mov	r2, r0
 80067dc:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <__multadd+0x84>)
 80067de:	480d      	ldr	r0, [pc, #52]	; (8006814 <__multadd+0x88>)
 80067e0:	21b5      	movs	r1, #181	; 0xb5
 80067e2:	f000 fd57 	bl	8007294 <__assert_func>
 80067e6:	6922      	ldr	r2, [r4, #16]
 80067e8:	3202      	adds	r2, #2
 80067ea:	f104 010c 	add.w	r1, r4, #12
 80067ee:	0092      	lsls	r2, r2, #2
 80067f0:	300c      	adds	r0, #12
 80067f2:	f7ff ff5b 	bl	80066ac <memcpy>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff ffa5 	bl	8006748 <_Bfree>
 80067fe:	4644      	mov	r4, r8
 8006800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006804:	3501      	adds	r5, #1
 8006806:	615e      	str	r6, [r3, #20]
 8006808:	6125      	str	r5, [r4, #16]
 800680a:	4620      	mov	r0, r4
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006810:	08007f77 	.word	0x08007f77
 8006814:	08007f88 	.word	0x08007f88

08006818 <__hi0bits>:
 8006818:	0c03      	lsrs	r3, r0, #16
 800681a:	041b      	lsls	r3, r3, #16
 800681c:	b9d3      	cbnz	r3, 8006854 <__hi0bits+0x3c>
 800681e:	0400      	lsls	r0, r0, #16
 8006820:	2310      	movs	r3, #16
 8006822:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006826:	bf04      	itt	eq
 8006828:	0200      	lsleq	r0, r0, #8
 800682a:	3308      	addeq	r3, #8
 800682c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006830:	bf04      	itt	eq
 8006832:	0100      	lsleq	r0, r0, #4
 8006834:	3304      	addeq	r3, #4
 8006836:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800683a:	bf04      	itt	eq
 800683c:	0080      	lsleq	r0, r0, #2
 800683e:	3302      	addeq	r3, #2
 8006840:	2800      	cmp	r0, #0
 8006842:	db05      	blt.n	8006850 <__hi0bits+0x38>
 8006844:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006848:	f103 0301 	add.w	r3, r3, #1
 800684c:	bf08      	it	eq
 800684e:	2320      	moveq	r3, #32
 8006850:	4618      	mov	r0, r3
 8006852:	4770      	bx	lr
 8006854:	2300      	movs	r3, #0
 8006856:	e7e4      	b.n	8006822 <__hi0bits+0xa>

08006858 <__lo0bits>:
 8006858:	6803      	ldr	r3, [r0, #0]
 800685a:	f013 0207 	ands.w	r2, r3, #7
 800685e:	4601      	mov	r1, r0
 8006860:	d00b      	beq.n	800687a <__lo0bits+0x22>
 8006862:	07da      	lsls	r2, r3, #31
 8006864:	d423      	bmi.n	80068ae <__lo0bits+0x56>
 8006866:	0798      	lsls	r0, r3, #30
 8006868:	bf49      	itett	mi
 800686a:	085b      	lsrmi	r3, r3, #1
 800686c:	089b      	lsrpl	r3, r3, #2
 800686e:	2001      	movmi	r0, #1
 8006870:	600b      	strmi	r3, [r1, #0]
 8006872:	bf5c      	itt	pl
 8006874:	600b      	strpl	r3, [r1, #0]
 8006876:	2002      	movpl	r0, #2
 8006878:	4770      	bx	lr
 800687a:	b298      	uxth	r0, r3
 800687c:	b9a8      	cbnz	r0, 80068aa <__lo0bits+0x52>
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	2010      	movs	r0, #16
 8006882:	b2da      	uxtb	r2, r3
 8006884:	b90a      	cbnz	r2, 800688a <__lo0bits+0x32>
 8006886:	3008      	adds	r0, #8
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	071a      	lsls	r2, r3, #28
 800688c:	bf04      	itt	eq
 800688e:	091b      	lsreq	r3, r3, #4
 8006890:	3004      	addeq	r0, #4
 8006892:	079a      	lsls	r2, r3, #30
 8006894:	bf04      	itt	eq
 8006896:	089b      	lsreq	r3, r3, #2
 8006898:	3002      	addeq	r0, #2
 800689a:	07da      	lsls	r2, r3, #31
 800689c:	d403      	bmi.n	80068a6 <__lo0bits+0x4e>
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	f100 0001 	add.w	r0, r0, #1
 80068a4:	d005      	beq.n	80068b2 <__lo0bits+0x5a>
 80068a6:	600b      	str	r3, [r1, #0]
 80068a8:	4770      	bx	lr
 80068aa:	4610      	mov	r0, r2
 80068ac:	e7e9      	b.n	8006882 <__lo0bits+0x2a>
 80068ae:	2000      	movs	r0, #0
 80068b0:	4770      	bx	lr
 80068b2:	2020      	movs	r0, #32
 80068b4:	4770      	bx	lr
	...

080068b8 <__i2b>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	2101      	movs	r1, #1
 80068be:	f7ff ff03 	bl	80066c8 <_Balloc>
 80068c2:	4602      	mov	r2, r0
 80068c4:	b928      	cbnz	r0, 80068d2 <__i2b+0x1a>
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <__i2b+0x24>)
 80068c8:	4805      	ldr	r0, [pc, #20]	; (80068e0 <__i2b+0x28>)
 80068ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80068ce:	f000 fce1 	bl	8007294 <__assert_func>
 80068d2:	2301      	movs	r3, #1
 80068d4:	6144      	str	r4, [r0, #20]
 80068d6:	6103      	str	r3, [r0, #16]
 80068d8:	bd10      	pop	{r4, pc}
 80068da:	bf00      	nop
 80068dc:	08007f77 	.word	0x08007f77
 80068e0:	08007f88 	.word	0x08007f88

080068e4 <__multiply>:
 80068e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	4691      	mov	r9, r2
 80068ea:	690a      	ldr	r2, [r1, #16]
 80068ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	bfb8      	it	lt
 80068f4:	460b      	movlt	r3, r1
 80068f6:	460c      	mov	r4, r1
 80068f8:	bfbc      	itt	lt
 80068fa:	464c      	movlt	r4, r9
 80068fc:	4699      	movlt	r9, r3
 80068fe:	6927      	ldr	r7, [r4, #16]
 8006900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006904:	68a3      	ldr	r3, [r4, #8]
 8006906:	6861      	ldr	r1, [r4, #4]
 8006908:	eb07 060a 	add.w	r6, r7, sl
 800690c:	42b3      	cmp	r3, r6
 800690e:	b085      	sub	sp, #20
 8006910:	bfb8      	it	lt
 8006912:	3101      	addlt	r1, #1
 8006914:	f7ff fed8 	bl	80066c8 <_Balloc>
 8006918:	b930      	cbnz	r0, 8006928 <__multiply+0x44>
 800691a:	4602      	mov	r2, r0
 800691c:	4b44      	ldr	r3, [pc, #272]	; (8006a30 <__multiply+0x14c>)
 800691e:	4845      	ldr	r0, [pc, #276]	; (8006a34 <__multiply+0x150>)
 8006920:	f240 115d 	movw	r1, #349	; 0x15d
 8006924:	f000 fcb6 	bl	8007294 <__assert_func>
 8006928:	f100 0514 	add.w	r5, r0, #20
 800692c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006930:	462b      	mov	r3, r5
 8006932:	2200      	movs	r2, #0
 8006934:	4543      	cmp	r3, r8
 8006936:	d321      	bcc.n	800697c <__multiply+0x98>
 8006938:	f104 0314 	add.w	r3, r4, #20
 800693c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006940:	f109 0314 	add.w	r3, r9, #20
 8006944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006948:	9202      	str	r2, [sp, #8]
 800694a:	1b3a      	subs	r2, r7, r4
 800694c:	3a15      	subs	r2, #21
 800694e:	f022 0203 	bic.w	r2, r2, #3
 8006952:	3204      	adds	r2, #4
 8006954:	f104 0115 	add.w	r1, r4, #21
 8006958:	428f      	cmp	r7, r1
 800695a:	bf38      	it	cc
 800695c:	2204      	movcc	r2, #4
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	9a02      	ldr	r2, [sp, #8]
 8006962:	9303      	str	r3, [sp, #12]
 8006964:	429a      	cmp	r2, r3
 8006966:	d80c      	bhi.n	8006982 <__multiply+0x9e>
 8006968:	2e00      	cmp	r6, #0
 800696a:	dd03      	ble.n	8006974 <__multiply+0x90>
 800696c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006970:	2b00      	cmp	r3, #0
 8006972:	d05a      	beq.n	8006a2a <__multiply+0x146>
 8006974:	6106      	str	r6, [r0, #16]
 8006976:	b005      	add	sp, #20
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	f843 2b04 	str.w	r2, [r3], #4
 8006980:	e7d8      	b.n	8006934 <__multiply+0x50>
 8006982:	f8b3 a000 	ldrh.w	sl, [r3]
 8006986:	f1ba 0f00 	cmp.w	sl, #0
 800698a:	d024      	beq.n	80069d6 <__multiply+0xf2>
 800698c:	f104 0e14 	add.w	lr, r4, #20
 8006990:	46a9      	mov	r9, r5
 8006992:	f04f 0c00 	mov.w	ip, #0
 8006996:	f85e 2b04 	ldr.w	r2, [lr], #4
 800699a:	f8d9 1000 	ldr.w	r1, [r9]
 800699e:	fa1f fb82 	uxth.w	fp, r2
 80069a2:	b289      	uxth	r1, r1
 80069a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80069a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80069ac:	f8d9 2000 	ldr.w	r2, [r9]
 80069b0:	4461      	add	r1, ip
 80069b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80069ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069be:	b289      	uxth	r1, r1
 80069c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069c4:	4577      	cmp	r7, lr
 80069c6:	f849 1b04 	str.w	r1, [r9], #4
 80069ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069ce:	d8e2      	bhi.n	8006996 <__multiply+0xb2>
 80069d0:	9a01      	ldr	r2, [sp, #4]
 80069d2:	f845 c002 	str.w	ip, [r5, r2]
 80069d6:	9a03      	ldr	r2, [sp, #12]
 80069d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80069dc:	3304      	adds	r3, #4
 80069de:	f1b9 0f00 	cmp.w	r9, #0
 80069e2:	d020      	beq.n	8006a26 <__multiply+0x142>
 80069e4:	6829      	ldr	r1, [r5, #0]
 80069e6:	f104 0c14 	add.w	ip, r4, #20
 80069ea:	46ae      	mov	lr, r5
 80069ec:	f04f 0a00 	mov.w	sl, #0
 80069f0:	f8bc b000 	ldrh.w	fp, [ip]
 80069f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069f8:	fb09 220b 	mla	r2, r9, fp, r2
 80069fc:	4492      	add	sl, r2
 80069fe:	b289      	uxth	r1, r1
 8006a00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a04:	f84e 1b04 	str.w	r1, [lr], #4
 8006a08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a0c:	f8be 1000 	ldrh.w	r1, [lr]
 8006a10:	0c12      	lsrs	r2, r2, #16
 8006a12:	fb09 1102 	mla	r1, r9, r2, r1
 8006a16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a1a:	4567      	cmp	r7, ip
 8006a1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a20:	d8e6      	bhi.n	80069f0 <__multiply+0x10c>
 8006a22:	9a01      	ldr	r2, [sp, #4]
 8006a24:	50a9      	str	r1, [r5, r2]
 8006a26:	3504      	adds	r5, #4
 8006a28:	e79a      	b.n	8006960 <__multiply+0x7c>
 8006a2a:	3e01      	subs	r6, #1
 8006a2c:	e79c      	b.n	8006968 <__multiply+0x84>
 8006a2e:	bf00      	nop
 8006a30:	08007f77 	.word	0x08007f77
 8006a34:	08007f88 	.word	0x08007f88

08006a38 <__pow5mult>:
 8006a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a3c:	4615      	mov	r5, r2
 8006a3e:	f012 0203 	ands.w	r2, r2, #3
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	d007      	beq.n	8006a58 <__pow5mult+0x20>
 8006a48:	4c25      	ldr	r4, [pc, #148]	; (8006ae0 <__pow5mult+0xa8>)
 8006a4a:	3a01      	subs	r2, #1
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a52:	f7ff fe9b 	bl	800678c <__multadd>
 8006a56:	4607      	mov	r7, r0
 8006a58:	10ad      	asrs	r5, r5, #2
 8006a5a:	d03d      	beq.n	8006ad8 <__pow5mult+0xa0>
 8006a5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a5e:	b97c      	cbnz	r4, 8006a80 <__pow5mult+0x48>
 8006a60:	2010      	movs	r0, #16
 8006a62:	f7ff fe1b 	bl	800669c <malloc>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6270      	str	r0, [r6, #36]	; 0x24
 8006a6a:	b928      	cbnz	r0, 8006a78 <__pow5mult+0x40>
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <__pow5mult+0xac>)
 8006a6e:	481e      	ldr	r0, [pc, #120]	; (8006ae8 <__pow5mult+0xb0>)
 8006a70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a74:	f000 fc0e 	bl	8007294 <__assert_func>
 8006a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a7c:	6004      	str	r4, [r0, #0]
 8006a7e:	60c4      	str	r4, [r0, #12]
 8006a80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a88:	b94c      	cbnz	r4, 8006a9e <__pow5mult+0x66>
 8006a8a:	f240 2171 	movw	r1, #625	; 0x271
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff ff12 	bl	80068b8 <__i2b>
 8006a94:	2300      	movs	r3, #0
 8006a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	6003      	str	r3, [r0, #0]
 8006a9e:	f04f 0900 	mov.w	r9, #0
 8006aa2:	07eb      	lsls	r3, r5, #31
 8006aa4:	d50a      	bpl.n	8006abc <__pow5mult+0x84>
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff ff1a 	bl	80068e4 <__multiply>
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff fe47 	bl	8006748 <_Bfree>
 8006aba:	4647      	mov	r7, r8
 8006abc:	106d      	asrs	r5, r5, #1
 8006abe:	d00b      	beq.n	8006ad8 <__pow5mult+0xa0>
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	b938      	cbnz	r0, 8006ad4 <__pow5mult+0x9c>
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff ff0b 	bl	80068e4 <__multiply>
 8006ace:	6020      	str	r0, [r4, #0]
 8006ad0:	f8c0 9000 	str.w	r9, [r0]
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	e7e4      	b.n	8006aa2 <__pow5mult+0x6a>
 8006ad8:	4638      	mov	r0, r7
 8006ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ade:	bf00      	nop
 8006ae0:	080080d8 	.word	0x080080d8
 8006ae4:	08007f05 	.word	0x08007f05
 8006ae8:	08007f88 	.word	0x08007f88

08006aec <__lshift>:
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	460c      	mov	r4, r1
 8006af2:	6849      	ldr	r1, [r1, #4]
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006afa:	68a3      	ldr	r3, [r4, #8]
 8006afc:	4607      	mov	r7, r0
 8006afe:	4691      	mov	r9, r2
 8006b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b04:	f108 0601 	add.w	r6, r8, #1
 8006b08:	42b3      	cmp	r3, r6
 8006b0a:	db0b      	blt.n	8006b24 <__lshift+0x38>
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7ff fddb 	bl	80066c8 <_Balloc>
 8006b12:	4605      	mov	r5, r0
 8006b14:	b948      	cbnz	r0, 8006b2a <__lshift+0x3e>
 8006b16:	4602      	mov	r2, r0
 8006b18:	4b2a      	ldr	r3, [pc, #168]	; (8006bc4 <__lshift+0xd8>)
 8006b1a:	482b      	ldr	r0, [pc, #172]	; (8006bc8 <__lshift+0xdc>)
 8006b1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b20:	f000 fbb8 	bl	8007294 <__assert_func>
 8006b24:	3101      	adds	r1, #1
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	e7ee      	b.n	8006b08 <__lshift+0x1c>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f100 0114 	add.w	r1, r0, #20
 8006b30:	f100 0210 	add.w	r2, r0, #16
 8006b34:	4618      	mov	r0, r3
 8006b36:	4553      	cmp	r3, sl
 8006b38:	db37      	blt.n	8006baa <__lshift+0xbe>
 8006b3a:	6920      	ldr	r0, [r4, #16]
 8006b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b40:	f104 0314 	add.w	r3, r4, #20
 8006b44:	f019 091f 	ands.w	r9, r9, #31
 8006b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b50:	d02f      	beq.n	8006bb2 <__lshift+0xc6>
 8006b52:	f1c9 0e20 	rsb	lr, r9, #32
 8006b56:	468a      	mov	sl, r1
 8006b58:	f04f 0c00 	mov.w	ip, #0
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	fa02 f209 	lsl.w	r2, r2, r9
 8006b62:	ea42 020c 	orr.w	r2, r2, ip
 8006b66:	f84a 2b04 	str.w	r2, [sl], #4
 8006b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b6e:	4298      	cmp	r0, r3
 8006b70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b74:	d8f2      	bhi.n	8006b5c <__lshift+0x70>
 8006b76:	1b03      	subs	r3, r0, r4
 8006b78:	3b15      	subs	r3, #21
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	3304      	adds	r3, #4
 8006b80:	f104 0215 	add.w	r2, r4, #21
 8006b84:	4290      	cmp	r0, r2
 8006b86:	bf38      	it	cc
 8006b88:	2304      	movcc	r3, #4
 8006b8a:	f841 c003 	str.w	ip, [r1, r3]
 8006b8e:	f1bc 0f00 	cmp.w	ip, #0
 8006b92:	d001      	beq.n	8006b98 <__lshift+0xac>
 8006b94:	f108 0602 	add.w	r6, r8, #2
 8006b98:	3e01      	subs	r6, #1
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	612e      	str	r6, [r5, #16]
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	f7ff fdd2 	bl	8006748 <_Bfree>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006baa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006bae:	3301      	adds	r3, #1
 8006bb0:	e7c1      	b.n	8006b36 <__lshift+0x4a>
 8006bb2:	3904      	subs	r1, #4
 8006bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bbc:	4298      	cmp	r0, r3
 8006bbe:	d8f9      	bhi.n	8006bb4 <__lshift+0xc8>
 8006bc0:	e7ea      	b.n	8006b98 <__lshift+0xac>
 8006bc2:	bf00      	nop
 8006bc4:	08007f77 	.word	0x08007f77
 8006bc8:	08007f88 	.word	0x08007f88

08006bcc <__mcmp>:
 8006bcc:	b530      	push	{r4, r5, lr}
 8006bce:	6902      	ldr	r2, [r0, #16]
 8006bd0:	690c      	ldr	r4, [r1, #16]
 8006bd2:	1b12      	subs	r2, r2, r4
 8006bd4:	d10e      	bne.n	8006bf4 <__mcmp+0x28>
 8006bd6:	f100 0314 	add.w	r3, r0, #20
 8006bda:	3114      	adds	r1, #20
 8006bdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006be0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006be4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006be8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006bec:	42a5      	cmp	r5, r4
 8006bee:	d003      	beq.n	8006bf8 <__mcmp+0x2c>
 8006bf0:	d305      	bcc.n	8006bfe <__mcmp+0x32>
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	bd30      	pop	{r4, r5, pc}
 8006bf8:	4283      	cmp	r3, r0
 8006bfa:	d3f3      	bcc.n	8006be4 <__mcmp+0x18>
 8006bfc:	e7fa      	b.n	8006bf4 <__mcmp+0x28>
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	e7f7      	b.n	8006bf4 <__mcmp+0x28>

08006c04 <__mdiff>:
 8006c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	460c      	mov	r4, r1
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4690      	mov	r8, r2
 8006c12:	f7ff ffdb 	bl	8006bcc <__mcmp>
 8006c16:	1e05      	subs	r5, r0, #0
 8006c18:	d110      	bne.n	8006c3c <__mdiff+0x38>
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff fd53 	bl	80066c8 <_Balloc>
 8006c22:	b930      	cbnz	r0, 8006c32 <__mdiff+0x2e>
 8006c24:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <__mdiff+0x10c>)
 8006c26:	4602      	mov	r2, r0
 8006c28:	f240 2132 	movw	r1, #562	; 0x232
 8006c2c:	4839      	ldr	r0, [pc, #228]	; (8006d14 <__mdiff+0x110>)
 8006c2e:	f000 fb31 	bl	8007294 <__assert_func>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3c:	bfa4      	itt	ge
 8006c3e:	4643      	movge	r3, r8
 8006c40:	46a0      	movge	r8, r4
 8006c42:	4630      	mov	r0, r6
 8006c44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c48:	bfa6      	itte	ge
 8006c4a:	461c      	movge	r4, r3
 8006c4c:	2500      	movge	r5, #0
 8006c4e:	2501      	movlt	r5, #1
 8006c50:	f7ff fd3a 	bl	80066c8 <_Balloc>
 8006c54:	b920      	cbnz	r0, 8006c60 <__mdiff+0x5c>
 8006c56:	4b2e      	ldr	r3, [pc, #184]	; (8006d10 <__mdiff+0x10c>)
 8006c58:	4602      	mov	r2, r0
 8006c5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c5e:	e7e5      	b.n	8006c2c <__mdiff+0x28>
 8006c60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c64:	6926      	ldr	r6, [r4, #16]
 8006c66:	60c5      	str	r5, [r0, #12]
 8006c68:	f104 0914 	add.w	r9, r4, #20
 8006c6c:	f108 0514 	add.w	r5, r8, #20
 8006c70:	f100 0e14 	add.w	lr, r0, #20
 8006c74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c7c:	f108 0210 	add.w	r2, r8, #16
 8006c80:	46f2      	mov	sl, lr
 8006c82:	2100      	movs	r1, #0
 8006c84:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c8c:	fa1f f883 	uxth.w	r8, r3
 8006c90:	fa11 f18b 	uxtah	r1, r1, fp
 8006c94:	0c1b      	lsrs	r3, r3, #16
 8006c96:	eba1 0808 	sub.w	r8, r1, r8
 8006c9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ca2:	fa1f f888 	uxth.w	r8, r8
 8006ca6:	1419      	asrs	r1, r3, #16
 8006ca8:	454e      	cmp	r6, r9
 8006caa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006cae:	f84a 3b04 	str.w	r3, [sl], #4
 8006cb2:	d8e7      	bhi.n	8006c84 <__mdiff+0x80>
 8006cb4:	1b33      	subs	r3, r6, r4
 8006cb6:	3b15      	subs	r3, #21
 8006cb8:	f023 0303 	bic.w	r3, r3, #3
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	3415      	adds	r4, #21
 8006cc0:	42a6      	cmp	r6, r4
 8006cc2:	bf38      	it	cc
 8006cc4:	2304      	movcc	r3, #4
 8006cc6:	441d      	add	r5, r3
 8006cc8:	4473      	add	r3, lr
 8006cca:	469e      	mov	lr, r3
 8006ccc:	462e      	mov	r6, r5
 8006cce:	4566      	cmp	r6, ip
 8006cd0:	d30e      	bcc.n	8006cf0 <__mdiff+0xec>
 8006cd2:	f10c 0203 	add.w	r2, ip, #3
 8006cd6:	1b52      	subs	r2, r2, r5
 8006cd8:	f022 0203 	bic.w	r2, r2, #3
 8006cdc:	3d03      	subs	r5, #3
 8006cde:	45ac      	cmp	ip, r5
 8006ce0:	bf38      	it	cc
 8006ce2:	2200      	movcc	r2, #0
 8006ce4:	441a      	add	r2, r3
 8006ce6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006cea:	b17b      	cbz	r3, 8006d0c <__mdiff+0x108>
 8006cec:	6107      	str	r7, [r0, #16]
 8006cee:	e7a3      	b.n	8006c38 <__mdiff+0x34>
 8006cf0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006cf4:	fa11 f288 	uxtah	r2, r1, r8
 8006cf8:	1414      	asrs	r4, r2, #16
 8006cfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cfe:	b292      	uxth	r2, r2
 8006d00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d04:	f84e 2b04 	str.w	r2, [lr], #4
 8006d08:	1421      	asrs	r1, r4, #16
 8006d0a:	e7e0      	b.n	8006cce <__mdiff+0xca>
 8006d0c:	3f01      	subs	r7, #1
 8006d0e:	e7ea      	b.n	8006ce6 <__mdiff+0xe2>
 8006d10:	08007f77 	.word	0x08007f77
 8006d14:	08007f88 	.word	0x08007f88

08006d18 <__d2b>:
 8006d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	4689      	mov	r9, r1
 8006d1e:	2101      	movs	r1, #1
 8006d20:	ec57 6b10 	vmov	r6, r7, d0
 8006d24:	4690      	mov	r8, r2
 8006d26:	f7ff fccf 	bl	80066c8 <_Balloc>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	b930      	cbnz	r0, 8006d3c <__d2b+0x24>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <__d2b+0xb0>)
 8006d32:	4826      	ldr	r0, [pc, #152]	; (8006dcc <__d2b+0xb4>)
 8006d34:	f240 310a 	movw	r1, #778	; 0x30a
 8006d38:	f000 faac 	bl	8007294 <__assert_func>
 8006d3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d44:	bb35      	cbnz	r5, 8006d94 <__d2b+0x7c>
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	d028      	beq.n	8006d9e <__d2b+0x86>
 8006d4c:	4668      	mov	r0, sp
 8006d4e:	9600      	str	r6, [sp, #0]
 8006d50:	f7ff fd82 	bl	8006858 <__lo0bits>
 8006d54:	9900      	ldr	r1, [sp, #0]
 8006d56:	b300      	cbz	r0, 8006d9a <__d2b+0x82>
 8006d58:	9a01      	ldr	r2, [sp, #4]
 8006d5a:	f1c0 0320 	rsb	r3, r0, #32
 8006d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d62:	430b      	orrs	r3, r1
 8006d64:	40c2      	lsrs	r2, r0
 8006d66:	6163      	str	r3, [r4, #20]
 8006d68:	9201      	str	r2, [sp, #4]
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	61a3      	str	r3, [r4, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bf14      	ite	ne
 8006d72:	2202      	movne	r2, #2
 8006d74:	2201      	moveq	r2, #1
 8006d76:	6122      	str	r2, [r4, #16]
 8006d78:	b1d5      	cbz	r5, 8006db0 <__d2b+0x98>
 8006d7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d7e:	4405      	add	r5, r0
 8006d80:	f8c9 5000 	str.w	r5, [r9]
 8006d84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d88:	f8c8 0000 	str.w	r0, [r8]
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	b003      	add	sp, #12
 8006d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d98:	e7d5      	b.n	8006d46 <__d2b+0x2e>
 8006d9a:	6161      	str	r1, [r4, #20]
 8006d9c:	e7e5      	b.n	8006d6a <__d2b+0x52>
 8006d9e:	a801      	add	r0, sp, #4
 8006da0:	f7ff fd5a 	bl	8006858 <__lo0bits>
 8006da4:	9b01      	ldr	r3, [sp, #4]
 8006da6:	6163      	str	r3, [r4, #20]
 8006da8:	2201      	movs	r2, #1
 8006daa:	6122      	str	r2, [r4, #16]
 8006dac:	3020      	adds	r0, #32
 8006dae:	e7e3      	b.n	8006d78 <__d2b+0x60>
 8006db0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006db4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006db8:	f8c9 0000 	str.w	r0, [r9]
 8006dbc:	6918      	ldr	r0, [r3, #16]
 8006dbe:	f7ff fd2b 	bl	8006818 <__hi0bits>
 8006dc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006dc6:	e7df      	b.n	8006d88 <__d2b+0x70>
 8006dc8:	08007f77 	.word	0x08007f77
 8006dcc:	08007f88 	.word	0x08007f88

08006dd0 <_calloc_r>:
 8006dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd2:	fba1 2402 	umull	r2, r4, r1, r2
 8006dd6:	b94c      	cbnz	r4, 8006dec <_calloc_r+0x1c>
 8006dd8:	4611      	mov	r1, r2
 8006dda:	9201      	str	r2, [sp, #4]
 8006ddc:	f000 f87a 	bl	8006ed4 <_malloc_r>
 8006de0:	9a01      	ldr	r2, [sp, #4]
 8006de2:	4605      	mov	r5, r0
 8006de4:	b930      	cbnz	r0, 8006df4 <_calloc_r+0x24>
 8006de6:	4628      	mov	r0, r5
 8006de8:	b003      	add	sp, #12
 8006dea:	bd30      	pop	{r4, r5, pc}
 8006dec:	220c      	movs	r2, #12
 8006dee:	6002      	str	r2, [r0, #0]
 8006df0:	2500      	movs	r5, #0
 8006df2:	e7f8      	b.n	8006de6 <_calloc_r+0x16>
 8006df4:	4621      	mov	r1, r4
 8006df6:	f7fe f941 	bl	800507c <memset>
 8006dfa:	e7f4      	b.n	8006de6 <_calloc_r+0x16>

08006dfc <_free_r>:
 8006dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d044      	beq.n	8006e8c <_free_r+0x90>
 8006e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e06:	9001      	str	r0, [sp, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e0e:	bfb8      	it	lt
 8006e10:	18e4      	addlt	r4, r4, r3
 8006e12:	f000 fa9b 	bl	800734c <__malloc_lock>
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <_free_r+0x94>)
 8006e18:	9801      	ldr	r0, [sp, #4]
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	b933      	cbnz	r3, 8006e2c <_free_r+0x30>
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	6014      	str	r4, [r2, #0]
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e28:	f000 ba96 	b.w	8007358 <__malloc_unlock>
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d908      	bls.n	8006e42 <_free_r+0x46>
 8006e30:	6825      	ldr	r5, [r4, #0]
 8006e32:	1961      	adds	r1, r4, r5
 8006e34:	428b      	cmp	r3, r1
 8006e36:	bf01      	itttt	eq
 8006e38:	6819      	ldreq	r1, [r3, #0]
 8006e3a:	685b      	ldreq	r3, [r3, #4]
 8006e3c:	1949      	addeq	r1, r1, r5
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	e7ed      	b.n	8006e1e <_free_r+0x22>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x50>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x46>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1855      	adds	r5, r2, r1
 8006e50:	42a5      	cmp	r5, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x70>
 8006e54:	6824      	ldr	r4, [r4, #0]
 8006e56:	4421      	add	r1, r4
 8006e58:	1854      	adds	r4, r2, r1
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1e0      	bne.n	8006e22 <_free_r+0x26>
 8006e60:	681c      	ldr	r4, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	4421      	add	r1, r4
 8006e68:	6011      	str	r1, [r2, #0]
 8006e6a:	e7da      	b.n	8006e22 <_free_r+0x26>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x78>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	e7d6      	b.n	8006e22 <_free_r+0x26>
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1949      	addeq	r1, r1, r5
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7ca      	b.n	8006e22 <_free_r+0x26>
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bd30      	pop	{r4, r5, pc}
 8006e90:	20000330 	.word	0x20000330

08006e94 <sbrk_aligned>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	4e0e      	ldr	r6, [pc, #56]	; (8006ed0 <sbrk_aligned+0x3c>)
 8006e98:	460c      	mov	r4, r1
 8006e9a:	6831      	ldr	r1, [r6, #0]
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	b911      	cbnz	r1, 8006ea6 <sbrk_aligned+0x12>
 8006ea0:	f000 f9e8 	bl	8007274 <_sbrk_r>
 8006ea4:	6030      	str	r0, [r6, #0]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 f9e3 	bl	8007274 <_sbrk_r>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d00a      	beq.n	8006ec8 <sbrk_aligned+0x34>
 8006eb2:	1cc4      	adds	r4, r0, #3
 8006eb4:	f024 0403 	bic.w	r4, r4, #3
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d007      	beq.n	8006ecc <sbrk_aligned+0x38>
 8006ebc:	1a21      	subs	r1, r4, r0
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 f9d8 	bl	8007274 <_sbrk_r>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d101      	bne.n	8006ecc <sbrk_aligned+0x38>
 8006ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ecc:	4620      	mov	r0, r4
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	20000334 	.word	0x20000334

08006ed4 <_malloc_r>:
 8006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed8:	1ccd      	adds	r5, r1, #3
 8006eda:	f025 0503 	bic.w	r5, r5, #3
 8006ede:	3508      	adds	r5, #8
 8006ee0:	2d0c      	cmp	r5, #12
 8006ee2:	bf38      	it	cc
 8006ee4:	250c      	movcc	r5, #12
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	4607      	mov	r7, r0
 8006eea:	db01      	blt.n	8006ef0 <_malloc_r+0x1c>
 8006eec:	42a9      	cmp	r1, r5
 8006eee:	d905      	bls.n	8006efc <_malloc_r+0x28>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efc:	4e2e      	ldr	r6, [pc, #184]	; (8006fb8 <_malloc_r+0xe4>)
 8006efe:	f000 fa25 	bl	800734c <__malloc_lock>
 8006f02:	6833      	ldr	r3, [r6, #0]
 8006f04:	461c      	mov	r4, r3
 8006f06:	bb34      	cbnz	r4, 8006f56 <_malloc_r+0x82>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7ff ffc2 	bl	8006e94 <sbrk_aligned>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	4604      	mov	r4, r0
 8006f14:	d14d      	bne.n	8006fb2 <_malloc_r+0xde>
 8006f16:	6834      	ldr	r4, [r6, #0]
 8006f18:	4626      	mov	r6, r4
 8006f1a:	2e00      	cmp	r6, #0
 8006f1c:	d140      	bne.n	8006fa0 <_malloc_r+0xcc>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	4631      	mov	r1, r6
 8006f22:	4638      	mov	r0, r7
 8006f24:	eb04 0803 	add.w	r8, r4, r3
 8006f28:	f000 f9a4 	bl	8007274 <_sbrk_r>
 8006f2c:	4580      	cmp	r8, r0
 8006f2e:	d13a      	bne.n	8006fa6 <_malloc_r+0xd2>
 8006f30:	6821      	ldr	r1, [r4, #0]
 8006f32:	3503      	adds	r5, #3
 8006f34:	1a6d      	subs	r5, r5, r1
 8006f36:	f025 0503 	bic.w	r5, r5, #3
 8006f3a:	3508      	adds	r5, #8
 8006f3c:	2d0c      	cmp	r5, #12
 8006f3e:	bf38      	it	cc
 8006f40:	250c      	movcc	r5, #12
 8006f42:	4629      	mov	r1, r5
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ffa5 	bl	8006e94 <sbrk_aligned>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d02b      	beq.n	8006fa6 <_malloc_r+0xd2>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	442b      	add	r3, r5
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	e00e      	b.n	8006f74 <_malloc_r+0xa0>
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	1b52      	subs	r2, r2, r5
 8006f5a:	d41e      	bmi.n	8006f9a <_malloc_r+0xc6>
 8006f5c:	2a0b      	cmp	r2, #11
 8006f5e:	d916      	bls.n	8006f8e <_malloc_r+0xba>
 8006f60:	1961      	adds	r1, r4, r5
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	6025      	str	r5, [r4, #0]
 8006f66:	bf18      	it	ne
 8006f68:	6059      	strne	r1, [r3, #4]
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	bf08      	it	eq
 8006f6e:	6031      	streq	r1, [r6, #0]
 8006f70:	5162      	str	r2, [r4, r5]
 8006f72:	604b      	str	r3, [r1, #4]
 8006f74:	4638      	mov	r0, r7
 8006f76:	f104 060b 	add.w	r6, r4, #11
 8006f7a:	f000 f9ed 	bl	8007358 <__malloc_unlock>
 8006f7e:	f026 0607 	bic.w	r6, r6, #7
 8006f82:	1d23      	adds	r3, r4, #4
 8006f84:	1af2      	subs	r2, r6, r3
 8006f86:	d0b6      	beq.n	8006ef6 <_malloc_r+0x22>
 8006f88:	1b9b      	subs	r3, r3, r6
 8006f8a:	50a3      	str	r3, [r4, r2]
 8006f8c:	e7b3      	b.n	8006ef6 <_malloc_r+0x22>
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	42a3      	cmp	r3, r4
 8006f92:	bf0c      	ite	eq
 8006f94:	6032      	streq	r2, [r6, #0]
 8006f96:	605a      	strne	r2, [r3, #4]
 8006f98:	e7ec      	b.n	8006f74 <_malloc_r+0xa0>
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	6864      	ldr	r4, [r4, #4]
 8006f9e:	e7b2      	b.n	8006f06 <_malloc_r+0x32>
 8006fa0:	4634      	mov	r4, r6
 8006fa2:	6876      	ldr	r6, [r6, #4]
 8006fa4:	e7b9      	b.n	8006f1a <_malloc_r+0x46>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	4638      	mov	r0, r7
 8006fac:	f000 f9d4 	bl	8007358 <__malloc_unlock>
 8006fb0:	e7a1      	b.n	8006ef6 <_malloc_r+0x22>
 8006fb2:	6025      	str	r5, [r4, #0]
 8006fb4:	e7de      	b.n	8006f74 <_malloc_r+0xa0>
 8006fb6:	bf00      	nop
 8006fb8:	20000330 	.word	0x20000330

08006fbc <__ssputs_r>:
 8006fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	688e      	ldr	r6, [r1, #8]
 8006fc2:	429e      	cmp	r6, r3
 8006fc4:	4682      	mov	sl, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	4690      	mov	r8, r2
 8006fca:	461f      	mov	r7, r3
 8006fcc:	d838      	bhi.n	8007040 <__ssputs_r+0x84>
 8006fce:	898a      	ldrh	r2, [r1, #12]
 8006fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fd4:	d032      	beq.n	800703c <__ssputs_r+0x80>
 8006fd6:	6825      	ldr	r5, [r4, #0]
 8006fd8:	6909      	ldr	r1, [r1, #16]
 8006fda:	eba5 0901 	sub.w	r9, r5, r1
 8006fde:	6965      	ldr	r5, [r4, #20]
 8006fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fe8:	3301      	adds	r3, #1
 8006fea:	444b      	add	r3, r9
 8006fec:	106d      	asrs	r5, r5, #1
 8006fee:	429d      	cmp	r5, r3
 8006ff0:	bf38      	it	cc
 8006ff2:	461d      	movcc	r5, r3
 8006ff4:	0553      	lsls	r3, r2, #21
 8006ff6:	d531      	bpl.n	800705c <__ssputs_r+0xa0>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7ff ff6b 	bl	8006ed4 <_malloc_r>
 8006ffe:	4606      	mov	r6, r0
 8007000:	b950      	cbnz	r0, 8007018 <__ssputs_r+0x5c>
 8007002:	230c      	movs	r3, #12
 8007004:	f8ca 3000 	str.w	r3, [sl]
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007018:	6921      	ldr	r1, [r4, #16]
 800701a:	464a      	mov	r2, r9
 800701c:	f7ff fb46 	bl	80066ac <memcpy>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702a:	81a3      	strh	r3, [r4, #12]
 800702c:	6126      	str	r6, [r4, #16]
 800702e:	6165      	str	r5, [r4, #20]
 8007030:	444e      	add	r6, r9
 8007032:	eba5 0509 	sub.w	r5, r5, r9
 8007036:	6026      	str	r6, [r4, #0]
 8007038:	60a5      	str	r5, [r4, #8]
 800703a:	463e      	mov	r6, r7
 800703c:	42be      	cmp	r6, r7
 800703e:	d900      	bls.n	8007042 <__ssputs_r+0x86>
 8007040:	463e      	mov	r6, r7
 8007042:	6820      	ldr	r0, [r4, #0]
 8007044:	4632      	mov	r2, r6
 8007046:	4641      	mov	r1, r8
 8007048:	f000 f966 	bl	8007318 <memmove>
 800704c:	68a3      	ldr	r3, [r4, #8]
 800704e:	1b9b      	subs	r3, r3, r6
 8007050:	60a3      	str	r3, [r4, #8]
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	4433      	add	r3, r6
 8007056:	6023      	str	r3, [r4, #0]
 8007058:	2000      	movs	r0, #0
 800705a:	e7db      	b.n	8007014 <__ssputs_r+0x58>
 800705c:	462a      	mov	r2, r5
 800705e:	f000 f981 	bl	8007364 <_realloc_r>
 8007062:	4606      	mov	r6, r0
 8007064:	2800      	cmp	r0, #0
 8007066:	d1e1      	bne.n	800702c <__ssputs_r+0x70>
 8007068:	6921      	ldr	r1, [r4, #16]
 800706a:	4650      	mov	r0, sl
 800706c:	f7ff fec6 	bl	8006dfc <_free_r>
 8007070:	e7c7      	b.n	8007002 <__ssputs_r+0x46>
	...

08007074 <_svfiprintf_r>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	4698      	mov	r8, r3
 800707a:	898b      	ldrh	r3, [r1, #12]
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	b09d      	sub	sp, #116	; 0x74
 8007080:	4607      	mov	r7, r0
 8007082:	460d      	mov	r5, r1
 8007084:	4614      	mov	r4, r2
 8007086:	d50e      	bpl.n	80070a6 <_svfiprintf_r+0x32>
 8007088:	690b      	ldr	r3, [r1, #16]
 800708a:	b963      	cbnz	r3, 80070a6 <_svfiprintf_r+0x32>
 800708c:	2140      	movs	r1, #64	; 0x40
 800708e:	f7ff ff21 	bl	8006ed4 <_malloc_r>
 8007092:	6028      	str	r0, [r5, #0]
 8007094:	6128      	str	r0, [r5, #16]
 8007096:	b920      	cbnz	r0, 80070a2 <_svfiprintf_r+0x2e>
 8007098:	230c      	movs	r3, #12
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e0d1      	b.n	8007246 <_svfiprintf_r+0x1d2>
 80070a2:	2340      	movs	r3, #64	; 0x40
 80070a4:	616b      	str	r3, [r5, #20]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9309      	str	r3, [sp, #36]	; 0x24
 80070aa:	2320      	movs	r3, #32
 80070ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b4:	2330      	movs	r3, #48	; 0x30
 80070b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007260 <_svfiprintf_r+0x1ec>
 80070ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070be:	f04f 0901 	mov.w	r9, #1
 80070c2:	4623      	mov	r3, r4
 80070c4:	469a      	mov	sl, r3
 80070c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ca:	b10a      	cbz	r2, 80070d0 <_svfiprintf_r+0x5c>
 80070cc:	2a25      	cmp	r2, #37	; 0x25
 80070ce:	d1f9      	bne.n	80070c4 <_svfiprintf_r+0x50>
 80070d0:	ebba 0b04 	subs.w	fp, sl, r4
 80070d4:	d00b      	beq.n	80070ee <_svfiprintf_r+0x7a>
 80070d6:	465b      	mov	r3, fp
 80070d8:	4622      	mov	r2, r4
 80070da:	4629      	mov	r1, r5
 80070dc:	4638      	mov	r0, r7
 80070de:	f7ff ff6d 	bl	8006fbc <__ssputs_r>
 80070e2:	3001      	adds	r0, #1
 80070e4:	f000 80aa 	beq.w	800723c <_svfiprintf_r+0x1c8>
 80070e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ea:	445a      	add	r2, fp
 80070ec:	9209      	str	r2, [sp, #36]	; 0x24
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80a2 	beq.w	800723c <_svfiprintf_r+0x1c8>
 80070f8:	2300      	movs	r3, #0
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007102:	f10a 0a01 	add.w	sl, sl, #1
 8007106:	9304      	str	r3, [sp, #16]
 8007108:	9307      	str	r3, [sp, #28]
 800710a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800710e:	931a      	str	r3, [sp, #104]	; 0x68
 8007110:	4654      	mov	r4, sl
 8007112:	2205      	movs	r2, #5
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	4851      	ldr	r0, [pc, #324]	; (8007260 <_svfiprintf_r+0x1ec>)
 800711a:	f7f9 f881 	bl	8000220 <memchr>
 800711e:	9a04      	ldr	r2, [sp, #16]
 8007120:	b9d8      	cbnz	r0, 800715a <_svfiprintf_r+0xe6>
 8007122:	06d0      	lsls	r0, r2, #27
 8007124:	bf44      	itt	mi
 8007126:	2320      	movmi	r3, #32
 8007128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712c:	0711      	lsls	r1, r2, #28
 800712e:	bf44      	itt	mi
 8007130:	232b      	movmi	r3, #43	; 0x2b
 8007132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007136:	f89a 3000 	ldrb.w	r3, [sl]
 800713a:	2b2a      	cmp	r3, #42	; 0x2a
 800713c:	d015      	beq.n	800716a <_svfiprintf_r+0xf6>
 800713e:	9a07      	ldr	r2, [sp, #28]
 8007140:	4654      	mov	r4, sl
 8007142:	2000      	movs	r0, #0
 8007144:	f04f 0c0a 	mov.w	ip, #10
 8007148:	4621      	mov	r1, r4
 800714a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800714e:	3b30      	subs	r3, #48	; 0x30
 8007150:	2b09      	cmp	r3, #9
 8007152:	d94e      	bls.n	80071f2 <_svfiprintf_r+0x17e>
 8007154:	b1b0      	cbz	r0, 8007184 <_svfiprintf_r+0x110>
 8007156:	9207      	str	r2, [sp, #28]
 8007158:	e014      	b.n	8007184 <_svfiprintf_r+0x110>
 800715a:	eba0 0308 	sub.w	r3, r0, r8
 800715e:	fa09 f303 	lsl.w	r3, r9, r3
 8007162:	4313      	orrs	r3, r2
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	46a2      	mov	sl, r4
 8007168:	e7d2      	b.n	8007110 <_svfiprintf_r+0x9c>
 800716a:	9b03      	ldr	r3, [sp, #12]
 800716c:	1d19      	adds	r1, r3, #4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	9103      	str	r1, [sp, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfbb      	ittet	lt
 8007176:	425b      	neglt	r3, r3
 8007178:	f042 0202 	orrlt.w	r2, r2, #2
 800717c:	9307      	strge	r3, [sp, #28]
 800717e:	9307      	strlt	r3, [sp, #28]
 8007180:	bfb8      	it	lt
 8007182:	9204      	strlt	r2, [sp, #16]
 8007184:	7823      	ldrb	r3, [r4, #0]
 8007186:	2b2e      	cmp	r3, #46	; 0x2e
 8007188:	d10c      	bne.n	80071a4 <_svfiprintf_r+0x130>
 800718a:	7863      	ldrb	r3, [r4, #1]
 800718c:	2b2a      	cmp	r3, #42	; 0x2a
 800718e:	d135      	bne.n	80071fc <_svfiprintf_r+0x188>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	9203      	str	r2, [sp, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	bfb8      	it	lt
 800719c:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a0:	3402      	adds	r4, #2
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007270 <_svfiprintf_r+0x1fc>
 80071a8:	7821      	ldrb	r1, [r4, #0]
 80071aa:	2203      	movs	r2, #3
 80071ac:	4650      	mov	r0, sl
 80071ae:	f7f9 f837 	bl	8000220 <memchr>
 80071b2:	b140      	cbz	r0, 80071c6 <_svfiprintf_r+0x152>
 80071b4:	2340      	movs	r3, #64	; 0x40
 80071b6:	eba0 000a 	sub.w	r0, r0, sl
 80071ba:	fa03 f000 	lsl.w	r0, r3, r0
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	4303      	orrs	r3, r0
 80071c2:	3401      	adds	r4, #1
 80071c4:	9304      	str	r3, [sp, #16]
 80071c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ca:	4826      	ldr	r0, [pc, #152]	; (8007264 <_svfiprintf_r+0x1f0>)
 80071cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d0:	2206      	movs	r2, #6
 80071d2:	f7f9 f825 	bl	8000220 <memchr>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d038      	beq.n	800724c <_svfiprintf_r+0x1d8>
 80071da:	4b23      	ldr	r3, [pc, #140]	; (8007268 <_svfiprintf_r+0x1f4>)
 80071dc:	bb1b      	cbnz	r3, 8007226 <_svfiprintf_r+0x1b2>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	3307      	adds	r3, #7
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	3308      	adds	r3, #8
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ec:	4433      	add	r3, r6
 80071ee:	9309      	str	r3, [sp, #36]	; 0x24
 80071f0:	e767      	b.n	80070c2 <_svfiprintf_r+0x4e>
 80071f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f6:	460c      	mov	r4, r1
 80071f8:	2001      	movs	r0, #1
 80071fa:	e7a5      	b.n	8007148 <_svfiprintf_r+0xd4>
 80071fc:	2300      	movs	r3, #0
 80071fe:	3401      	adds	r4, #1
 8007200:	9305      	str	r3, [sp, #20]
 8007202:	4619      	mov	r1, r3
 8007204:	f04f 0c0a 	mov.w	ip, #10
 8007208:	4620      	mov	r0, r4
 800720a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800720e:	3a30      	subs	r2, #48	; 0x30
 8007210:	2a09      	cmp	r2, #9
 8007212:	d903      	bls.n	800721c <_svfiprintf_r+0x1a8>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0c5      	beq.n	80071a4 <_svfiprintf_r+0x130>
 8007218:	9105      	str	r1, [sp, #20]
 800721a:	e7c3      	b.n	80071a4 <_svfiprintf_r+0x130>
 800721c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007220:	4604      	mov	r4, r0
 8007222:	2301      	movs	r3, #1
 8007224:	e7f0      	b.n	8007208 <_svfiprintf_r+0x194>
 8007226:	ab03      	add	r3, sp, #12
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	462a      	mov	r2, r5
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <_svfiprintf_r+0x1f8>)
 800722e:	a904      	add	r1, sp, #16
 8007230:	4638      	mov	r0, r7
 8007232:	f7fd ffcb 	bl	80051cc <_printf_float>
 8007236:	1c42      	adds	r2, r0, #1
 8007238:	4606      	mov	r6, r0
 800723a:	d1d6      	bne.n	80071ea <_svfiprintf_r+0x176>
 800723c:	89ab      	ldrh	r3, [r5, #12]
 800723e:	065b      	lsls	r3, r3, #25
 8007240:	f53f af2c 	bmi.w	800709c <_svfiprintf_r+0x28>
 8007244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007246:	b01d      	add	sp, #116	; 0x74
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	ab03      	add	r3, sp, #12
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	462a      	mov	r2, r5
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <_svfiprintf_r+0x1f8>)
 8007254:	a904      	add	r1, sp, #16
 8007256:	4638      	mov	r0, r7
 8007258:	f7fe fa5c 	bl	8005714 <_printf_i>
 800725c:	e7eb      	b.n	8007236 <_svfiprintf_r+0x1c2>
 800725e:	bf00      	nop
 8007260:	080080e4 	.word	0x080080e4
 8007264:	080080ee 	.word	0x080080ee
 8007268:	080051cd 	.word	0x080051cd
 800726c:	08006fbd 	.word	0x08006fbd
 8007270:	080080ea 	.word	0x080080ea

08007274 <_sbrk_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d06      	ldr	r5, [pc, #24]	; (8007290 <_sbrk_r+0x1c>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f7fa f99e 	bl	80015c0 <_sbrk>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_sbrk_r+0x1a>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_sbrk_r+0x1a>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20000338 	.word	0x20000338

08007294 <__assert_func>:
 8007294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007296:	4614      	mov	r4, r2
 8007298:	461a      	mov	r2, r3
 800729a:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <__assert_func+0x2c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4605      	mov	r5, r0
 80072a0:	68d8      	ldr	r0, [r3, #12]
 80072a2:	b14c      	cbz	r4, 80072b8 <__assert_func+0x24>
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <__assert_func+0x30>)
 80072a6:	9100      	str	r1, [sp, #0]
 80072a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072ac:	4906      	ldr	r1, [pc, #24]	; (80072c8 <__assert_func+0x34>)
 80072ae:	462b      	mov	r3, r5
 80072b0:	f000 f80e 	bl	80072d0 <fiprintf>
 80072b4:	f000 faac 	bl	8007810 <abort>
 80072b8:	4b04      	ldr	r3, [pc, #16]	; (80072cc <__assert_func+0x38>)
 80072ba:	461c      	mov	r4, r3
 80072bc:	e7f3      	b.n	80072a6 <__assert_func+0x12>
 80072be:	bf00      	nop
 80072c0:	2000000c 	.word	0x2000000c
 80072c4:	080080f5 	.word	0x080080f5
 80072c8:	08008102 	.word	0x08008102
 80072cc:	08008130 	.word	0x08008130

080072d0 <fiprintf>:
 80072d0:	b40e      	push	{r1, r2, r3}
 80072d2:	b503      	push	{r0, r1, lr}
 80072d4:	4601      	mov	r1, r0
 80072d6:	ab03      	add	r3, sp, #12
 80072d8:	4805      	ldr	r0, [pc, #20]	; (80072f0 <fiprintf+0x20>)
 80072da:	f853 2b04 	ldr.w	r2, [r3], #4
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	f000 f897 	bl	8007414 <_vfiprintf_r>
 80072e6:	b002      	add	sp, #8
 80072e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ec:	b003      	add	sp, #12
 80072ee:	4770      	bx	lr
 80072f0:	2000000c 	.word	0x2000000c

080072f4 <__ascii_mbtowc>:
 80072f4:	b082      	sub	sp, #8
 80072f6:	b901      	cbnz	r1, 80072fa <__ascii_mbtowc+0x6>
 80072f8:	a901      	add	r1, sp, #4
 80072fa:	b142      	cbz	r2, 800730e <__ascii_mbtowc+0x1a>
 80072fc:	b14b      	cbz	r3, 8007312 <__ascii_mbtowc+0x1e>
 80072fe:	7813      	ldrb	r3, [r2, #0]
 8007300:	600b      	str	r3, [r1, #0]
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	1e10      	subs	r0, r2, #0
 8007306:	bf18      	it	ne
 8007308:	2001      	movne	r0, #1
 800730a:	b002      	add	sp, #8
 800730c:	4770      	bx	lr
 800730e:	4610      	mov	r0, r2
 8007310:	e7fb      	b.n	800730a <__ascii_mbtowc+0x16>
 8007312:	f06f 0001 	mvn.w	r0, #1
 8007316:	e7f8      	b.n	800730a <__ascii_mbtowc+0x16>

08007318 <memmove>:
 8007318:	4288      	cmp	r0, r1
 800731a:	b510      	push	{r4, lr}
 800731c:	eb01 0402 	add.w	r4, r1, r2
 8007320:	d902      	bls.n	8007328 <memmove+0x10>
 8007322:	4284      	cmp	r4, r0
 8007324:	4623      	mov	r3, r4
 8007326:	d807      	bhi.n	8007338 <memmove+0x20>
 8007328:	1e43      	subs	r3, r0, #1
 800732a:	42a1      	cmp	r1, r4
 800732c:	d008      	beq.n	8007340 <memmove+0x28>
 800732e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007336:	e7f8      	b.n	800732a <memmove+0x12>
 8007338:	4402      	add	r2, r0
 800733a:	4601      	mov	r1, r0
 800733c:	428a      	cmp	r2, r1
 800733e:	d100      	bne.n	8007342 <memmove+0x2a>
 8007340:	bd10      	pop	{r4, pc}
 8007342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800734a:	e7f7      	b.n	800733c <memmove+0x24>

0800734c <__malloc_lock>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__malloc_lock+0x8>)
 800734e:	f000 bc1f 	b.w	8007b90 <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	2000033c 	.word	0x2000033c

08007358 <__malloc_unlock>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__malloc_unlock+0x8>)
 800735a:	f000 bc1a 	b.w	8007b92 <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	2000033c 	.word	0x2000033c

08007364 <_realloc_r>:
 8007364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007368:	4680      	mov	r8, r0
 800736a:	4614      	mov	r4, r2
 800736c:	460e      	mov	r6, r1
 800736e:	b921      	cbnz	r1, 800737a <_realloc_r+0x16>
 8007370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	4611      	mov	r1, r2
 8007376:	f7ff bdad 	b.w	8006ed4 <_malloc_r>
 800737a:	b92a      	cbnz	r2, 8007388 <_realloc_r+0x24>
 800737c:	f7ff fd3e 	bl	8006dfc <_free_r>
 8007380:	4625      	mov	r5, r4
 8007382:	4628      	mov	r0, r5
 8007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007388:	f000 fc6a 	bl	8007c60 <_malloc_usable_size_r>
 800738c:	4284      	cmp	r4, r0
 800738e:	4607      	mov	r7, r0
 8007390:	d802      	bhi.n	8007398 <_realloc_r+0x34>
 8007392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007396:	d812      	bhi.n	80073be <_realloc_r+0x5a>
 8007398:	4621      	mov	r1, r4
 800739a:	4640      	mov	r0, r8
 800739c:	f7ff fd9a 	bl	8006ed4 <_malloc_r>
 80073a0:	4605      	mov	r5, r0
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d0ed      	beq.n	8007382 <_realloc_r+0x1e>
 80073a6:	42bc      	cmp	r4, r7
 80073a8:	4622      	mov	r2, r4
 80073aa:	4631      	mov	r1, r6
 80073ac:	bf28      	it	cs
 80073ae:	463a      	movcs	r2, r7
 80073b0:	f7ff f97c 	bl	80066ac <memcpy>
 80073b4:	4631      	mov	r1, r6
 80073b6:	4640      	mov	r0, r8
 80073b8:	f7ff fd20 	bl	8006dfc <_free_r>
 80073bc:	e7e1      	b.n	8007382 <_realloc_r+0x1e>
 80073be:	4635      	mov	r5, r6
 80073c0:	e7df      	b.n	8007382 <_realloc_r+0x1e>

080073c2 <__sfputc_r>:
 80073c2:	6893      	ldr	r3, [r2, #8]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	b410      	push	{r4}
 80073ca:	6093      	str	r3, [r2, #8]
 80073cc:	da08      	bge.n	80073e0 <__sfputc_r+0x1e>
 80073ce:	6994      	ldr	r4, [r2, #24]
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	db01      	blt.n	80073d8 <__sfputc_r+0x16>
 80073d4:	290a      	cmp	r1, #10
 80073d6:	d103      	bne.n	80073e0 <__sfputc_r+0x1e>
 80073d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073dc:	f000 b94a 	b.w	8007674 <__swbuf_r>
 80073e0:	6813      	ldr	r3, [r2, #0]
 80073e2:	1c58      	adds	r0, r3, #1
 80073e4:	6010      	str	r0, [r2, #0]
 80073e6:	7019      	strb	r1, [r3, #0]
 80073e8:	4608      	mov	r0, r1
 80073ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <__sfputs_r>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	4606      	mov	r6, r0
 80073f4:	460f      	mov	r7, r1
 80073f6:	4614      	mov	r4, r2
 80073f8:	18d5      	adds	r5, r2, r3
 80073fa:	42ac      	cmp	r4, r5
 80073fc:	d101      	bne.n	8007402 <__sfputs_r+0x12>
 80073fe:	2000      	movs	r0, #0
 8007400:	e007      	b.n	8007412 <__sfputs_r+0x22>
 8007402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007406:	463a      	mov	r2, r7
 8007408:	4630      	mov	r0, r6
 800740a:	f7ff ffda 	bl	80073c2 <__sfputc_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d1f3      	bne.n	80073fa <__sfputs_r+0xa>
 8007412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007414 <_vfiprintf_r>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	460d      	mov	r5, r1
 800741a:	b09d      	sub	sp, #116	; 0x74
 800741c:	4614      	mov	r4, r2
 800741e:	4698      	mov	r8, r3
 8007420:	4606      	mov	r6, r0
 8007422:	b118      	cbz	r0, 800742c <_vfiprintf_r+0x18>
 8007424:	6983      	ldr	r3, [r0, #24]
 8007426:	b90b      	cbnz	r3, 800742c <_vfiprintf_r+0x18>
 8007428:	f000 fb14 	bl	8007a54 <__sinit>
 800742c:	4b89      	ldr	r3, [pc, #548]	; (8007654 <_vfiprintf_r+0x240>)
 800742e:	429d      	cmp	r5, r3
 8007430:	d11b      	bne.n	800746a <_vfiprintf_r+0x56>
 8007432:	6875      	ldr	r5, [r6, #4]
 8007434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007436:	07d9      	lsls	r1, r3, #31
 8007438:	d405      	bmi.n	8007446 <_vfiprintf_r+0x32>
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	059a      	lsls	r2, r3, #22
 800743e:	d402      	bmi.n	8007446 <_vfiprintf_r+0x32>
 8007440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007442:	f000 fba5 	bl	8007b90 <__retarget_lock_acquire_recursive>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	071b      	lsls	r3, r3, #28
 800744a:	d501      	bpl.n	8007450 <_vfiprintf_r+0x3c>
 800744c:	692b      	ldr	r3, [r5, #16]
 800744e:	b9eb      	cbnz	r3, 800748c <_vfiprintf_r+0x78>
 8007450:	4629      	mov	r1, r5
 8007452:	4630      	mov	r0, r6
 8007454:	f000 f96e 	bl	8007734 <__swsetup_r>
 8007458:	b1c0      	cbz	r0, 800748c <_vfiprintf_r+0x78>
 800745a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800745c:	07dc      	lsls	r4, r3, #31
 800745e:	d50e      	bpl.n	800747e <_vfiprintf_r+0x6a>
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	b01d      	add	sp, #116	; 0x74
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746a:	4b7b      	ldr	r3, [pc, #492]	; (8007658 <_vfiprintf_r+0x244>)
 800746c:	429d      	cmp	r5, r3
 800746e:	d101      	bne.n	8007474 <_vfiprintf_r+0x60>
 8007470:	68b5      	ldr	r5, [r6, #8]
 8007472:	e7df      	b.n	8007434 <_vfiprintf_r+0x20>
 8007474:	4b79      	ldr	r3, [pc, #484]	; (800765c <_vfiprintf_r+0x248>)
 8007476:	429d      	cmp	r5, r3
 8007478:	bf08      	it	eq
 800747a:	68f5      	ldreq	r5, [r6, #12]
 800747c:	e7da      	b.n	8007434 <_vfiprintf_r+0x20>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	0598      	lsls	r0, r3, #22
 8007482:	d4ed      	bmi.n	8007460 <_vfiprintf_r+0x4c>
 8007484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007486:	f000 fb84 	bl	8007b92 <__retarget_lock_release_recursive>
 800748a:	e7e9      	b.n	8007460 <_vfiprintf_r+0x4c>
 800748c:	2300      	movs	r3, #0
 800748e:	9309      	str	r3, [sp, #36]	; 0x24
 8007490:	2320      	movs	r3, #32
 8007492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007496:	f8cd 800c 	str.w	r8, [sp, #12]
 800749a:	2330      	movs	r3, #48	; 0x30
 800749c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007660 <_vfiprintf_r+0x24c>
 80074a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074a4:	f04f 0901 	mov.w	r9, #1
 80074a8:	4623      	mov	r3, r4
 80074aa:	469a      	mov	sl, r3
 80074ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b0:	b10a      	cbz	r2, 80074b6 <_vfiprintf_r+0xa2>
 80074b2:	2a25      	cmp	r2, #37	; 0x25
 80074b4:	d1f9      	bne.n	80074aa <_vfiprintf_r+0x96>
 80074b6:	ebba 0b04 	subs.w	fp, sl, r4
 80074ba:	d00b      	beq.n	80074d4 <_vfiprintf_r+0xc0>
 80074bc:	465b      	mov	r3, fp
 80074be:	4622      	mov	r2, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ff94 	bl	80073f0 <__sfputs_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	f000 80aa 	beq.w	8007622 <_vfiprintf_r+0x20e>
 80074ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d0:	445a      	add	r2, fp
 80074d2:	9209      	str	r2, [sp, #36]	; 0x24
 80074d4:	f89a 3000 	ldrb.w	r3, [sl]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80a2 	beq.w	8007622 <_vfiprintf_r+0x20e>
 80074de:	2300      	movs	r3, #0
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e8:	f10a 0a01 	add.w	sl, sl, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074f4:	931a      	str	r3, [sp, #104]	; 0x68
 80074f6:	4654      	mov	r4, sl
 80074f8:	2205      	movs	r2, #5
 80074fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fe:	4858      	ldr	r0, [pc, #352]	; (8007660 <_vfiprintf_r+0x24c>)
 8007500:	f7f8 fe8e 	bl	8000220 <memchr>
 8007504:	9a04      	ldr	r2, [sp, #16]
 8007506:	b9d8      	cbnz	r0, 8007540 <_vfiprintf_r+0x12c>
 8007508:	06d1      	lsls	r1, r2, #27
 800750a:	bf44      	itt	mi
 800750c:	2320      	movmi	r3, #32
 800750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007512:	0713      	lsls	r3, r2, #28
 8007514:	bf44      	itt	mi
 8007516:	232b      	movmi	r3, #43	; 0x2b
 8007518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751c:	f89a 3000 	ldrb.w	r3, [sl]
 8007520:	2b2a      	cmp	r3, #42	; 0x2a
 8007522:	d015      	beq.n	8007550 <_vfiprintf_r+0x13c>
 8007524:	9a07      	ldr	r2, [sp, #28]
 8007526:	4654      	mov	r4, sl
 8007528:	2000      	movs	r0, #0
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	4621      	mov	r1, r4
 8007530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007534:	3b30      	subs	r3, #48	; 0x30
 8007536:	2b09      	cmp	r3, #9
 8007538:	d94e      	bls.n	80075d8 <_vfiprintf_r+0x1c4>
 800753a:	b1b0      	cbz	r0, 800756a <_vfiprintf_r+0x156>
 800753c:	9207      	str	r2, [sp, #28]
 800753e:	e014      	b.n	800756a <_vfiprintf_r+0x156>
 8007540:	eba0 0308 	sub.w	r3, r0, r8
 8007544:	fa09 f303 	lsl.w	r3, r9, r3
 8007548:	4313      	orrs	r3, r2
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	46a2      	mov	sl, r4
 800754e:	e7d2      	b.n	80074f6 <_vfiprintf_r+0xe2>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	1d19      	adds	r1, r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	9103      	str	r1, [sp, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	bfbb      	ittet	lt
 800755c:	425b      	neglt	r3, r3
 800755e:	f042 0202 	orrlt.w	r2, r2, #2
 8007562:	9307      	strge	r3, [sp, #28]
 8007564:	9307      	strlt	r3, [sp, #28]
 8007566:	bfb8      	it	lt
 8007568:	9204      	strlt	r2, [sp, #16]
 800756a:	7823      	ldrb	r3, [r4, #0]
 800756c:	2b2e      	cmp	r3, #46	; 0x2e
 800756e:	d10c      	bne.n	800758a <_vfiprintf_r+0x176>
 8007570:	7863      	ldrb	r3, [r4, #1]
 8007572:	2b2a      	cmp	r3, #42	; 0x2a
 8007574:	d135      	bne.n	80075e2 <_vfiprintf_r+0x1ce>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9203      	str	r2, [sp, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	bfb8      	it	lt
 8007582:	f04f 33ff 	movlt.w	r3, #4294967295
 8007586:	3402      	adds	r4, #2
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007670 <_vfiprintf_r+0x25c>
 800758e:	7821      	ldrb	r1, [r4, #0]
 8007590:	2203      	movs	r2, #3
 8007592:	4650      	mov	r0, sl
 8007594:	f7f8 fe44 	bl	8000220 <memchr>
 8007598:	b140      	cbz	r0, 80075ac <_vfiprintf_r+0x198>
 800759a:	2340      	movs	r3, #64	; 0x40
 800759c:	eba0 000a 	sub.w	r0, r0, sl
 80075a0:	fa03 f000 	lsl.w	r0, r3, r0
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	4303      	orrs	r3, r0
 80075a8:	3401      	adds	r4, #1
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b0:	482c      	ldr	r0, [pc, #176]	; (8007664 <_vfiprintf_r+0x250>)
 80075b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075b6:	2206      	movs	r2, #6
 80075b8:	f7f8 fe32 	bl	8000220 <memchr>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d03f      	beq.n	8007640 <_vfiprintf_r+0x22c>
 80075c0:	4b29      	ldr	r3, [pc, #164]	; (8007668 <_vfiprintf_r+0x254>)
 80075c2:	bb1b      	cbnz	r3, 800760c <_vfiprintf_r+0x1f8>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	3307      	adds	r3, #7
 80075c8:	f023 0307 	bic.w	r3, r3, #7
 80075cc:	3308      	adds	r3, #8
 80075ce:	9303      	str	r3, [sp, #12]
 80075d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d2:	443b      	add	r3, r7
 80075d4:	9309      	str	r3, [sp, #36]	; 0x24
 80075d6:	e767      	b.n	80074a8 <_vfiprintf_r+0x94>
 80075d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075dc:	460c      	mov	r4, r1
 80075de:	2001      	movs	r0, #1
 80075e0:	e7a5      	b.n	800752e <_vfiprintf_r+0x11a>
 80075e2:	2300      	movs	r3, #0
 80075e4:	3401      	adds	r4, #1
 80075e6:	9305      	str	r3, [sp, #20]
 80075e8:	4619      	mov	r1, r3
 80075ea:	f04f 0c0a 	mov.w	ip, #10
 80075ee:	4620      	mov	r0, r4
 80075f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075f4:	3a30      	subs	r2, #48	; 0x30
 80075f6:	2a09      	cmp	r2, #9
 80075f8:	d903      	bls.n	8007602 <_vfiprintf_r+0x1ee>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0c5      	beq.n	800758a <_vfiprintf_r+0x176>
 80075fe:	9105      	str	r1, [sp, #20]
 8007600:	e7c3      	b.n	800758a <_vfiprintf_r+0x176>
 8007602:	fb0c 2101 	mla	r1, ip, r1, r2
 8007606:	4604      	mov	r4, r0
 8007608:	2301      	movs	r3, #1
 800760a:	e7f0      	b.n	80075ee <_vfiprintf_r+0x1da>
 800760c:	ab03      	add	r3, sp, #12
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	462a      	mov	r2, r5
 8007612:	4b16      	ldr	r3, [pc, #88]	; (800766c <_vfiprintf_r+0x258>)
 8007614:	a904      	add	r1, sp, #16
 8007616:	4630      	mov	r0, r6
 8007618:	f7fd fdd8 	bl	80051cc <_printf_float>
 800761c:	4607      	mov	r7, r0
 800761e:	1c78      	adds	r0, r7, #1
 8007620:	d1d6      	bne.n	80075d0 <_vfiprintf_r+0x1bc>
 8007622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007624:	07d9      	lsls	r1, r3, #31
 8007626:	d405      	bmi.n	8007634 <_vfiprintf_r+0x220>
 8007628:	89ab      	ldrh	r3, [r5, #12]
 800762a:	059a      	lsls	r2, r3, #22
 800762c:	d402      	bmi.n	8007634 <_vfiprintf_r+0x220>
 800762e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007630:	f000 faaf 	bl	8007b92 <__retarget_lock_release_recursive>
 8007634:	89ab      	ldrh	r3, [r5, #12]
 8007636:	065b      	lsls	r3, r3, #25
 8007638:	f53f af12 	bmi.w	8007460 <_vfiprintf_r+0x4c>
 800763c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800763e:	e711      	b.n	8007464 <_vfiprintf_r+0x50>
 8007640:	ab03      	add	r3, sp, #12
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	462a      	mov	r2, r5
 8007646:	4b09      	ldr	r3, [pc, #36]	; (800766c <_vfiprintf_r+0x258>)
 8007648:	a904      	add	r1, sp, #16
 800764a:	4630      	mov	r0, r6
 800764c:	f7fe f862 	bl	8005714 <_printf_i>
 8007650:	e7e4      	b.n	800761c <_vfiprintf_r+0x208>
 8007652:	bf00      	nop
 8007654:	0800825c 	.word	0x0800825c
 8007658:	0800827c 	.word	0x0800827c
 800765c:	0800823c 	.word	0x0800823c
 8007660:	080080e4 	.word	0x080080e4
 8007664:	080080ee 	.word	0x080080ee
 8007668:	080051cd 	.word	0x080051cd
 800766c:	080073f1 	.word	0x080073f1
 8007670:	080080ea 	.word	0x080080ea

08007674 <__swbuf_r>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	460e      	mov	r6, r1
 8007678:	4614      	mov	r4, r2
 800767a:	4605      	mov	r5, r0
 800767c:	b118      	cbz	r0, 8007686 <__swbuf_r+0x12>
 800767e:	6983      	ldr	r3, [r0, #24]
 8007680:	b90b      	cbnz	r3, 8007686 <__swbuf_r+0x12>
 8007682:	f000 f9e7 	bl	8007a54 <__sinit>
 8007686:	4b21      	ldr	r3, [pc, #132]	; (800770c <__swbuf_r+0x98>)
 8007688:	429c      	cmp	r4, r3
 800768a:	d12b      	bne.n	80076e4 <__swbuf_r+0x70>
 800768c:	686c      	ldr	r4, [r5, #4]
 800768e:	69a3      	ldr	r3, [r4, #24]
 8007690:	60a3      	str	r3, [r4, #8]
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	071a      	lsls	r2, r3, #28
 8007696:	d52f      	bpl.n	80076f8 <__swbuf_r+0x84>
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	b36b      	cbz	r3, 80076f8 <__swbuf_r+0x84>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	1ac0      	subs	r0, r0, r3
 80076a2:	6963      	ldr	r3, [r4, #20]
 80076a4:	b2f6      	uxtb	r6, r6
 80076a6:	4283      	cmp	r3, r0
 80076a8:	4637      	mov	r7, r6
 80076aa:	dc04      	bgt.n	80076b6 <__swbuf_r+0x42>
 80076ac:	4621      	mov	r1, r4
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 f93c 	bl	800792c <_fflush_r>
 80076b4:	bb30      	cbnz	r0, 8007704 <__swbuf_r+0x90>
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	60a3      	str	r3, [r4, #8]
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	701e      	strb	r6, [r3, #0]
 80076c4:	6963      	ldr	r3, [r4, #20]
 80076c6:	3001      	adds	r0, #1
 80076c8:	4283      	cmp	r3, r0
 80076ca:	d004      	beq.n	80076d6 <__swbuf_r+0x62>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	07db      	lsls	r3, r3, #31
 80076d0:	d506      	bpl.n	80076e0 <__swbuf_r+0x6c>
 80076d2:	2e0a      	cmp	r6, #10
 80076d4:	d104      	bne.n	80076e0 <__swbuf_r+0x6c>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 f927 	bl	800792c <_fflush_r>
 80076de:	b988      	cbnz	r0, 8007704 <__swbuf_r+0x90>
 80076e0:	4638      	mov	r0, r7
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <__swbuf_r+0x9c>)
 80076e6:	429c      	cmp	r4, r3
 80076e8:	d101      	bne.n	80076ee <__swbuf_r+0x7a>
 80076ea:	68ac      	ldr	r4, [r5, #8]
 80076ec:	e7cf      	b.n	800768e <__swbuf_r+0x1a>
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <__swbuf_r+0xa0>)
 80076f0:	429c      	cmp	r4, r3
 80076f2:	bf08      	it	eq
 80076f4:	68ec      	ldreq	r4, [r5, #12]
 80076f6:	e7ca      	b.n	800768e <__swbuf_r+0x1a>
 80076f8:	4621      	mov	r1, r4
 80076fa:	4628      	mov	r0, r5
 80076fc:	f000 f81a 	bl	8007734 <__swsetup_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	d0cb      	beq.n	800769c <__swbuf_r+0x28>
 8007704:	f04f 37ff 	mov.w	r7, #4294967295
 8007708:	e7ea      	b.n	80076e0 <__swbuf_r+0x6c>
 800770a:	bf00      	nop
 800770c:	0800825c 	.word	0x0800825c
 8007710:	0800827c 	.word	0x0800827c
 8007714:	0800823c 	.word	0x0800823c

08007718 <__ascii_wctomb>:
 8007718:	b149      	cbz	r1, 800772e <__ascii_wctomb+0x16>
 800771a:	2aff      	cmp	r2, #255	; 0xff
 800771c:	bf85      	ittet	hi
 800771e:	238a      	movhi	r3, #138	; 0x8a
 8007720:	6003      	strhi	r3, [r0, #0]
 8007722:	700a      	strbls	r2, [r1, #0]
 8007724:	f04f 30ff 	movhi.w	r0, #4294967295
 8007728:	bf98      	it	ls
 800772a:	2001      	movls	r0, #1
 800772c:	4770      	bx	lr
 800772e:	4608      	mov	r0, r1
 8007730:	4770      	bx	lr
	...

08007734 <__swsetup_r>:
 8007734:	4b32      	ldr	r3, [pc, #200]	; (8007800 <__swsetup_r+0xcc>)
 8007736:	b570      	push	{r4, r5, r6, lr}
 8007738:	681d      	ldr	r5, [r3, #0]
 800773a:	4606      	mov	r6, r0
 800773c:	460c      	mov	r4, r1
 800773e:	b125      	cbz	r5, 800774a <__swsetup_r+0x16>
 8007740:	69ab      	ldr	r3, [r5, #24]
 8007742:	b913      	cbnz	r3, 800774a <__swsetup_r+0x16>
 8007744:	4628      	mov	r0, r5
 8007746:	f000 f985 	bl	8007a54 <__sinit>
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <__swsetup_r+0xd0>)
 800774c:	429c      	cmp	r4, r3
 800774e:	d10f      	bne.n	8007770 <__swsetup_r+0x3c>
 8007750:	686c      	ldr	r4, [r5, #4]
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007758:	0719      	lsls	r1, r3, #28
 800775a:	d42c      	bmi.n	80077b6 <__swsetup_r+0x82>
 800775c:	06dd      	lsls	r5, r3, #27
 800775e:	d411      	bmi.n	8007784 <__swsetup_r+0x50>
 8007760:	2309      	movs	r3, #9
 8007762:	6033      	str	r3, [r6, #0]
 8007764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	f04f 30ff 	mov.w	r0, #4294967295
 800776e:	e03e      	b.n	80077ee <__swsetup_r+0xba>
 8007770:	4b25      	ldr	r3, [pc, #148]	; (8007808 <__swsetup_r+0xd4>)
 8007772:	429c      	cmp	r4, r3
 8007774:	d101      	bne.n	800777a <__swsetup_r+0x46>
 8007776:	68ac      	ldr	r4, [r5, #8]
 8007778:	e7eb      	b.n	8007752 <__swsetup_r+0x1e>
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <__swsetup_r+0xd8>)
 800777c:	429c      	cmp	r4, r3
 800777e:	bf08      	it	eq
 8007780:	68ec      	ldreq	r4, [r5, #12]
 8007782:	e7e6      	b.n	8007752 <__swsetup_r+0x1e>
 8007784:	0758      	lsls	r0, r3, #29
 8007786:	d512      	bpl.n	80077ae <__swsetup_r+0x7a>
 8007788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800778a:	b141      	cbz	r1, 800779e <__swsetup_r+0x6a>
 800778c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007790:	4299      	cmp	r1, r3
 8007792:	d002      	beq.n	800779a <__swsetup_r+0x66>
 8007794:	4630      	mov	r0, r6
 8007796:	f7ff fb31 	bl	8006dfc <_free_r>
 800779a:	2300      	movs	r3, #0
 800779c:	6363      	str	r3, [r4, #52]	; 0x34
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	2300      	movs	r3, #0
 80077a8:	6063      	str	r3, [r4, #4]
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f043 0308 	orr.w	r3, r3, #8
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	b94b      	cbnz	r3, 80077ce <__swsetup_r+0x9a>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c4:	d003      	beq.n	80077ce <__swsetup_r+0x9a>
 80077c6:	4621      	mov	r1, r4
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 fa09 	bl	8007be0 <__smakebuf_r>
 80077ce:	89a0      	ldrh	r0, [r4, #12]
 80077d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077d4:	f010 0301 	ands.w	r3, r0, #1
 80077d8:	d00a      	beq.n	80077f0 <__swsetup_r+0xbc>
 80077da:	2300      	movs	r3, #0
 80077dc:	60a3      	str	r3, [r4, #8]
 80077de:	6963      	ldr	r3, [r4, #20]
 80077e0:	425b      	negs	r3, r3
 80077e2:	61a3      	str	r3, [r4, #24]
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	b943      	cbnz	r3, 80077fa <__swsetup_r+0xc6>
 80077e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077ec:	d1ba      	bne.n	8007764 <__swsetup_r+0x30>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	0781      	lsls	r1, r0, #30
 80077f2:	bf58      	it	pl
 80077f4:	6963      	ldrpl	r3, [r4, #20]
 80077f6:	60a3      	str	r3, [r4, #8]
 80077f8:	e7f4      	b.n	80077e4 <__swsetup_r+0xb0>
 80077fa:	2000      	movs	r0, #0
 80077fc:	e7f7      	b.n	80077ee <__swsetup_r+0xba>
 80077fe:	bf00      	nop
 8007800:	2000000c 	.word	0x2000000c
 8007804:	0800825c 	.word	0x0800825c
 8007808:	0800827c 	.word	0x0800827c
 800780c:	0800823c 	.word	0x0800823c

08007810 <abort>:
 8007810:	b508      	push	{r3, lr}
 8007812:	2006      	movs	r0, #6
 8007814:	f000 fa54 	bl	8007cc0 <raise>
 8007818:	2001      	movs	r0, #1
 800781a:	f7f9 fe59 	bl	80014d0 <_exit>
	...

08007820 <__sflush_r>:
 8007820:	898a      	ldrh	r2, [r1, #12]
 8007822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	4605      	mov	r5, r0
 8007828:	0710      	lsls	r0, r2, #28
 800782a:	460c      	mov	r4, r1
 800782c:	d458      	bmi.n	80078e0 <__sflush_r+0xc0>
 800782e:	684b      	ldr	r3, [r1, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	dc05      	bgt.n	8007840 <__sflush_r+0x20>
 8007834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	dc02      	bgt.n	8007840 <__sflush_r+0x20>
 800783a:	2000      	movs	r0, #0
 800783c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007842:	2e00      	cmp	r6, #0
 8007844:	d0f9      	beq.n	800783a <__sflush_r+0x1a>
 8007846:	2300      	movs	r3, #0
 8007848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800784c:	682f      	ldr	r7, [r5, #0]
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	d032      	beq.n	80078b8 <__sflush_r+0x98>
 8007852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	075a      	lsls	r2, r3, #29
 8007858:	d505      	bpl.n	8007866 <__sflush_r+0x46>
 800785a:	6863      	ldr	r3, [r4, #4]
 800785c:	1ac0      	subs	r0, r0, r3
 800785e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007860:	b10b      	cbz	r3, 8007866 <__sflush_r+0x46>
 8007862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007864:	1ac0      	subs	r0, r0, r3
 8007866:	2300      	movs	r3, #0
 8007868:	4602      	mov	r2, r0
 800786a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786c:	6a21      	ldr	r1, [r4, #32]
 800786e:	4628      	mov	r0, r5
 8007870:	47b0      	blx	r6
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	d106      	bne.n	8007886 <__sflush_r+0x66>
 8007878:	6829      	ldr	r1, [r5, #0]
 800787a:	291d      	cmp	r1, #29
 800787c:	d82c      	bhi.n	80078d8 <__sflush_r+0xb8>
 800787e:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <__sflush_r+0x108>)
 8007880:	40ca      	lsrs	r2, r1
 8007882:	07d6      	lsls	r6, r2, #31
 8007884:	d528      	bpl.n	80078d8 <__sflush_r+0xb8>
 8007886:	2200      	movs	r2, #0
 8007888:	6062      	str	r2, [r4, #4]
 800788a:	04d9      	lsls	r1, r3, #19
 800788c:	6922      	ldr	r2, [r4, #16]
 800788e:	6022      	str	r2, [r4, #0]
 8007890:	d504      	bpl.n	800789c <__sflush_r+0x7c>
 8007892:	1c42      	adds	r2, r0, #1
 8007894:	d101      	bne.n	800789a <__sflush_r+0x7a>
 8007896:	682b      	ldr	r3, [r5, #0]
 8007898:	b903      	cbnz	r3, 800789c <__sflush_r+0x7c>
 800789a:	6560      	str	r0, [r4, #84]	; 0x54
 800789c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800789e:	602f      	str	r7, [r5, #0]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	d0ca      	beq.n	800783a <__sflush_r+0x1a>
 80078a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d002      	beq.n	80078b2 <__sflush_r+0x92>
 80078ac:	4628      	mov	r0, r5
 80078ae:	f7ff faa5 	bl	8006dfc <_free_r>
 80078b2:	2000      	movs	r0, #0
 80078b4:	6360      	str	r0, [r4, #52]	; 0x34
 80078b6:	e7c1      	b.n	800783c <__sflush_r+0x1c>
 80078b8:	6a21      	ldr	r1, [r4, #32]
 80078ba:	2301      	movs	r3, #1
 80078bc:	4628      	mov	r0, r5
 80078be:	47b0      	blx	r6
 80078c0:	1c41      	adds	r1, r0, #1
 80078c2:	d1c7      	bne.n	8007854 <__sflush_r+0x34>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0c4      	beq.n	8007854 <__sflush_r+0x34>
 80078ca:	2b1d      	cmp	r3, #29
 80078cc:	d001      	beq.n	80078d2 <__sflush_r+0xb2>
 80078ce:	2b16      	cmp	r3, #22
 80078d0:	d101      	bne.n	80078d6 <__sflush_r+0xb6>
 80078d2:	602f      	str	r7, [r5, #0]
 80078d4:	e7b1      	b.n	800783a <__sflush_r+0x1a>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	e7ad      	b.n	800783c <__sflush_r+0x1c>
 80078e0:	690f      	ldr	r7, [r1, #16]
 80078e2:	2f00      	cmp	r7, #0
 80078e4:	d0a9      	beq.n	800783a <__sflush_r+0x1a>
 80078e6:	0793      	lsls	r3, r2, #30
 80078e8:	680e      	ldr	r6, [r1, #0]
 80078ea:	bf08      	it	eq
 80078ec:	694b      	ldreq	r3, [r1, #20]
 80078ee:	600f      	str	r7, [r1, #0]
 80078f0:	bf18      	it	ne
 80078f2:	2300      	movne	r3, #0
 80078f4:	eba6 0807 	sub.w	r8, r6, r7
 80078f8:	608b      	str	r3, [r1, #8]
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	dd9c      	ble.n	800783a <__sflush_r+0x1a>
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007904:	4643      	mov	r3, r8
 8007906:	463a      	mov	r2, r7
 8007908:	4628      	mov	r0, r5
 800790a:	47b0      	blx	r6
 800790c:	2800      	cmp	r0, #0
 800790e:	dc06      	bgt.n	800791e <__sflush_r+0xfe>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e78e      	b.n	800783c <__sflush_r+0x1c>
 800791e:	4407      	add	r7, r0
 8007920:	eba8 0800 	sub.w	r8, r8, r0
 8007924:	e7e9      	b.n	80078fa <__sflush_r+0xda>
 8007926:	bf00      	nop
 8007928:	20400001 	.word	0x20400001

0800792c <_fflush_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	690b      	ldr	r3, [r1, #16]
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b913      	cbnz	r3, 800793c <_fflush_r+0x10>
 8007936:	2500      	movs	r5, #0
 8007938:	4628      	mov	r0, r5
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	b118      	cbz	r0, 8007946 <_fflush_r+0x1a>
 800793e:	6983      	ldr	r3, [r0, #24]
 8007940:	b90b      	cbnz	r3, 8007946 <_fflush_r+0x1a>
 8007942:	f000 f887 	bl	8007a54 <__sinit>
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <_fflush_r+0x6c>)
 8007948:	429c      	cmp	r4, r3
 800794a:	d11b      	bne.n	8007984 <_fflush_r+0x58>
 800794c:	686c      	ldr	r4, [r5, #4]
 800794e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0ef      	beq.n	8007936 <_fflush_r+0xa>
 8007956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007958:	07d0      	lsls	r0, r2, #31
 800795a:	d404      	bmi.n	8007966 <_fflush_r+0x3a>
 800795c:	0599      	lsls	r1, r3, #22
 800795e:	d402      	bmi.n	8007966 <_fflush_r+0x3a>
 8007960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007962:	f000 f915 	bl	8007b90 <__retarget_lock_acquire_recursive>
 8007966:	4628      	mov	r0, r5
 8007968:	4621      	mov	r1, r4
 800796a:	f7ff ff59 	bl	8007820 <__sflush_r>
 800796e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007970:	07da      	lsls	r2, r3, #31
 8007972:	4605      	mov	r5, r0
 8007974:	d4e0      	bmi.n	8007938 <_fflush_r+0xc>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	059b      	lsls	r3, r3, #22
 800797a:	d4dd      	bmi.n	8007938 <_fflush_r+0xc>
 800797c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800797e:	f000 f908 	bl	8007b92 <__retarget_lock_release_recursive>
 8007982:	e7d9      	b.n	8007938 <_fflush_r+0xc>
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <_fflush_r+0x70>)
 8007986:	429c      	cmp	r4, r3
 8007988:	d101      	bne.n	800798e <_fflush_r+0x62>
 800798a:	68ac      	ldr	r4, [r5, #8]
 800798c:	e7df      	b.n	800794e <_fflush_r+0x22>
 800798e:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <_fflush_r+0x74>)
 8007990:	429c      	cmp	r4, r3
 8007992:	bf08      	it	eq
 8007994:	68ec      	ldreq	r4, [r5, #12]
 8007996:	e7da      	b.n	800794e <_fflush_r+0x22>
 8007998:	0800825c 	.word	0x0800825c
 800799c:	0800827c 	.word	0x0800827c
 80079a0:	0800823c 	.word	0x0800823c

080079a4 <std>:
 80079a4:	2300      	movs	r3, #0
 80079a6:	b510      	push	{r4, lr}
 80079a8:	4604      	mov	r4, r0
 80079aa:	e9c0 3300 	strd	r3, r3, [r0]
 80079ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079b2:	6083      	str	r3, [r0, #8]
 80079b4:	8181      	strh	r1, [r0, #12]
 80079b6:	6643      	str	r3, [r0, #100]	; 0x64
 80079b8:	81c2      	strh	r2, [r0, #14]
 80079ba:	6183      	str	r3, [r0, #24]
 80079bc:	4619      	mov	r1, r3
 80079be:	2208      	movs	r2, #8
 80079c0:	305c      	adds	r0, #92	; 0x5c
 80079c2:	f7fd fb5b 	bl	800507c <memset>
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <std+0x38>)
 80079c8:	6263      	str	r3, [r4, #36]	; 0x24
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <std+0x3c>)
 80079cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <std+0x40>)
 80079d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <std+0x44>)
 80079d4:	6224      	str	r4, [r4, #32]
 80079d6:	6323      	str	r3, [r4, #48]	; 0x30
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	bf00      	nop
 80079dc:	08007cf9 	.word	0x08007cf9
 80079e0:	08007d1b 	.word	0x08007d1b
 80079e4:	08007d53 	.word	0x08007d53
 80079e8:	08007d77 	.word	0x08007d77

080079ec <_cleanup_r>:
 80079ec:	4901      	ldr	r1, [pc, #4]	; (80079f4 <_cleanup_r+0x8>)
 80079ee:	f000 b8af 	b.w	8007b50 <_fwalk_reent>
 80079f2:	bf00      	nop
 80079f4:	0800792d 	.word	0x0800792d

080079f8 <__sfmoreglue>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	2268      	movs	r2, #104	; 0x68
 80079fc:	1e4d      	subs	r5, r1, #1
 80079fe:	4355      	muls	r5, r2
 8007a00:	460e      	mov	r6, r1
 8007a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a06:	f7ff fa65 	bl	8006ed4 <_malloc_r>
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	b140      	cbz	r0, 8007a20 <__sfmoreglue+0x28>
 8007a0e:	2100      	movs	r1, #0
 8007a10:	e9c0 1600 	strd	r1, r6, [r0]
 8007a14:	300c      	adds	r0, #12
 8007a16:	60a0      	str	r0, [r4, #8]
 8007a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a1c:	f7fd fb2e 	bl	800507c <memset>
 8007a20:	4620      	mov	r0, r4
 8007a22:	bd70      	pop	{r4, r5, r6, pc}

08007a24 <__sfp_lock_acquire>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__sfp_lock_acquire+0x8>)
 8007a26:	f000 b8b3 	b.w	8007b90 <__retarget_lock_acquire_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	2000033d 	.word	0x2000033d

08007a30 <__sfp_lock_release>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__sfp_lock_release+0x8>)
 8007a32:	f000 b8ae 	b.w	8007b92 <__retarget_lock_release_recursive>
 8007a36:	bf00      	nop
 8007a38:	2000033d 	.word	0x2000033d

08007a3c <__sinit_lock_acquire>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__sinit_lock_acquire+0x8>)
 8007a3e:	f000 b8a7 	b.w	8007b90 <__retarget_lock_acquire_recursive>
 8007a42:	bf00      	nop
 8007a44:	2000033e 	.word	0x2000033e

08007a48 <__sinit_lock_release>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__sinit_lock_release+0x8>)
 8007a4a:	f000 b8a2 	b.w	8007b92 <__retarget_lock_release_recursive>
 8007a4e:	bf00      	nop
 8007a50:	2000033e 	.word	0x2000033e

08007a54 <__sinit>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4604      	mov	r4, r0
 8007a58:	f7ff fff0 	bl	8007a3c <__sinit_lock_acquire>
 8007a5c:	69a3      	ldr	r3, [r4, #24]
 8007a5e:	b11b      	cbz	r3, 8007a68 <__sinit+0x14>
 8007a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a64:	f7ff bff0 	b.w	8007a48 <__sinit_lock_release>
 8007a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <__sinit+0x68>)
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <__sinit+0x6c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	bf04      	itt	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	61a3      	streq	r3, [r4, #24]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f820 	bl	8007ac4 <__sfp>
 8007a84:	6060      	str	r0, [r4, #4]
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 f81c 	bl	8007ac4 <__sfp>
 8007a8c:	60a0      	str	r0, [r4, #8]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f818 	bl	8007ac4 <__sfp>
 8007a94:	2200      	movs	r2, #0
 8007a96:	60e0      	str	r0, [r4, #12]
 8007a98:	2104      	movs	r1, #4
 8007a9a:	6860      	ldr	r0, [r4, #4]
 8007a9c:	f7ff ff82 	bl	80079a4 <std>
 8007aa0:	68a0      	ldr	r0, [r4, #8]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	2109      	movs	r1, #9
 8007aa6:	f7ff ff7d 	bl	80079a4 <std>
 8007aaa:	68e0      	ldr	r0, [r4, #12]
 8007aac:	2202      	movs	r2, #2
 8007aae:	2112      	movs	r1, #18
 8007ab0:	f7ff ff78 	bl	80079a4 <std>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	61a3      	str	r3, [r4, #24]
 8007ab8:	e7d2      	b.n	8007a60 <__sinit+0xc>
 8007aba:	bf00      	nop
 8007abc:	08007ec0 	.word	0x08007ec0
 8007ac0:	080079ed 	.word	0x080079ed

08007ac4 <__sfp>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	f7ff ffac 	bl	8007a24 <__sfp_lock_acquire>
 8007acc:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <__sfp+0x84>)
 8007ace:	681e      	ldr	r6, [r3, #0]
 8007ad0:	69b3      	ldr	r3, [r6, #24]
 8007ad2:	b913      	cbnz	r3, 8007ada <__sfp+0x16>
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff ffbd 	bl	8007a54 <__sinit>
 8007ada:	3648      	adds	r6, #72	; 0x48
 8007adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	d503      	bpl.n	8007aec <__sfp+0x28>
 8007ae4:	6833      	ldr	r3, [r6, #0]
 8007ae6:	b30b      	cbz	r3, 8007b2c <__sfp+0x68>
 8007ae8:	6836      	ldr	r6, [r6, #0]
 8007aea:	e7f7      	b.n	8007adc <__sfp+0x18>
 8007aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007af0:	b9d5      	cbnz	r5, 8007b28 <__sfp+0x64>
 8007af2:	4b16      	ldr	r3, [pc, #88]	; (8007b4c <__sfp+0x88>)
 8007af4:	60e3      	str	r3, [r4, #12]
 8007af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007afa:	6665      	str	r5, [r4, #100]	; 0x64
 8007afc:	f000 f847 	bl	8007b8e <__retarget_lock_init_recursive>
 8007b00:	f7ff ff96 	bl	8007a30 <__sfp_lock_release>
 8007b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b0c:	6025      	str	r5, [r4, #0]
 8007b0e:	61a5      	str	r5, [r4, #24]
 8007b10:	2208      	movs	r2, #8
 8007b12:	4629      	mov	r1, r5
 8007b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b18:	f7fd fab0 	bl	800507c <memset>
 8007b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b24:	4620      	mov	r0, r4
 8007b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b28:	3468      	adds	r4, #104	; 0x68
 8007b2a:	e7d9      	b.n	8007ae0 <__sfp+0x1c>
 8007b2c:	2104      	movs	r1, #4
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff ff62 	bl	80079f8 <__sfmoreglue>
 8007b34:	4604      	mov	r4, r0
 8007b36:	6030      	str	r0, [r6, #0]
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d1d5      	bne.n	8007ae8 <__sfp+0x24>
 8007b3c:	f7ff ff78 	bl	8007a30 <__sfp_lock_release>
 8007b40:	230c      	movs	r3, #12
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	e7ee      	b.n	8007b24 <__sfp+0x60>
 8007b46:	bf00      	nop
 8007b48:	08007ec0 	.word	0x08007ec0
 8007b4c:	ffff0001 	.word	0xffff0001

08007b50 <_fwalk_reent>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4606      	mov	r6, r0
 8007b56:	4688      	mov	r8, r1
 8007b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b5c:	2700      	movs	r7, #0
 8007b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b62:	f1b9 0901 	subs.w	r9, r9, #1
 8007b66:	d505      	bpl.n	8007b74 <_fwalk_reent+0x24>
 8007b68:	6824      	ldr	r4, [r4, #0]
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d1f7      	bne.n	8007b5e <_fwalk_reent+0xe>
 8007b6e:	4638      	mov	r0, r7
 8007b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b74:	89ab      	ldrh	r3, [r5, #12]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d907      	bls.n	8007b8a <_fwalk_reent+0x3a>
 8007b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	d003      	beq.n	8007b8a <_fwalk_reent+0x3a>
 8007b82:	4629      	mov	r1, r5
 8007b84:	4630      	mov	r0, r6
 8007b86:	47c0      	blx	r8
 8007b88:	4307      	orrs	r7, r0
 8007b8a:	3568      	adds	r5, #104	; 0x68
 8007b8c:	e7e9      	b.n	8007b62 <_fwalk_reent+0x12>

08007b8e <__retarget_lock_init_recursive>:
 8007b8e:	4770      	bx	lr

08007b90 <__retarget_lock_acquire_recursive>:
 8007b90:	4770      	bx	lr

08007b92 <__retarget_lock_release_recursive>:
 8007b92:	4770      	bx	lr

08007b94 <__swhatbuf_r>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	b096      	sub	sp, #88	; 0x58
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	461d      	mov	r5, r3
 8007ba4:	da08      	bge.n	8007bb8 <__swhatbuf_r+0x24>
 8007ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	602a      	str	r2, [r5, #0]
 8007bae:	061a      	lsls	r2, r3, #24
 8007bb0:	d410      	bmi.n	8007bd4 <__swhatbuf_r+0x40>
 8007bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb6:	e00e      	b.n	8007bd6 <__swhatbuf_r+0x42>
 8007bb8:	466a      	mov	r2, sp
 8007bba:	f000 f903 	bl	8007dc4 <_fstat_r>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	dbf1      	blt.n	8007ba6 <__swhatbuf_r+0x12>
 8007bc2:	9a01      	ldr	r2, [sp, #4]
 8007bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bcc:	425a      	negs	r2, r3
 8007bce:	415a      	adcs	r2, r3
 8007bd0:	602a      	str	r2, [r5, #0]
 8007bd2:	e7ee      	b.n	8007bb2 <__swhatbuf_r+0x1e>
 8007bd4:	2340      	movs	r3, #64	; 0x40
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	b016      	add	sp, #88	; 0x58
 8007bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007be0 <__smakebuf_r>:
 8007be0:	898b      	ldrh	r3, [r1, #12]
 8007be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007be4:	079d      	lsls	r5, r3, #30
 8007be6:	4606      	mov	r6, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	d507      	bpl.n	8007bfc <__smakebuf_r+0x1c>
 8007bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	6163      	str	r3, [r4, #20]
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	ab01      	add	r3, sp, #4
 8007bfe:	466a      	mov	r2, sp
 8007c00:	f7ff ffc8 	bl	8007b94 <__swhatbuf_r>
 8007c04:	9900      	ldr	r1, [sp, #0]
 8007c06:	4605      	mov	r5, r0
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7ff f963 	bl	8006ed4 <_malloc_r>
 8007c0e:	b948      	cbnz	r0, 8007c24 <__smakebuf_r+0x44>
 8007c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c14:	059a      	lsls	r2, r3, #22
 8007c16:	d4ef      	bmi.n	8007bf8 <__smakebuf_r+0x18>
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	f043 0302 	orr.w	r3, r3, #2
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	e7e3      	b.n	8007bec <__smakebuf_r+0xc>
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <__smakebuf_r+0x7c>)
 8007c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	6020      	str	r0, [r4, #0]
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	9b00      	ldr	r3, [sp, #0]
 8007c34:	6163      	str	r3, [r4, #20]
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	6120      	str	r0, [r4, #16]
 8007c3a:	b15b      	cbz	r3, 8007c54 <__smakebuf_r+0x74>
 8007c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c40:	4630      	mov	r0, r6
 8007c42:	f000 f8d1 	bl	8007de8 <_isatty_r>
 8007c46:	b128      	cbz	r0, 8007c54 <__smakebuf_r+0x74>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f023 0303 	bic.w	r3, r3, #3
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	89a0      	ldrh	r0, [r4, #12]
 8007c56:	4305      	orrs	r5, r0
 8007c58:	81a5      	strh	r5, [r4, #12]
 8007c5a:	e7cd      	b.n	8007bf8 <__smakebuf_r+0x18>
 8007c5c:	080079ed 	.word	0x080079ed

08007c60 <_malloc_usable_size_r>:
 8007c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c64:	1f18      	subs	r0, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfbc      	itt	lt
 8007c6a:	580b      	ldrlt	r3, [r1, r0]
 8007c6c:	18c0      	addlt	r0, r0, r3
 8007c6e:	4770      	bx	lr

08007c70 <_raise_r>:
 8007c70:	291f      	cmp	r1, #31
 8007c72:	b538      	push	{r3, r4, r5, lr}
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	d904      	bls.n	8007c84 <_raise_r+0x14>
 8007c7a:	2316      	movs	r3, #22
 8007c7c:	6003      	str	r3, [r0, #0]
 8007c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c86:	b112      	cbz	r2, 8007c8e <_raise_r+0x1e>
 8007c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c8c:	b94b      	cbnz	r3, 8007ca2 <_raise_r+0x32>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f830 	bl	8007cf4 <_getpid_r>
 8007c94:	462a      	mov	r2, r5
 8007c96:	4601      	mov	r1, r0
 8007c98:	4620      	mov	r0, r4
 8007c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c9e:	f000 b817 	b.w	8007cd0 <_kill_r>
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d00a      	beq.n	8007cbc <_raise_r+0x4c>
 8007ca6:	1c59      	adds	r1, r3, #1
 8007ca8:	d103      	bne.n	8007cb2 <_raise_r+0x42>
 8007caa:	2316      	movs	r3, #22
 8007cac:	6003      	str	r3, [r0, #0]
 8007cae:	2001      	movs	r0, #1
 8007cb0:	e7e7      	b.n	8007c82 <_raise_r+0x12>
 8007cb2:	2400      	movs	r4, #0
 8007cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cb8:	4628      	mov	r0, r5
 8007cba:	4798      	blx	r3
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	e7e0      	b.n	8007c82 <_raise_r+0x12>

08007cc0 <raise>:
 8007cc0:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <raise+0xc>)
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	f7ff bfd3 	b.w	8007c70 <_raise_r>
 8007cca:	bf00      	nop
 8007ccc:	2000000c 	.word	0x2000000c

08007cd0 <_kill_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d07      	ldr	r5, [pc, #28]	; (8007cf0 <_kill_r+0x20>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	4611      	mov	r1, r2
 8007cdc:	602b      	str	r3, [r5, #0]
 8007cde:	f7f9 fbe7 	bl	80014b0 <_kill>
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	d102      	bne.n	8007cec <_kill_r+0x1c>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	b103      	cbz	r3, 8007cec <_kill_r+0x1c>
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000338 	.word	0x20000338

08007cf4 <_getpid_r>:
 8007cf4:	f7f9 bbd4 	b.w	80014a0 <_getpid>

08007cf8 <__sread>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	f000 f894 	bl	8007e2c <_read_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	bfab      	itete	ge
 8007d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d0c:	181b      	addge	r3, r3, r0
 8007d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d12:	bfac      	ite	ge
 8007d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d16:	81a3      	strhlt	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__swrite>:
 8007d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1e:	461f      	mov	r7, r3
 8007d20:	898b      	ldrh	r3, [r1, #12]
 8007d22:	05db      	lsls	r3, r3, #23
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	4616      	mov	r6, r2
 8007d2a:	d505      	bpl.n	8007d38 <__swrite+0x1e>
 8007d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d30:	2302      	movs	r3, #2
 8007d32:	2200      	movs	r2, #0
 8007d34:	f000 f868 	bl	8007e08 <_lseek_r>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4e:	f000 b817 	b.w	8007d80 <_write_r>

08007d52 <__sseek>:
 8007d52:	b510      	push	{r4, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 f855 	bl	8007e08 <_lseek_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	bf15      	itete	ne
 8007d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d6e:	81a3      	strheq	r3, [r4, #12]
 8007d70:	bf18      	it	ne
 8007d72:	81a3      	strhne	r3, [r4, #12]
 8007d74:	bd10      	pop	{r4, pc}

08007d76 <__sclose>:
 8007d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7a:	f000 b813 	b.w	8007da4 <_close_r>
	...

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	; (8007da0 <_write_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7f9 fbc5 	bl	800151e <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20000338 	.word	0x20000338

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d06      	ldr	r5, [pc, #24]	; (8007dc0 <_close_r+0x1c>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	f7f9 fbd1 	bl	8001556 <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	20000338 	.word	0x20000338

08007dc4 <_fstat_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	; (8007de4 <_fstat_r+0x20>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	f7f9 fbcc 	bl	800156e <_fstat>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	d102      	bne.n	8007de0 <_fstat_r+0x1c>
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	b103      	cbz	r3, 8007de0 <_fstat_r+0x1c>
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	bd38      	pop	{r3, r4, r5, pc}
 8007de2:	bf00      	nop
 8007de4:	20000338 	.word	0x20000338

08007de8 <_isatty_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d06      	ldr	r5, [pc, #24]	; (8007e04 <_isatty_r+0x1c>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7f9 fbcb 	bl	800158e <_isatty>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_isatty_r+0x1a>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_isatty_r+0x1a>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20000338 	.word	0x20000338

08007e08 <_lseek_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	; (8007e28 <_lseek_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7f9 fbc4 	bl	80015a4 <_lseek>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_lseek_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_lseek_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20000338 	.word	0x20000338

08007e2c <_read_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	; (8007e4c <_read_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7f9 fb52 	bl	80014e4 <_read>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_read_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_read_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000338 	.word	0x20000338

08007e50 <_init>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr

08007e5c <_fini>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr
